
Tic-Tac-Toe-AI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bae0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001144  0800bc80  0800bc80  0000cc80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdc4  0800cdc4  0000e744  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdc4  0800cdc4  0000ddc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdcc  0800cdcc  0000e744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdcc  0800cdcc  0000ddcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cdd0  0800cdd0  0000ddd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000744  20000000  0800cdd4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  20000744  0800d518  0000e744  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b18  0800d518  0000eb18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e744  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ad1  00000000  00000000  0000e774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b1c  00000000  00000000  00022245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  00025d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba2  00000000  00000000  00026cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d23  00000000  00000000  0002787a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001843c  00000000  00000000  0004159d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e196  00000000  00000000  000599d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7b6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005214  00000000  00000000  000e7bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000ecdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000744 	.word	0x20000744
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bc68 	.word	0x0800bc68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000748 	.word	0x20000748
 80001dc:	0800bc68 	.word	0x0800bc68

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_frsub>:
 8000c98:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c9c:	e002      	b.n	8000ca4 <__addsf3>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_fsub>:
 8000ca0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ca4 <__addsf3>:
 8000ca4:	0042      	lsls	r2, r0, #1
 8000ca6:	bf1f      	itttt	ne
 8000ca8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cac:	ea92 0f03 	teqne	r2, r3
 8000cb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb8:	d06a      	beq.n	8000d90 <__addsf3+0xec>
 8000cba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cc2:	bfc1      	itttt	gt
 8000cc4:	18d2      	addgt	r2, r2, r3
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	4048      	eorgt	r0, r1
 8000cca:	4041      	eorgt	r1, r0
 8000ccc:	bfb8      	it	lt
 8000cce:	425b      	neglt	r3, r3
 8000cd0:	2b19      	cmp	r3, #25
 8000cd2:	bf88      	it	hi
 8000cd4:	4770      	bxhi	lr
 8000cd6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cde:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4240      	negne	r0, r0
 8000ce6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cea:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cee:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4249      	negne	r1, r1
 8000cf6:	ea92 0f03 	teq	r2, r3
 8000cfa:	d03f      	beq.n	8000d7c <__addsf3+0xd8>
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	fa41 fc03 	asr.w	ip, r1, r3
 8000d04:	eb10 000c 	adds.w	r0, r0, ip
 8000d08:	f1c3 0320 	rsb	r3, r3, #32
 8000d0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d10:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__addsf3+0x78>
 8000d16:	4249      	negs	r1, r1
 8000d18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d1c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d20:	d313      	bcc.n	8000d4a <__addsf3+0xa6>
 8000d22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d26:	d306      	bcc.n	8000d36 <__addsf3+0x92>
 8000d28:	0840      	lsrs	r0, r0, #1
 8000d2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2e:	f102 0201 	add.w	r2, r2, #1
 8000d32:	2afe      	cmp	r2, #254	@ 0xfe
 8000d34:	d251      	bcs.n	8000dda <__addsf3+0x136>
 8000d36:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	ea40 0003 	orr.w	r0, r0, r3
 8000d48:	4770      	bx	lr
 8000d4a:	0049      	lsls	r1, r1, #1
 8000d4c:	eb40 0000 	adc.w	r0, r0, r0
 8000d50:	3a01      	subs	r2, #1
 8000d52:	bf28      	it	cs
 8000d54:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d58:	d2ed      	bcs.n	8000d36 <__addsf3+0x92>
 8000d5a:	fab0 fc80 	clz	ip, r0
 8000d5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d62:	ebb2 020c 	subs.w	r2, r2, ip
 8000d66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d6a:	bfaa      	itet	ge
 8000d6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d70:	4252      	neglt	r2, r2
 8000d72:	4318      	orrge	r0, r3
 8000d74:	bfbc      	itt	lt
 8000d76:	40d0      	lsrlt	r0, r2
 8000d78:	4318      	orrlt	r0, r3
 8000d7a:	4770      	bx	lr
 8000d7c:	f092 0f00 	teq	r2, #0
 8000d80:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d84:	bf06      	itte	eq
 8000d86:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d8a:	3201      	addeq	r2, #1
 8000d8c:	3b01      	subne	r3, #1
 8000d8e:	e7b5      	b.n	8000cfc <__addsf3+0x58>
 8000d90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	bf18      	it	ne
 8000d9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9e:	d021      	beq.n	8000de4 <__addsf3+0x140>
 8000da0:	ea92 0f03 	teq	r2, r3
 8000da4:	d004      	beq.n	8000db0 <__addsf3+0x10c>
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	bf08      	it	eq
 8000dac:	4608      	moveq	r0, r1
 8000dae:	4770      	bx	lr
 8000db0:	ea90 0f01 	teq	r0, r1
 8000db4:	bf1c      	itt	ne
 8000db6:	2000      	movne	r0, #0
 8000db8:	4770      	bxne	lr
 8000dba:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dbe:	d104      	bne.n	8000dca <__addsf3+0x126>
 8000dc0:	0040      	lsls	r0, r0, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000dc8:	4770      	bx	lr
 8000dca:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dce:	bf3c      	itt	cc
 8000dd0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000dd4:	4770      	bxcc	lr
 8000dd6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dda:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de2:	4770      	bx	lr
 8000de4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de8:	bf16      	itet	ne
 8000dea:	4608      	movne	r0, r1
 8000dec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000df0:	4601      	movne	r1, r0
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	bf06      	itte	eq
 8000df6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dfa:	ea90 0f01 	teqeq	r0, r1
 8000dfe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_ui2f>:
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e004      	b.n	8000e14 <__aeabi_i2f+0x8>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_i2f>:
 8000e0c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e10:	bf48      	it	mi
 8000e12:	4240      	negmi	r0, r0
 8000e14:	ea5f 0c00 	movs.w	ip, r0
 8000e18:	bf08      	it	eq
 8000e1a:	4770      	bxeq	lr
 8000e1c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e20:	4601      	mov	r1, r0
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	e01c      	b.n	8000e62 <__aeabi_l2f+0x2a>

08000e28 <__aeabi_ul2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e00a      	b.n	8000e4c <__aeabi_l2f+0x14>
 8000e36:	bf00      	nop

08000e38 <__aeabi_l2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e44:	d502      	bpl.n	8000e4c <__aeabi_l2f+0x14>
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	ea5f 0c01 	movs.w	ip, r1
 8000e50:	bf02      	ittt	eq
 8000e52:	4684      	moveq	ip, r0
 8000e54:	4601      	moveq	r1, r0
 8000e56:	2000      	moveq	r0, #0
 8000e58:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e5c:	bf08      	it	eq
 8000e5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e62:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e66:	fabc f28c 	clz	r2, ip
 8000e6a:	3a08      	subs	r2, #8
 8000e6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e70:	db10      	blt.n	8000e94 <__aeabi_l2f+0x5c>
 8000e72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e76:	4463      	add	r3, ip
 8000e78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e84:	fa20 f202 	lsr.w	r2, r0, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f102 0220 	add.w	r2, r2, #32
 8000e98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_uldivmod>:
 8000eb4:	b953      	cbnz	r3, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb6:	b94a      	cbnz	r2, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	bf08      	it	eq
 8000ebc:	2800      	cmpeq	r0, #0
 8000ebe:	bf1c      	itt	ne
 8000ec0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ec4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ec8:	f000 b9a0 	b.w	800120c <__aeabi_idiv0>
 8000ecc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ed0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ed4:	f000 f83c 	bl	8000f50 <__udivmoddi4>
 8000ed8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee0:	b004      	add	sp, #16
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_d2lz>:
 8000ee4:	b538      	push	{r3, r4, r5, lr}
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2300      	movs	r3, #0
 8000eea:	4604      	mov	r4, r0
 8000eec:	460d      	mov	r5, r1
 8000eee:	f7ff fdfd 	bl	8000aec <__aeabi_dcmplt>
 8000ef2:	b928      	cbnz	r0, 8000f00 <__aeabi_d2lz+0x1c>
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	4629      	mov	r1, r5
 8000ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000efc:	f000 b80a 	b.w	8000f14 <__aeabi_d2ulz>
 8000f00:	4620      	mov	r0, r4
 8000f02:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f06:	f000 f805 	bl	8000f14 <__aeabi_d2ulz>
 8000f0a:	4240      	negs	r0, r0
 8000f0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f10:	bd38      	pop	{r3, r4, r5, pc}
 8000f12:	bf00      	nop

08000f14 <__aeabi_d2ulz>:
 8000f14:	b5d0      	push	{r4, r6, r7, lr}
 8000f16:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <__aeabi_d2ulz+0x34>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4606      	mov	r6, r0
 8000f1c:	460f      	mov	r7, r1
 8000f1e:	f7ff fb73 	bl	8000608 <__aeabi_dmul>
 8000f22:	f7ff fe49 	bl	8000bb8 <__aeabi_d2uiz>
 8000f26:	4604      	mov	r4, r0
 8000f28:	f7ff faf4 	bl	8000514 <__aeabi_ui2d>
 8000f2c:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <__aeabi_d2ulz+0x38>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f7ff fb6a 	bl	8000608 <__aeabi_dmul>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4630      	mov	r0, r6
 8000f3a:	4639      	mov	r1, r7
 8000f3c:	f7ff f9ac 	bl	8000298 <__aeabi_dsub>
 8000f40:	f7ff fe3a 	bl	8000bb8 <__aeabi_d2uiz>
 8000f44:	4621      	mov	r1, r4
 8000f46:	bdd0      	pop	{r4, r6, r7, pc}
 8000f48:	3df00000 	.word	0x3df00000
 8000f4c:	41f00000 	.word	0x41f00000

08000f50 <__udivmoddi4>:
 8000f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f54:	9d08      	ldr	r5, [sp, #32]
 8000f56:	460c      	mov	r4, r1
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d14e      	bne.n	8000ffa <__udivmoddi4+0xaa>
 8000f5c:	4694      	mov	ip, r2
 8000f5e:	458c      	cmp	ip, r1
 8000f60:	4686      	mov	lr, r0
 8000f62:	fab2 f282 	clz	r2, r2
 8000f66:	d962      	bls.n	800102e <__udivmoddi4+0xde>
 8000f68:	b14a      	cbz	r2, 8000f7e <__udivmoddi4+0x2e>
 8000f6a:	f1c2 0320 	rsb	r3, r2, #32
 8000f6e:	4091      	lsls	r1, r2
 8000f70:	fa20 f303 	lsr.w	r3, r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	4319      	orrs	r1, r3
 8000f7a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f82:	fa1f f68c 	uxth.w	r6, ip
 8000f86:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f8e:	fb07 1114 	mls	r1, r7, r4, r1
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb04 f106 	mul.w	r1, r4, r6
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d90a      	bls.n	8000fb4 <__udivmoddi4+0x64>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000fa6:	f080 8112 	bcs.w	80011ce <__udivmoddi4+0x27e>
 8000faa:	4299      	cmp	r1, r3
 8000fac:	f240 810f 	bls.w	80011ce <__udivmoddi4+0x27e>
 8000fb0:	3c02      	subs	r4, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1a59      	subs	r1, r3, r1
 8000fb6:	fa1f f38e 	uxth.w	r3, lr
 8000fba:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fbe:	fb07 1110 	mls	r1, r7, r0, r1
 8000fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc6:	fb00 f606 	mul.w	r6, r0, r6
 8000fca:	429e      	cmp	r6, r3
 8000fcc:	d90a      	bls.n	8000fe4 <__udivmoddi4+0x94>
 8000fce:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fd6:	f080 80fc 	bcs.w	80011d2 <__udivmoddi4+0x282>
 8000fda:	429e      	cmp	r6, r3
 8000fdc:	f240 80f9 	bls.w	80011d2 <__udivmoddi4+0x282>
 8000fe0:	4463      	add	r3, ip
 8000fe2:	3802      	subs	r0, #2
 8000fe4:	1b9b      	subs	r3, r3, r6
 8000fe6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000fea:	2100      	movs	r1, #0
 8000fec:	b11d      	cbz	r5, 8000ff6 <__udivmoddi4+0xa6>
 8000fee:	40d3      	lsrs	r3, r2
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ffa:	428b      	cmp	r3, r1
 8000ffc:	d905      	bls.n	800100a <__udivmoddi4+0xba>
 8000ffe:	b10d      	cbz	r5, 8001004 <__udivmoddi4+0xb4>
 8001000:	e9c5 0100 	strd	r0, r1, [r5]
 8001004:	2100      	movs	r1, #0
 8001006:	4608      	mov	r0, r1
 8001008:	e7f5      	b.n	8000ff6 <__udivmoddi4+0xa6>
 800100a:	fab3 f183 	clz	r1, r3
 800100e:	2900      	cmp	r1, #0
 8001010:	d146      	bne.n	80010a0 <__udivmoddi4+0x150>
 8001012:	42a3      	cmp	r3, r4
 8001014:	d302      	bcc.n	800101c <__udivmoddi4+0xcc>
 8001016:	4290      	cmp	r0, r2
 8001018:	f0c0 80f0 	bcc.w	80011fc <__udivmoddi4+0x2ac>
 800101c:	1a86      	subs	r6, r0, r2
 800101e:	eb64 0303 	sbc.w	r3, r4, r3
 8001022:	2001      	movs	r0, #1
 8001024:	2d00      	cmp	r5, #0
 8001026:	d0e6      	beq.n	8000ff6 <__udivmoddi4+0xa6>
 8001028:	e9c5 6300 	strd	r6, r3, [r5]
 800102c:	e7e3      	b.n	8000ff6 <__udivmoddi4+0xa6>
 800102e:	2a00      	cmp	r2, #0
 8001030:	f040 8090 	bne.w	8001154 <__udivmoddi4+0x204>
 8001034:	eba1 040c 	sub.w	r4, r1, ip
 8001038:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800103c:	fa1f f78c 	uxth.w	r7, ip
 8001040:	2101      	movs	r1, #1
 8001042:	fbb4 f6f8 	udiv	r6, r4, r8
 8001046:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800104a:	fb08 4416 	mls	r4, r8, r6, r4
 800104e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001052:	fb07 f006 	mul.w	r0, r7, r6
 8001056:	4298      	cmp	r0, r3
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x11c>
 800105a:	eb1c 0303 	adds.w	r3, ip, r3
 800105e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001062:	d202      	bcs.n	800106a <__udivmoddi4+0x11a>
 8001064:	4298      	cmp	r0, r3
 8001066:	f200 80cd 	bhi.w	8001204 <__udivmoddi4+0x2b4>
 800106a:	4626      	mov	r6, r4
 800106c:	1a1c      	subs	r4, r3, r0
 800106e:	fa1f f38e 	uxth.w	r3, lr
 8001072:	fbb4 f0f8 	udiv	r0, r4, r8
 8001076:	fb08 4410 	mls	r4, r8, r0, r4
 800107a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800107e:	fb00 f707 	mul.w	r7, r0, r7
 8001082:	429f      	cmp	r7, r3
 8001084:	d908      	bls.n	8001098 <__udivmoddi4+0x148>
 8001086:	eb1c 0303 	adds.w	r3, ip, r3
 800108a:	f100 34ff 	add.w	r4, r0, #4294967295
 800108e:	d202      	bcs.n	8001096 <__udivmoddi4+0x146>
 8001090:	429f      	cmp	r7, r3
 8001092:	f200 80b0 	bhi.w	80011f6 <__udivmoddi4+0x2a6>
 8001096:	4620      	mov	r0, r4
 8001098:	1bdb      	subs	r3, r3, r7
 800109a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800109e:	e7a5      	b.n	8000fec <__udivmoddi4+0x9c>
 80010a0:	f1c1 0620 	rsb	r6, r1, #32
 80010a4:	408b      	lsls	r3, r1
 80010a6:	fa22 f706 	lsr.w	r7, r2, r6
 80010aa:	431f      	orrs	r7, r3
 80010ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80010b0:	fa04 f301 	lsl.w	r3, r4, r1
 80010b4:	ea43 030c 	orr.w	r3, r3, ip
 80010b8:	40f4      	lsrs	r4, r6
 80010ba:	fa00 f801 	lsl.w	r8, r0, r1
 80010be:	0c38      	lsrs	r0, r7, #16
 80010c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80010c4:	fbb4 fef0 	udiv	lr, r4, r0
 80010c8:	fa1f fc87 	uxth.w	ip, r7
 80010cc:	fb00 441e 	mls	r4, r0, lr, r4
 80010d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80010d4:	fb0e f90c 	mul.w	r9, lr, ip
 80010d8:	45a1      	cmp	r9, r4
 80010da:	fa02 f201 	lsl.w	r2, r2, r1
 80010de:	d90a      	bls.n	80010f6 <__udivmoddi4+0x1a6>
 80010e0:	193c      	adds	r4, r7, r4
 80010e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80010e6:	f080 8084 	bcs.w	80011f2 <__udivmoddi4+0x2a2>
 80010ea:	45a1      	cmp	r9, r4
 80010ec:	f240 8081 	bls.w	80011f2 <__udivmoddi4+0x2a2>
 80010f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80010f4:	443c      	add	r4, r7
 80010f6:	eba4 0409 	sub.w	r4, r4, r9
 80010fa:	fa1f f983 	uxth.w	r9, r3
 80010fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8001102:	fb00 4413 	mls	r4, r0, r3, r4
 8001106:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800110a:	fb03 fc0c 	mul.w	ip, r3, ip
 800110e:	45a4      	cmp	ip, r4
 8001110:	d907      	bls.n	8001122 <__udivmoddi4+0x1d2>
 8001112:	193c      	adds	r4, r7, r4
 8001114:	f103 30ff 	add.w	r0, r3, #4294967295
 8001118:	d267      	bcs.n	80011ea <__udivmoddi4+0x29a>
 800111a:	45a4      	cmp	ip, r4
 800111c:	d965      	bls.n	80011ea <__udivmoddi4+0x29a>
 800111e:	3b02      	subs	r3, #2
 8001120:	443c      	add	r4, r7
 8001122:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001126:	fba0 9302 	umull	r9, r3, r0, r2
 800112a:	eba4 040c 	sub.w	r4, r4, ip
 800112e:	429c      	cmp	r4, r3
 8001130:	46ce      	mov	lr, r9
 8001132:	469c      	mov	ip, r3
 8001134:	d351      	bcc.n	80011da <__udivmoddi4+0x28a>
 8001136:	d04e      	beq.n	80011d6 <__udivmoddi4+0x286>
 8001138:	b155      	cbz	r5, 8001150 <__udivmoddi4+0x200>
 800113a:	ebb8 030e 	subs.w	r3, r8, lr
 800113e:	eb64 040c 	sbc.w	r4, r4, ip
 8001142:	fa04 f606 	lsl.w	r6, r4, r6
 8001146:	40cb      	lsrs	r3, r1
 8001148:	431e      	orrs	r6, r3
 800114a:	40cc      	lsrs	r4, r1
 800114c:	e9c5 6400 	strd	r6, r4, [r5]
 8001150:	2100      	movs	r1, #0
 8001152:	e750      	b.n	8000ff6 <__udivmoddi4+0xa6>
 8001154:	f1c2 0320 	rsb	r3, r2, #32
 8001158:	fa20 f103 	lsr.w	r1, r0, r3
 800115c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001160:	fa24 f303 	lsr.w	r3, r4, r3
 8001164:	4094      	lsls	r4, r2
 8001166:	430c      	orrs	r4, r1
 8001168:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800116c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001170:	fa1f f78c 	uxth.w	r7, ip
 8001174:	fbb3 f0f8 	udiv	r0, r3, r8
 8001178:	fb08 3110 	mls	r1, r8, r0, r3
 800117c:	0c23      	lsrs	r3, r4, #16
 800117e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001182:	fb00 f107 	mul.w	r1, r0, r7
 8001186:	4299      	cmp	r1, r3
 8001188:	d908      	bls.n	800119c <__udivmoddi4+0x24c>
 800118a:	eb1c 0303 	adds.w	r3, ip, r3
 800118e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001192:	d22c      	bcs.n	80011ee <__udivmoddi4+0x29e>
 8001194:	4299      	cmp	r1, r3
 8001196:	d92a      	bls.n	80011ee <__udivmoddi4+0x29e>
 8001198:	3802      	subs	r0, #2
 800119a:	4463      	add	r3, ip
 800119c:	1a5b      	subs	r3, r3, r1
 800119e:	b2a4      	uxth	r4, r4
 80011a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80011a4:	fb08 3311 	mls	r3, r8, r1, r3
 80011a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011ac:	fb01 f307 	mul.w	r3, r1, r7
 80011b0:	42a3      	cmp	r3, r4
 80011b2:	d908      	bls.n	80011c6 <__udivmoddi4+0x276>
 80011b4:	eb1c 0404 	adds.w	r4, ip, r4
 80011b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80011bc:	d213      	bcs.n	80011e6 <__udivmoddi4+0x296>
 80011be:	42a3      	cmp	r3, r4
 80011c0:	d911      	bls.n	80011e6 <__udivmoddi4+0x296>
 80011c2:	3902      	subs	r1, #2
 80011c4:	4464      	add	r4, ip
 80011c6:	1ae4      	subs	r4, r4, r3
 80011c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011cc:	e739      	b.n	8001042 <__udivmoddi4+0xf2>
 80011ce:	4604      	mov	r4, r0
 80011d0:	e6f0      	b.n	8000fb4 <__udivmoddi4+0x64>
 80011d2:	4608      	mov	r0, r1
 80011d4:	e706      	b.n	8000fe4 <__udivmoddi4+0x94>
 80011d6:	45c8      	cmp	r8, r9
 80011d8:	d2ae      	bcs.n	8001138 <__udivmoddi4+0x1e8>
 80011da:	ebb9 0e02 	subs.w	lr, r9, r2
 80011de:	eb63 0c07 	sbc.w	ip, r3, r7
 80011e2:	3801      	subs	r0, #1
 80011e4:	e7a8      	b.n	8001138 <__udivmoddi4+0x1e8>
 80011e6:	4631      	mov	r1, r6
 80011e8:	e7ed      	b.n	80011c6 <__udivmoddi4+0x276>
 80011ea:	4603      	mov	r3, r0
 80011ec:	e799      	b.n	8001122 <__udivmoddi4+0x1d2>
 80011ee:	4630      	mov	r0, r6
 80011f0:	e7d4      	b.n	800119c <__udivmoddi4+0x24c>
 80011f2:	46d6      	mov	lr, sl
 80011f4:	e77f      	b.n	80010f6 <__udivmoddi4+0x1a6>
 80011f6:	4463      	add	r3, ip
 80011f8:	3802      	subs	r0, #2
 80011fa:	e74d      	b.n	8001098 <__udivmoddi4+0x148>
 80011fc:	4606      	mov	r6, r0
 80011fe:	4623      	mov	r3, r4
 8001200:	4608      	mov	r0, r1
 8001202:	e70f      	b.n	8001024 <__udivmoddi4+0xd4>
 8001204:	3e02      	subs	r6, #2
 8001206:	4463      	add	r3, ip
 8001208:	e730      	b.n	800106c <__udivmoddi4+0x11c>
 800120a:	bf00      	nop

0800120c <__aeabi_idiv0>:
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop

08001210 <draw_tictactoe_grid>:

};


// Funzione per disegnare la griglia del tris con lettere e numeri
void draw_tictactoe_grid() {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
    int i, j;

    // Disegna le lettere sopra la griglia
    setChar('a', GRID_X_OFFSET + CELL_WIDTH / 2, GRID_Y_OFFSET - CELL_HEIGHT, true);
 8001216:	2301      	movs	r3, #1
 8001218:	2200      	movs	r2, #0
 800121a:	210f      	movs	r1, #15
 800121c:	2061      	movs	r0, #97	@ 0x61
 800121e:	f000 f9a7 	bl	8001570 <setChar>
    setChar('b', GRID_X_OFFSET + CELL_WIDTH * 3 / 2, GRID_Y_OFFSET - CELL_HEIGHT, true);
 8001222:	2301      	movs	r3, #1
 8001224:	2200      	movs	r2, #0
 8001226:	2119      	movs	r1, #25
 8001228:	2062      	movs	r0, #98	@ 0x62
 800122a:	f000 f9a1 	bl	8001570 <setChar>
    setChar('c', GRID_X_OFFSET + CELL_WIDTH * 5 / 2, GRID_Y_OFFSET - CELL_HEIGHT, true);
 800122e:	2301      	movs	r3, #1
 8001230:	2200      	movs	r2, #0
 8001232:	2123      	movs	r1, #35	@ 0x23
 8001234:	2063      	movs	r0, #99	@ 0x63
 8001236:	f000 f99b 	bl	8001570 <setChar>

    // Disegna i numeri a sinistra della griglia
    setChar('1', GRID_X_OFFSET - CELL_WIDTH, GRID_Y_OFFSET + CELL_HEIGHT / 2, true);
 800123a:	2301      	movs	r3, #1
 800123c:	220f      	movs	r2, #15
 800123e:	2100      	movs	r1, #0
 8001240:	2031      	movs	r0, #49	@ 0x31
 8001242:	f000 f995 	bl	8001570 <setChar>
    setChar('2', GRID_X_OFFSET - CELL_WIDTH, GRID_Y_OFFSET + CELL_HEIGHT * 3 / 2, true);
 8001246:	2301      	movs	r3, #1
 8001248:	2219      	movs	r2, #25
 800124a:	2100      	movs	r1, #0
 800124c:	2032      	movs	r0, #50	@ 0x32
 800124e:	f000 f98f 	bl	8001570 <setChar>
    setChar('3', GRID_X_OFFSET - CELL_WIDTH, GRID_Y_OFFSET + CELL_HEIGHT * 5 / 2, true);
 8001252:	2301      	movs	r3, #1
 8001254:	2223      	movs	r2, #35	@ 0x23
 8001256:	2100      	movs	r1, #0
 8001258:	2033      	movs	r0, #51	@ 0x33
 800125a:	f000 f989 	bl	8001570 <setChar>

    // Disegna le linee orizzontali
    for (i = 0; i <= 3; i++) {
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	e018      	b.n	8001296 <draw_tictactoe_grid+0x86>
        for (j = 0; j < GRID_WIDTH; j++) {
 8001264:	2300      	movs	r3, #0
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	e00f      	b.n	800128a <draw_tictactoe_grid+0x7a>
            setPixel1(GRID_X_OFFSET + j, GRID_Y_OFFSET + i * CELL_HEIGHT, true);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	f103 000a 	add.w	r0, r3, #10
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	2201      	movs	r2, #1
 800127e:	4619      	mov	r1, r3
 8001280:	f000 f914 	bl	80014ac <setPixel1>
        for (j = 0; j < GRID_WIDTH; j++) {
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	3301      	adds	r3, #1
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	2b1d      	cmp	r3, #29
 800128e:	ddec      	ble.n	800126a <draw_tictactoe_grid+0x5a>
    for (i = 0; i <= 3; i++) {
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3301      	adds	r3, #1
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b03      	cmp	r3, #3
 800129a:	dde3      	ble.n	8001264 <draw_tictactoe_grid+0x54>
        }
    }

    // Disegna le linee verticali
    for (i = 0; i <= 3; i++) {
 800129c:	2300      	movs	r3, #0
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	e018      	b.n	80012d4 <draw_tictactoe_grid+0xc4>
        for (j = 0; j < GRID_HEIGHT; j++) {
 80012a2:	2300      	movs	r3, #0
 80012a4:	603b      	str	r3, [r7, #0]
 80012a6:	e00f      	b.n	80012c8 <draw_tictactoe_grid+0xb8>
            setPixel1(GRID_X_OFFSET + i * CELL_WIDTH, GRID_Y_OFFSET + j, true);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	4613      	mov	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4618      	mov	r0, r3
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	330a      	adds	r3, #10
 80012ba:	2201      	movs	r2, #1
 80012bc:	4619      	mov	r1, r3
 80012be:	f000 f8f5 	bl	80014ac <setPixel1>
        for (j = 0; j < GRID_HEIGHT; j++) {
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	2b1d      	cmp	r3, #29
 80012cc:	ddec      	ble.n	80012a8 <draw_tictactoe_grid+0x98>
    for (i = 0; i <= 3; i++) {
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3301      	adds	r3, #1
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	dde3      	ble.n	80012a2 <draw_tictactoe_grid+0x92>
        }
    }
}
 80012da:	bf00      	nop
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <draw_symbol_in_cell>:



// Funzione per disegnare un simbolo ('X' o 'O') in una cella
void draw_symbol_in_cell(int row, int col, char symbol){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	4613      	mov	r3, r2
 80012f0:	71fb      	strb	r3, [r7, #7]

    int i, j;
    int base_x = GRID_X_OFFSET + col * CELL_WIDTH;
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1c5a      	adds	r2, r3, #1
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
    int base_y = GRID_Y_OFFSET + row * CELL_HEIGHT;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	613b      	str	r3, [r7, #16]

    if (symbol == 'X') {
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	2b58      	cmp	r3, #88	@ 0x58
 8001312:	d11f      	bne.n	8001354 <draw_symbol_in_cell+0x70>
        // Disegna la X: due linee incrociate
        for (i = 0; i < CELL_WIDTH; i++) {
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	e018      	b.n	800134c <draw_symbol_in_cell+0x68>
            setPixel1(base_x + i, base_y + i, true);  // Diagonale 1
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	18d0      	adds	r0, r2, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	4413      	add	r3, r2
 8001326:	2201      	movs	r2, #1
 8001328:	4619      	mov	r1, r3
 800132a:	f000 f8bf 	bl	80014ac <setPixel1>
            setPixel1(base_x + i, base_y + (CELL_HEIGHT - 1 - i), true);  // Diagonale 2
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	18d0      	adds	r0, r2, r3
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f1c3 0209 	rsb	r2, r3, #9
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4413      	add	r3, r2
 800133e:	2201      	movs	r2, #1
 8001340:	4619      	mov	r1, r3
 8001342:	f000 f8b3 	bl	80014ac <setPixel1>
        for (i = 0; i < CELL_WIDTH; i++) {
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3301      	adds	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2b09      	cmp	r3, #9
 8001350:	dde3      	ble.n	800131a <draw_symbol_in_cell+0x36>
                    setPixel1(base_x + i, base_y + j, true);
                }
            }
        }
    }
}
 8001352:	e02d      	b.n	80013b0 <draw_symbol_in_cell+0xcc>
    } else if (symbol == 'O') {
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b4f      	cmp	r3, #79	@ 0x4f
 8001358:	d12a      	bne.n	80013b0 <draw_symbol_in_cell+0xcc>
        for (i = 0; i < CELL_WIDTH; i++) {
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
 800135e:	e024      	b.n	80013aa <draw_symbol_in_cell+0xc6>
            for (j = 0; j < CELL_HEIGHT; j++) {
 8001360:	2300      	movs	r3, #0
 8001362:	61bb      	str	r3, [r7, #24]
 8001364:	e01b      	b.n	800139e <draw_symbol_in_cell+0xba>
                if ((i - CELL_WIDTH / 2) * (i - CELL_WIDTH / 2) + (j - CELL_HEIGHT / 2) * (j - CELL_HEIGHT / 2) <= (CELL_WIDTH / 2) * (CELL_HEIGHT / 2)) {
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3b05      	subs	r3, #5
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	3a05      	subs	r2, #5
 800136e:	fb03 f202 	mul.w	r2, r3, r2
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	3b05      	subs	r3, #5
 8001376:	69b9      	ldr	r1, [r7, #24]
 8001378:	3905      	subs	r1, #5
 800137a:	fb01 f303 	mul.w	r3, r1, r3
 800137e:	4413      	add	r3, r2
 8001380:	2b19      	cmp	r3, #25
 8001382:	dc09      	bgt.n	8001398 <draw_symbol_in_cell+0xb4>
                    setPixel1(base_x + i, base_y + j, true);
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	18d0      	adds	r0, r2, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	4413      	add	r3, r2
 8001390:	2201      	movs	r2, #1
 8001392:	4619      	mov	r1, r3
 8001394:	f000 f88a 	bl	80014ac <setPixel1>
            for (j = 0; j < CELL_HEIGHT; j++) {
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	3301      	adds	r3, #1
 800139c:	61bb      	str	r3, [r7, #24]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	2b09      	cmp	r3, #9
 80013a2:	dde0      	ble.n	8001366 <draw_symbol_in_cell+0x82>
        for (i = 0; i < CELL_WIDTH; i++) {
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	3301      	adds	r3, #1
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	2b09      	cmp	r3, #9
 80013ae:	ddd7      	ble.n	8001360 <draw_symbol_in_cell+0x7c>
}
 80013b0:	bf00      	nop
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <spi_write>:





void spi_write(unsigned char c) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
    // Controlla se ci sono errori prima della trasmissione
    if (__HAL_SPI_GET_FLAG(&hspi2, SPI_FLAG_OVR)) {
 80013c2:	4b16      	ldr	r3, [pc, #88]	@ (800141c <spi_write+0x64>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013cc:	2b40      	cmp	r3, #64	@ 0x40
 80013ce:	d10a      	bne.n	80013e6 <spi_write+0x2e>
        __HAL_SPI_CLEAR_OVRFLAG(&hspi2);
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	4b11      	ldr	r3, [pc, #68]	@ (800141c <spi_write+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <spi_write+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
    }

    // Usa la funzione HAL per trasmettere un byte
    HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, &c, 1, HAL_MAX_DELAY);
 80013e6:	1df9      	adds	r1, r7, #7
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ec:	2201      	movs	r2, #1
 80013ee:	480b      	ldr	r0, [pc, #44]	@ (800141c <spi_write+0x64>)
 80013f0:	f004 fdb7 	bl	8005f62 <HAL_SPI_Transmit>
 80013f4:	4603      	mov	r3, r0
 80013f6:	73fb      	strb	r3, [r7, #15]

    // Controlla lo stato della trasmissione
    if (status != HAL_OK) {
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <spi_write+0x4a>
        // Gestione dell'errore
        Error_Handler();
 80013fe:	f000 fe7b 	bl	80020f8 <Error_Handler>
    }

    // Verifica lo stato del bus SPI
    while (__HAL_SPI_GET_FLAG(&hspi2, SPI_FLAG_BSY)) {
 8001402:	bf00      	nop
 8001404:	4b05      	ldr	r3, [pc, #20]	@ (800141c <spi_write+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800140e:	2b80      	cmp	r3, #128	@ 0x80
 8001410:	d0f8      	beq.n	8001404 <spi_write+0x4c>
        // Attesa finché SPI è occupato
    }
}
 8001412:	bf00      	nop
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000924 	.word	0x20000924

08001420 <LCDcommand>:



void LCDcommand(unsigned char data) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
    CS0;
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <LCDcommand+0x30>)
 800142c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001430:	619a      	str	r2, [r3, #24]
    LCD_COMMAND;
 8001432:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <LCDcommand+0x30>)
 8001434:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001438:	619a      	str	r2, [r3, #24]
    spi_write(data);
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ffbb 	bl	80013b8 <spi_write>
    CS1;
 8001442:	4b03      	ldr	r3, [pc, #12]	@ (8001450 <LCDcommand+0x30>)
 8001444:	2210      	movs	r2, #16
 8001446:	619a      	str	r2, [r3, #24]
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40020000 	.word	0x40020000

08001454 <LCDdata>:

void LCDdata(unsigned char data) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
    CS0;
 800145e:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <LCDdata+0x30>)
 8001460:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001464:	619a      	str	r2, [r3, #24]
    LCD_DATA;
 8001466:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <LCDdata+0x30>)
 8001468:	2201      	movs	r2, #1
 800146a:	619a      	str	r2, [r3, #24]
    spi_write(data);
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ffa2 	bl	80013b8 <spi_write>
    CS1;
 8001474:	4b03      	ldr	r3, [pc, #12]	@ (8001484 <LCDdata+0x30>)
 8001476:	2210      	movs	r2, #16
 8001478:	619a      	str	r2, [r3, #24]
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40020000 	.word	0x40020000

08001488 <LCD_Print>:

// Nuova funzione per scrivere una stringa sul display LCD
void LCD_Print(const char *message, int x, int y) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
    setStr((char *)message, x, y, BLACK); // Usa la funzione esistente per scrivere una stringa sul display
 8001494:	2301      	movs	r3, #1
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	68b9      	ldr	r1, [r7, #8]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 f8c0 	bl	8001620 <setStr>
    updateDisplay(); // Aggiorna il display per mostrare la nuova stringa
 80014a0:	f000 f944 	bl	800172c <updateDisplay>
}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <setPixel1>:


// This function sets a pixel on displayMap to your preferred
// color. 1=Black, 0= white.
void setPixel1(int x, int y, bool bw)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b087      	sub	sp, #28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	4613      	mov	r3, r2
 80014b8:	71fb      	strb	r3, [r7, #7]
  // First, double check that the coordinate is in range.
  if ((x >= 0) && (x < LCD_WIDTH) && (y >= 0) && (y < LCD_HEIGHT))
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db4f      	blt.n	8001560 <setPixel1+0xb4>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b53      	cmp	r3, #83	@ 0x53
 80014c4:	dc4c      	bgt.n	8001560 <setPixel1+0xb4>
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	db49      	blt.n	8001560 <setPixel1+0xb4>
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2b2f      	cmp	r3, #47	@ 0x2f
 80014d0:	dc46      	bgt.n	8001560 <setPixel1+0xb4>
  {
    int shift = y % 8;
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	425a      	negs	r2, r3
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	f002 0207 	and.w	r2, r2, #7
 80014de:	bf58      	it	pl
 80014e0:	4253      	negpl	r3, r2
 80014e2:	617b      	str	r3, [r7, #20]

    if (bw) // If black, set the bit.
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d01c      	beq.n	8001524 <setPixel1+0x78>
      displayMap_5110[x + (y/8)*LCD_WIDTH] |= 1<<shift;
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	da00      	bge.n	80014f2 <setPixel1+0x46>
 80014f0:	3307      	adds	r3, #7
 80014f2:	10db      	asrs	r3, r3, #3
 80014f4:	2254      	movs	r2, #84	@ 0x54
 80014f6:	fb02 f103 	mul.w	r1, r2, r3
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	440a      	add	r2, r1
 80014fe:	491b      	ldr	r1, [pc, #108]	@ (800156c <setPixel1+0xc0>)
 8001500:	5c8a      	ldrb	r2, [r1, r2]
 8001502:	b251      	sxtb	r1, r2
 8001504:	2001      	movs	r0, #1
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	fa00 f202 	lsl.w	r2, r0, r2
 800150c:	b252      	sxtb	r2, r2
 800150e:	430a      	orrs	r2, r1
 8001510:	b251      	sxtb	r1, r2
 8001512:	2254      	movs	r2, #84	@ 0x54
 8001514:	fb03 f202 	mul.w	r2, r3, r2
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4413      	add	r3, r2
 800151c:	b2c9      	uxtb	r1, r1
 800151e:	4a13      	ldr	r2, [pc, #76]	@ (800156c <setPixel1+0xc0>)
 8001520:	54d1      	strb	r1, [r2, r3]
    else   // If white clear the bit.
      displayMap_5110[x + (y/8)*LCD_WIDTH] &= ~(1<<shift);
  }
}
 8001522:	e01d      	b.n	8001560 <setPixel1+0xb4>
      displayMap_5110[x + (y/8)*LCD_WIDTH] &= ~(1<<shift);
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	da00      	bge.n	800152c <setPixel1+0x80>
 800152a:	3307      	adds	r3, #7
 800152c:	10db      	asrs	r3, r3, #3
 800152e:	2254      	movs	r2, #84	@ 0x54
 8001530:	fb02 f103 	mul.w	r1, r2, r3
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	440a      	add	r2, r1
 8001538:	490c      	ldr	r1, [pc, #48]	@ (800156c <setPixel1+0xc0>)
 800153a:	5c8a      	ldrb	r2, [r1, r2]
 800153c:	b251      	sxtb	r1, r2
 800153e:	2001      	movs	r0, #1
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	fa00 f202 	lsl.w	r2, r0, r2
 8001546:	b252      	sxtb	r2, r2
 8001548:	43d2      	mvns	r2, r2
 800154a:	b252      	sxtb	r2, r2
 800154c:	400a      	ands	r2, r1
 800154e:	b251      	sxtb	r1, r2
 8001550:	2254      	movs	r2, #84	@ 0x54
 8001552:	fb03 f202 	mul.w	r2, r3, r2
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4413      	add	r3, r2
 800155a:	b2c9      	uxtb	r1, r1
 800155c:	4a03      	ldr	r2, [pc, #12]	@ (800156c <setPixel1+0xc0>)
 800155e:	54d1      	strb	r1, [r2, r3]
}
 8001560:	bf00      	nop
 8001562:	371c      	adds	r7, #28
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	20000000 	.word	0x20000000

08001570 <setChar>:

// This function will draw a char (defined in the ASCII table
// near the beginning of this sketch) at a defined x and y).
// The color can be either black (1) or white (0).
void setChar(char character, int x, int y, bool bw)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	461a      	mov	r2, r3
 800157c:	4603      	mov	r3, r0
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	4613      	mov	r3, r2
 8001582:	73bb      	strb	r3, [r7, #14]
  int column; // temp byte to store character's column bitmap
  for (int i=0; i<5; i++) // 5 columns (x) per character
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	e03f      	b.n	800160a <setChar+0x9a>
  {
    column = ASCII[character - 0x20][i];
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	f1a3 0220 	sub.w	r2, r3, #32
 8001590:	4922      	ldr	r1, [pc, #136]	@ (800161c <setChar+0xac>)
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	18ca      	adds	r2, r1, r3
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	4413      	add	r3, r2
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	617b      	str	r3, [r7, #20]
    for (int j=0; j<8; j++) // 8 rows (y) per character
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	e02a      	b.n	80015fe <setChar+0x8e>
    {
      if (column & (0x01 << j)) // test bits to set pixels
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	fa42 f303 	asr.w	r3, r2, r3
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00a      	beq.n	80015ce <setChar+0x5e>
        setPixel1(x+i, y+j, bw);
 80015b8:	68ba      	ldr	r2, [r7, #8]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	18d0      	adds	r0, r2, r3
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	4413      	add	r3, r2
 80015c4:	7bba      	ldrb	r2, [r7, #14]
 80015c6:	4619      	mov	r1, r3
 80015c8:	f7ff ff70 	bl	80014ac <setPixel1>
 80015cc:	e014      	b.n	80015f8 <setChar+0x88>
      else
        setPixel1(x+i, y+j, !bw);
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	18d0      	adds	r0, r2, r3
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	18d1      	adds	r1, r2, r3
 80015da:	7bbb      	ldrb	r3, [r7, #14]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	bf14      	ite	ne
 80015e0:	2301      	movne	r3, #1
 80015e2:	2300      	moveq	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	f083 0301 	eor.w	r3, r3, #1
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	f7ff ff5a 	bl	80014ac <setPixel1>
    for (int j=0; j<8; j++) // 8 rows (y) per character
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	3301      	adds	r3, #1
 80015fc:	61bb      	str	r3, [r7, #24]
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	2b07      	cmp	r3, #7
 8001602:	ddd1      	ble.n	80015a8 <setChar+0x38>
  for (int i=0; i<5; i++) // 5 columns (x) per character
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	3301      	adds	r3, #1
 8001608:	61fb      	str	r3, [r7, #28]
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	2b04      	cmp	r3, #4
 800160e:	ddbc      	ble.n	800158a <setChar+0x1a>
    }
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3720      	adds	r7, #32
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	0800c02c 	.word	0x0800c02c

08001620 <setStr>:
// setStr draws a string of characters, calling setChar with
// progressive coordinates until it's done.
// This function was grabbed from the SparkFun ColorLCDShield
// library.
void setStr(char * dString, int x, int y, bool bw)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	70fb      	strb	r3, [r7, #3]
  while (*dString != 0x00) // loop until null terminator
 800162e:	e032      	b.n	8001696 <setStr+0x76>
  {
    setChar(*dString++, x, y, bw);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	60fa      	str	r2, [r7, #12]
 8001636:	7818      	ldrb	r0, [r3, #0]
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	f7ff ff97 	bl	8001570 <setChar>
    x+=5;
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	3305      	adds	r3, #5
 8001646:	60bb      	str	r3, [r7, #8]
    for (int i=y; i<y+8; i++)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	e013      	b.n	8001676 <setStr+0x56>
    {
      setPixel1(x, i, !bw);
 800164e:	78fb      	ldrb	r3, [r7, #3]
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf14      	ite	ne
 8001654:	2301      	movne	r3, #1
 8001656:	2300      	moveq	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f083 0301 	eor.w	r3, r3, #1
 800165e:	b2db      	uxtb	r3, r3
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	b2db      	uxtb	r3, r3
 8001666:	461a      	mov	r2, r3
 8001668:	6979      	ldr	r1, [r7, #20]
 800166a:	68b8      	ldr	r0, [r7, #8]
 800166c:	f7ff ff1e 	bl	80014ac <setPixel1>
    for (int i=y; i<y+8; i++)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	3301      	adds	r3, #1
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3307      	adds	r3, #7
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	429a      	cmp	r2, r3
 800167e:	dde6      	ble.n	800164e <setStr+0x2e>
    }
    x++;
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	3301      	adds	r3, #1
 8001684:	60bb      	str	r3, [r7, #8]
    if (x > (LCD_WIDTH - 5)) // Enables wrap around
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	2b4f      	cmp	r3, #79	@ 0x4f
 800168a:	dd04      	ble.n	8001696 <setStr+0x76>
    {
      x = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
      y += 8;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3308      	adds	r3, #8
 8001694:	607b      	str	r3, [r7, #4]
  while (*dString != 0x00) // loop until null terminator
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1c8      	bne.n	8001630 <setStr+0x10>
    }
  }
}
 800169e:	bf00      	nop
 80016a0:	bf00      	nop
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <clearDisplay>:

// This function clears the entire display either white (0) or
// black (1).
// The screen won't actually clear until you call updateDisplay()!
void clearDisplay(bool bw)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
  for (int i=0; i<(LCD_WIDTH * LCD_HEIGHT / 8); i++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	e010      	b.n	80016da <clearDisplay+0x32>
  {
    if (bw)
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <clearDisplay+0x22>
      displayMap_5110[i] = 0xFF;
 80016be:	4a0c      	ldr	r2, [pc, #48]	@ (80016f0 <clearDisplay+0x48>)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4413      	add	r3, r2
 80016c4:	22ff      	movs	r2, #255	@ 0xff
 80016c6:	701a      	strb	r2, [r3, #0]
 80016c8:	e004      	b.n	80016d4 <clearDisplay+0x2c>
    else
      displayMap_5110[i] = 0;
 80016ca:	4a09      	ldr	r2, [pc, #36]	@ (80016f0 <clearDisplay+0x48>)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4413      	add	r3, r2
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<(LCD_WIDTH * LCD_HEIGHT / 8); i++)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	3301      	adds	r3, #1
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 80016e0:	dbea      	blt.n	80016b8 <clearDisplay+0x10>
  }
}
 80016e2:	bf00      	nop
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	20000000 	.word	0x20000000

080016f4 <gotoXY>:

// Helpful function to directly command the LCD to go to a
// specific x,y coordinate.
void gotoXY(int x, int y)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  LCDcommand(0x80 | x);  // Column.
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	b25b      	sxtb	r3, r3
 8001702:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001706:	b25b      	sxtb	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fe88 	bl	8001420 <LCDcommand>
  LCDcommand( 0x40 | y);  // Row.  ?
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	b25b      	sxtb	r3, r3
 8001714:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001718:	b25b      	sxtb	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fe7f 	bl	8001420 <LCDcommand>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <updateDisplay>:

// This will actually draw on the display, whatever is currently
// in the displayMap array.
void updateDisplay(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
  gotoXY(0, 0);
 8001732:	2100      	movs	r1, #0
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff ffdd 	bl	80016f4 <gotoXY>
  for (int i=0; i < (LCD_WIDTH * LCD_HEIGHT / 8); i++)
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	e009      	b.n	8001754 <updateDisplay+0x28>
  {
    LCDdata( displayMap_5110[i]);
 8001740:	4a09      	ldr	r2, [pc, #36]	@ (8001768 <updateDisplay+0x3c>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fe83 	bl	8001454 <LCDdata>
  for (int i=0; i < (LCD_WIDTH * LCD_HEIGHT / 8); i++)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3301      	adds	r3, #1
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 800175a:	dbf1      	blt.n	8001740 <updateDisplay+0x14>
  }
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000000 	.word	0x20000000

0800176c <setContrast>:

// Set contrast can set the LCD Vop to a value between 0 and 127.
// 40-60 is usually a pretty good range.
void setContrast(int contrast)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  LCDcommand(0x21); //Tell LCD that extended commands follow
 8001774:	2021      	movs	r0, #33	@ 0x21
 8001776:	f7ff fe53 	bl	8001420 <LCDcommand>
  LCDcommand( 0x80 | contrast); //Set LCD Vop (Contrast): Try 0xB1(good @ 3.3V) or 0xBF if your display is too dark
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	b25b      	sxtb	r3, r3
 800177e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001782:	b25b      	sxtb	r3, r3
 8001784:	b2db      	uxtb	r3, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fe4a 	bl	8001420 <LCDcommand>
  LCDcommand(0x20); //Set display mode
 800178c:	2020      	movs	r0, #32
 800178e:	f7ff fe47 	bl	8001420 <LCDcommand>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <lcdBegin>:
    displayMap_5110[i] = ~displayMap_5110[i] & 0xFF;
  }
  updateDisplay();
}

void lcdBegin(void) {
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
    RST0;
 80017a0:	4b19      	ldr	r3, [pc, #100]	@ (8001808 <lcdBegin+0x6c>)
 80017a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017a6:	619a      	str	r2, [r3, #24]
    HAL_Delay(100);
 80017a8:	2064      	movs	r0, #100	@ 0x64
 80017aa:	f003 fb53 	bl	8004e54 <HAL_Delay>
    RST1;
 80017ae:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <lcdBegin+0x6c>)
 80017b0:	2202      	movs	r2, #2
 80017b2:	619a      	str	r2, [r3, #24]
    CS0;
 80017b4:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <lcdBegin+0x6c>)
 80017b6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80017ba:	619a      	str	r2, [r3, #24]
    LCDcommand(0x21); // Tell LCD extended commands follow
 80017bc:	2021      	movs	r0, #33	@ 0x21
 80017be:	f7ff fe2f 	bl	8001420 <LCDcommand>
    HAL_Delay(100);
 80017c2:	2064      	movs	r0, #100	@ 0x64
 80017c4:	f003 fb46 	bl	8004e54 <HAL_Delay>
    LCDcommand(0xB0); // Set LCD Vop (Contrast)
 80017c8:	20b0      	movs	r0, #176	@ 0xb0
 80017ca:	f7ff fe29 	bl	8001420 <LCDcommand>
    delay(10);
 80017ce:	200a      	movs	r0, #10
 80017d0:	f000 f81c 	bl	800180c <delay>
    LCDcommand(0x04); // Set Temp coefficient
 80017d4:	2004      	movs	r0, #4
 80017d6:	f7ff fe23 	bl	8001420 <LCDcommand>
    delay(10);
 80017da:	200a      	movs	r0, #10
 80017dc:	f000 f816 	bl	800180c <delay>
    LCDcommand(0x14); // LCD bias mode 1:48 (try 0x13)
 80017e0:	2014      	movs	r0, #20
 80017e2:	f7ff fe1d 	bl	8001420 <LCDcommand>
    delay(10);
 80017e6:	200a      	movs	r0, #10
 80017e8:	f000 f810 	bl	800180c <delay>
    // We must send 0x20 before modifying the display control mode
    LCDcommand(0x20);
 80017ec:	2020      	movs	r0, #32
 80017ee:	f7ff fe17 	bl	8001420 <LCDcommand>
    delay(10);
 80017f2:	200a      	movs	r0, #10
 80017f4:	f000 f80a 	bl	800180c <delay>
    LCDcommand(0x0C); // Set display control, normal mode.
 80017f8:	200c      	movs	r0, #12
 80017fa:	f7ff fe11 	bl	8001420 <LCDcommand>
    delay(10);
 80017fe:	200a      	movs	r0, #10
 8001800:	f000 f804 	bl	800180c <delay>
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40020000 	.word	0x40020000

0800180c <delay>:


void delay(int ms) {
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = 16000 - 1; // assuming 16 MHz clock
 8001814:	4b11      	ldr	r3, [pc, #68]	@ (800185c <delay+0x50>)
 8001816:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800181a:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 800181c:	4b0f      	ldr	r3, [pc, #60]	@ (800185c <delay+0x50>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 0x5;
 8001822:	4b0e      	ldr	r3, [pc, #56]	@ (800185c <delay+0x50>)
 8001824:	2205      	movs	r2, #5
 8001826:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ms; i++) {
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	e009      	b.n	8001842 <delay+0x36>
        while (!(SysTick->CTRL & 0x10000)) {}
 800182e:	bf00      	nop
 8001830:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <delay+0x50>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f9      	beq.n	8001830 <delay+0x24>
    for (int i = 0; i < ms; i++) {
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	3301      	adds	r3, #1
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	429a      	cmp	r2, r3
 8001848:	dbf1      	blt.n	800182e <delay+0x22>
    }
    SysTick->CTRL = 0;
 800184a:	4b04      	ldr	r3, [pc, #16]	@ (800185c <delay+0x50>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000e010 	.word	0xe000e010

08001860 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	@ 0x28
 8001864:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	4b2d      	ldr	r3, [pc, #180]	@ (8001930 <MX_GPIO_Init+0xd0>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	4a2c      	ldr	r2, [pc, #176]	@ (8001930 <MX_GPIO_Init+0xd0>)
 8001880:	f043 0304 	orr.w	r3, r3, #4
 8001884:	6313      	str	r3, [r2, #48]	@ 0x30
 8001886:	4b2a      	ldr	r3, [pc, #168]	@ (8001930 <MX_GPIO_Init+0xd0>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b26      	ldr	r3, [pc, #152]	@ (8001930 <MX_GPIO_Init+0xd0>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	4a25      	ldr	r2, [pc, #148]	@ (8001930 <MX_GPIO_Init+0xd0>)
 800189c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a2:	4b23      	ldr	r3, [pc, #140]	@ (8001930 <MX_GPIO_Init+0xd0>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001930 <MX_GPIO_Init+0xd0>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001930 <MX_GPIO_Init+0xd0>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018be:	4b1c      	ldr	r3, [pc, #112]	@ (8001930 <MX_GPIO_Init+0xd0>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <MX_GPIO_Init+0xd0>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	4a17      	ldr	r2, [pc, #92]	@ (8001930 <MX_GPIO_Init+0xd0>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018da:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <MX_GPIO_Init+0xd0>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_LCD_DISPLAY_Pin|RST_LCD_DISPLAY_Pin|SCE_LCD_DISPLAY_Pin|LD2_Pin, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2133      	movs	r1, #51	@ 0x33
 80018ea:	4812      	ldr	r0, [pc, #72]	@ (8001934 <MX_GPIO_Init+0xd4>)
 80018ec:	f003 fdfe 	bl	80054ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018f6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	480c      	ldr	r0, [pc, #48]	@ (8001938 <MX_GPIO_Init+0xd8>)
 8001908:	f003 fc6c 	bl	80051e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DC_LCD_DISPLAY_Pin|RST_LCD_DISPLAY_Pin|SCE_LCD_DISPLAY_Pin|LD2_Pin;
 800190c:	2333      	movs	r3, #51	@ 0x33
 800190e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001910:	2301      	movs	r3, #1
 8001912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4619      	mov	r1, r3
 8001922:	4804      	ldr	r0, [pc, #16]	@ (8001934 <MX_GPIO_Init+0xd4>)
 8001924:	f003 fc5e 	bl	80051e4 <HAL_GPIO_Init>

}
 8001928:	bf00      	nop
 800192a:	3728      	adds	r7, #40	@ 0x28
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	40020000 	.word	0x40020000
 8001938:	40020800 	.word	0x40020800

0800193c <Serial_Print>:
/* USER CODE BEGIN 0 */



// Funzione per inviare una stringa sulla seriale
void Serial_Print(UART_HandleTypeDef *huart, const char *message) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8001946:	6838      	ldr	r0, [r7, #0]
 8001948:	f7fe fc9a 	bl	8000280 <strlen>
 800194c:	4603      	mov	r3, r0
 800194e:	b29a      	uxth	r2, r3
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
 8001954:	6839      	ldr	r1, [r7, #0]
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f004 fd74 	bl	8006444 <HAL_UART_Transmit>
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <Serial_ReadChar>:


// Funzione per leggere un singolo carattere dalla UART
uint8_t Serial_ReadChar(UART_HandleTypeDef *huart) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
    uint8_t ch;
    HAL_UART_Receive(huart, &ch, 1, HAL_MAX_DELAY);
 800196c:	f107 010f 	add.w	r1, r7, #15
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
 8001974:	2201      	movs	r2, #1
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f004 fdef 	bl	800655a <HAL_UART_Receive>
    return ch;
 800197c:	7bfb      	ldrb	r3, [r7, #15]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <isFull>:


bool isFull(int8_t board[9]) {
 8001986:	b480      	push	{r7}
 8001988:	b085      	sub	sp, #20
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 9; i++) {
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	e013      	b.n	80019bc <isFull+0x36>
        if (board[i] != O && board[i] != X) {
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	f993 3000 	ldrsb.w	r3, [r3]
 800199e:	f113 0f40 	cmn.w	r3, #64	@ 0x40
 80019a2:	d008      	beq.n	80019b6 <isFull+0x30>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	f993 3000 	ldrsb.w	r3, [r3]
 80019ae:	2b40      	cmp	r3, #64	@ 0x40
 80019b0:	d001      	beq.n	80019b6 <isFull+0x30>
            return false;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e006      	b.n	80019c4 <isFull+0x3e>
    for (int i = 0; i < 9; i++) {
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3301      	adds	r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2b08      	cmp	r3, #8
 80019c0:	dde8      	ble.n	8001994 <isFull+0xe>
        }
    }
    return true;
 80019c2:	2301      	movs	r3, #1
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <print_tictactoe_board>:



// Funzione per stampare la board del Tic Tac Toe sulla seriale
void print_tictactoe_board(int8_t *board) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]


	uint8_t i, j;


    for (i = 0; i < 3; i++) {
 80019d8:	2300      	movs	r3, #0
 80019da:	73fb      	strb	r3, [r7, #15]
 80019dc:	e03a      	b.n	8001a54 <print_tictactoe_board+0x84>


        for (j = 0; j < 3; j++) {
 80019de:	2300      	movs	r3, #0
 80019e0:	73bb      	strb	r3, [r7, #14]
 80019e2:	e031      	b.n	8001a48 <print_tictactoe_board+0x78>
            if (board[i * 3 + j] == O) {
 80019e4:	7bfa      	ldrb	r2, [r7, #15]
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	441a      	add	r2, r3
 80019ec:	7bbb      	ldrb	r3, [r7, #14]
 80019ee:	4413      	add	r3, r2
 80019f0:	461a      	mov	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	f993 3000 	ldrsb.w	r3, [r3]
 80019fa:	f113 0f40 	cmn.w	r3, #64	@ 0x40
 80019fe:	d106      	bne.n	8001a0e <print_tictactoe_board+0x3e>

            	draw_symbol_in_cell(i, j, 'O');
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	7bb9      	ldrb	r1, [r7, #14]
 8001a04:	224f      	movs	r2, #79	@ 0x4f
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fc6c 	bl	80012e4 <draw_symbol_in_cell>
 8001a0c:	e019      	b.n	8001a42 <print_tictactoe_board+0x72>

            } else if (board[i * 3 + j] == X) {
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	4613      	mov	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	441a      	add	r2, r3
 8001a16:	7bbb      	ldrb	r3, [r7, #14]
 8001a18:	4413      	add	r3, r2
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4413      	add	r3, r2
 8001a20:	f993 3000 	ldrsb.w	r3, [r3]
 8001a24:	2b40      	cmp	r3, #64	@ 0x40
 8001a26:	d106      	bne.n	8001a36 <print_tictactoe_board+0x66>

            	draw_symbol_in_cell(i,j,'X');
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	7bb9      	ldrb	r1, [r7, #14]
 8001a2c:	2258      	movs	r2, #88	@ 0x58
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fc58 	bl	80012e4 <draw_symbol_in_cell>
 8001a34:	e005      	b.n	8001a42 <print_tictactoe_board+0x72>

            } else {

                draw_symbol_in_cell(i,j,' ');
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	7bb9      	ldrb	r1, [r7, #14]
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fc51 	bl	80012e4 <draw_symbol_in_cell>
        for (j = 0; j < 3; j++) {
 8001a42:	7bbb      	ldrb	r3, [r7, #14]
 8001a44:	3301      	adds	r3, #1
 8001a46:	73bb      	strb	r3, [r7, #14]
 8001a48:	7bbb      	ldrb	r3, [r7, #14]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d9ca      	bls.n	80019e4 <print_tictactoe_board+0x14>
    for (i = 0; i < 3; i++) {
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	3301      	adds	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d9c1      	bls.n	80019de <print_tictactoe_board+0xe>
            }
        }

    }
}
 8001a5a:	bf00      	nop
 8001a5c:	bf00      	nop
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <winner>:


// Funzione per determinare il vincitore del Tic Tac Toe
int8_t winner(int8_t *board) {
 8001a64:	b480      	push	{r7}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
    int i, j;
    int x_count = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
    int o_count = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60bb      	str	r3, [r7, #8]

    // Controlla le righe
    for (i = 0; i < 3; i++) {
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	e03c      	b.n	8001af4 <winner+0x90>
        for (j = 0; j < 3; j++) {
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	e024      	b.n	8001aca <winner+0x66>
            if (board[3 * i + j] == X) {
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	4613      	mov	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	441a      	add	r2, r3
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	f993 3000 	ldrsb.w	r3, [r3]
 8001a96:	2b40      	cmp	r3, #64	@ 0x40
 8001a98:	d103      	bne.n	8001aa2 <winner+0x3e>
                x_count++;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	e010      	b.n	8001ac4 <winner+0x60>
            } else if (board[3 * i + j] == O) {
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	441a      	add	r2, r3
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4413      	add	r3, r2
 8001aae:	461a      	mov	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f993 3000 	ldrsb.w	r3, [r3]
 8001ab8:	f113 0f40 	cmn.w	r3, #64	@ 0x40
 8001abc:	d102      	bne.n	8001ac4 <winner+0x60>
                o_count++;
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
        for (j = 0; j < 3; j++) {
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	ddd7      	ble.n	8001a80 <winner+0x1c>
            }
        }
        if (x_count == 3) return X;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d101      	bne.n	8001ada <winner+0x76>
 8001ad6:	2340      	movs	r3, #64	@ 0x40
 8001ad8:	e0bd      	b.n	8001c56 <winner+0x1f2>
        else if (o_count == 3) return O;
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d102      	bne.n	8001ae6 <winner+0x82>
 8001ae0:	f06f 033f 	mvn.w	r3, #63	@ 0x3f
 8001ae4:	e0b7      	b.n	8001c56 <winner+0x1f2>
        else x_count = o_count = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 3; i++) {
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3301      	adds	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	ddbf      	ble.n	8001a7a <winner+0x16>
    }

    // Controlla le colonne
    for (i = 0; i < 3; i++) {
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	e03c      	b.n	8001b7a <winner+0x116>
        for (j = 0; j < 3; j++) {
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	e024      	b.n	8001b50 <winner+0xec>
            if (board[3 * j + i] == X) {
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	441a      	add	r2, r3
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	4413      	add	r3, r2
 8001b12:	461a      	mov	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4413      	add	r3, r2
 8001b18:	f993 3000 	ldrsb.w	r3, [r3]
 8001b1c:	2b40      	cmp	r3, #64	@ 0x40
 8001b1e:	d103      	bne.n	8001b28 <winner+0xc4>
                x_count++;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	3301      	adds	r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	e010      	b.n	8001b4a <winner+0xe6>
            } else if (board[3 * j + i] == O) {
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	441a      	add	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	4413      	add	r3, r2
 8001b34:	461a      	mov	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b3e:	f113 0f40 	cmn.w	r3, #64	@ 0x40
 8001b42:	d102      	bne.n	8001b4a <winner+0xe6>
                o_count++;
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	3301      	adds	r3, #1
 8001b48:	60bb      	str	r3, [r7, #8]
        for (j = 0; j < 3; j++) {
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	ddd7      	ble.n	8001b06 <winner+0xa2>
            }
        }
        if (x_count == 3) return X;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d101      	bne.n	8001b60 <winner+0xfc>
 8001b5c:	2340      	movs	r3, #64	@ 0x40
 8001b5e:	e07a      	b.n	8001c56 <winner+0x1f2>
        else if (o_count == 3) return O;
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d102      	bne.n	8001b6c <winner+0x108>
 8001b66:	f06f 033f 	mvn.w	r3, #63	@ 0x3f
 8001b6a:	e074      	b.n	8001c56 <winner+0x1f2>
        else x_count = o_count = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 3; i++) {
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3301      	adds	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	ddbf      	ble.n	8001b00 <winner+0x9c>
    }

    // Controlla le diagonali
    for (i = 0; i < 3; i++) {
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	e01c      	b.n	8001bc0 <winner+0x15c>
        if (board[3 * i + i] == X) {
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4413      	add	r3, r2
 8001b90:	f993 3000 	ldrsb.w	r3, [r3]
 8001b94:	2b40      	cmp	r3, #64	@ 0x40
 8001b96:	d103      	bne.n	8001ba0 <winner+0x13c>
            x_count++;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	e00c      	b.n	8001bba <winner+0x156>
        } else if (board[3 * i + i] == O) {
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	f993 3000 	ldrsb.w	r3, [r3]
 8001bae:	f113 0f40 	cmn.w	r3, #64	@ 0x40
 8001bb2:	d102      	bne.n	8001bba <winner+0x156>
            o_count++;
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < 3; i++) {
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	dddf      	ble.n	8001b86 <winner+0x122>
        }
    }
    if (x_count == 3) return X;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d101      	bne.n	8001bd0 <winner+0x16c>
 8001bcc:	2340      	movs	r3, #64	@ 0x40
 8001bce:	e042      	b.n	8001c56 <winner+0x1f2>
    else if (o_count == 3) return O;
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d102      	bne.n	8001bdc <winner+0x178>
 8001bd6:	f06f 033f 	mvn.w	r3, #63	@ 0x3f
 8001bda:	e03c      	b.n	8001c56 <winner+0x1f2>
    else x_count = o_count = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < 3; i++) {
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	e026      	b.n	8001c38 <winner+0x1d4>
        if (board[3 * i + 2 - i] == X) {
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	1c9a      	adds	r2, r3, #2
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f993 3000 	ldrsb.w	r3, [r3]
 8001c02:	2b40      	cmp	r3, #64	@ 0x40
 8001c04:	d103      	bne.n	8001c0e <winner+0x1aa>
            x_count++;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	e011      	b.n	8001c32 <winner+0x1ce>
        } else if (board[3 * i + 2 - i] == O) {
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4613      	mov	r3, r2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	4413      	add	r3, r2
 8001c16:	1c9a      	adds	r2, r3, #2
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	f993 3000 	ldrsb.w	r3, [r3]
 8001c26:	f113 0f40 	cmn.w	r3, #64	@ 0x40
 8001c2a:	d102      	bne.n	8001c32 <winner+0x1ce>
            o_count++;
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < 3; i++) {
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	3301      	adds	r3, #1
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	ddd5      	ble.n	8001bea <winner+0x186>
        }
    }
    if (x_count == 3) return X;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	d101      	bne.n	8001c48 <winner+0x1e4>
 8001c44:	2340      	movs	r3, #64	@ 0x40
 8001c46:	e006      	b.n	8001c56 <winner+0x1f2>
    else if (o_count == 3) return O;
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d102      	bne.n	8001c54 <winner+0x1f0>
 8001c4e:	f06f 033f 	mvn.w	r3, #63	@ 0x3f
 8001c52:	e000      	b.n	8001c56 <winner+0x1f2>

    return 0;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	371c      	adds	r7, #28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <tictactoe_game>:



void tictactoe_game(UART_HandleTypeDef *huart) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b0a4      	sub	sp, #144	@ 0x90
 8001c68:	af02      	add	r7, sp, #8
 8001c6a:	6078      	str	r0, [r7, #4]
    char user_input[2];
    uint8_t i;
    char buffer[100];

    // Reset the board
    for (i = 0; i < 9; i++) {
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001c72:	e009      	b.n	8001c88 <tictactoe_game+0x24>
        board[i] = 0;
 8001c74:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001c78:	4ab4      	ldr	r2, [pc, #720]	@ (8001f4c <tictactoe_game+0x2e8>)
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 9; i++) {
 8001c7e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001c82:	3301      	adds	r3, #1
 8001c84:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001c88:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d9f1      	bls.n	8001c74 <tictactoe_game+0x10>
    }

    // TicTacToe agent
    Serial_Print(huart,"############ New Game ############\n");
 8001c90:	49af      	ldr	r1, [pc, #700]	@ (8001f50 <tictactoe_game+0x2ec>)
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff fe52 	bl	800193c <Serial_Print>

    print_tictactoe_board(board);
 8001c98:	48ac      	ldr	r0, [pc, #688]	@ (8001f4c <tictactoe_game+0x2e8>)
 8001c9a:	f7ff fe99 	bl	80019d0 <print_tictactoe_board>

    updateDisplay();
 8001c9e:	f7ff fd45 	bl	800172c <updateDisplay>

    delay(1000);
 8001ca2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ca6:	f7ff fdb1 	bl	800180c <delay>
    for (i = 0; i < 5; i++) {
 8001caa:	2300      	movs	r3, #0
 8001cac:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001cb0:	e141      	b.n	8001f36 <tictactoe_game+0x2d2>
        user_input[0] = user_input[1] = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8001cb8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001cbc:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c

        // Loop for reading valid input
        while (1) {
        	Serial_Print(huart,"Your turn: Please enter the coordinates (e.g. a3)\n");
 8001cc0:	49a4      	ldr	r1, [pc, #656]	@ (8001f54 <tictactoe_game+0x2f0>)
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff fe3a 	bl	800193c <Serial_Print>
            Serial_Print(huart, "you want to place an O and press >enter<\n");
 8001cc8:	49a3      	ldr	r1, [pc, #652]	@ (8001f58 <tictactoe_game+0x2f4>)
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fe36 	bl	800193c <Serial_Print>

            // Leggi il primo carattere
            user_input[0] = Serial_ReadChar(huart); // Supponiamo di avere ancora bisogno di leggere dalla UART per l'input
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff fe47 	bl	8001964 <Serial_ReadChar>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
            delay(10);  // Aggiungi un piccolo ritardo per evitare problemi di sincronizzazione
 8001cdc:	200a      	movs	r0, #10
 8001cde:	f7ff fd95 	bl	800180c <delay>
            Serial_Print(huart, "Ho letto il primo carattere!");
 8001ce2:	499e      	ldr	r1, [pc, #632]	@ (8001f5c <tictactoe_game+0x2f8>)
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff fe29 	bl	800193c <Serial_Print>
            // Leggi il secondo carattere
            user_input[1] = Serial_ReadChar(huart);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fe3a 	bl	8001964 <Serial_ReadChar>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
            delay(10);  // Aggiungi un piccolo ritardo per evitare problemi di sincronizzazione
 8001cf6:	200a      	movs	r0, #10
 8001cf8:	f7ff fd88 	bl	800180c <delay>
            Serial_Print(huart, "Ho letto il secondo carattere!");
 8001cfc:	4998      	ldr	r1, [pc, #608]	@ (8001f60 <tictactoe_game+0x2fc>)
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff fe1c 	bl	800193c <Serial_Print>
            // Calcola l'azione
            action = (user_input[0] - 97) + (user_input[1] - 48 - 1) * 3;
 8001d04:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 8001d08:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001d0c:	3b31      	subs	r3, #49	@ 0x31
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	4619      	mov	r1, r3
 8001d12:	0049      	lsls	r1, r1, #1
 8001d14:	440b      	add	r3, r1
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	3b61      	subs	r3, #97	@ 0x61
 8001d1e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

            // Verifica se l'input è valido
            if ((user_input[0] < 97 || user_input[0] > 99 || user_input[1] < 49 || user_input[1] > 51)) {
 8001d22:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001d26:	2b60      	cmp	r3, #96	@ 0x60
 8001d28:	d90b      	bls.n	8001d42 <tictactoe_game+0xde>
 8001d2a:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001d2e:	2b63      	cmp	r3, #99	@ 0x63
 8001d30:	d807      	bhi.n	8001d42 <tictactoe_game+0xde>
 8001d32:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001d36:	2b30      	cmp	r3, #48	@ 0x30
 8001d38:	d903      	bls.n	8001d42 <tictactoe_game+0xde>
 8001d3a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001d3e:	2b33      	cmp	r3, #51	@ 0x33
 8001d40:	d90f      	bls.n	8001d62 <tictactoe_game+0xfe>
                Serial_Print(huart,"Wrong input. The coordinates have to be\n");
 8001d42:	4988      	ldr	r1, [pc, #544]	@ (8001f64 <tictactoe_game+0x300>)
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff fdf9 	bl	800193c <Serial_Print>
                Serial_Print(huart,"one of {a1, a2, a3, b1, b2, b3, c1, c2, c3}.\n");
 8001d4a:	4987      	ldr	r1, [pc, #540]	@ (8001f68 <tictactoe_game+0x304>)
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff fdf5 	bl	800193c <Serial_Print>
                user_input[0] = user_input[1] = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8001d58:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001d5c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
                continue;
 8001d60:	e011      	b.n	8001d86 <tictactoe_game+0x122>
            } else if (board[action] != 0) {
 8001d62:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001d66:	4a79      	ldr	r2, [pc, #484]	@ (8001f4c <tictactoe_game+0x2e8>)
 8001d68:	56d3      	ldrsb	r3, [r2, r3]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00c      	beq.n	8001d88 <tictactoe_game+0x124>
                Serial_Print(huart,"Wrong input. The field is already occupied.\n");
 8001d6e:	497f      	ldr	r1, [pc, #508]	@ (8001f6c <tictactoe_game+0x308>)
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff fde3 	bl	800193c <Serial_Print>
                user_input[0] = user_input[1] = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8001d7c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001d80:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
                continue;
 8001d84:	bf00      	nop
        	Serial_Print(huart,"Your turn: Please enter the coordinates (e.g. a3)\n");
 8001d86:	e79b      	b.n	8001cc0 <tictactoe_game+0x5c>
            }

            break;  // Esce dal ciclo solo se l'input è valido
 8001d88:	bf00      	nop
        }

        // Update the board with user's action
        board[action] = O;
 8001d8a:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001d8e:	4a6f      	ldr	r2, [pc, #444]	@ (8001f4c <tictactoe_game+0x2e8>)
 8001d90:	21c0      	movs	r1, #192	@ 0xc0
 8001d92:	54d1      	strb	r1, [r2, r3]

        snprintf(buffer, 100, "Scelta fatta dall'Utente: %c, %c\n", user_input[0], user_input[1]);
 8001d94:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001d98:	461a      	mov	r2, r3
 8001d9a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001d9e:	f107 0008 	add.w	r0, r7, #8
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	4613      	mov	r3, r2
 8001da6:	4a72      	ldr	r2, [pc, #456]	@ (8001f70 <tictactoe_game+0x30c>)
 8001da8:	2164      	movs	r1, #100	@ 0x64
 8001daa:	f006 fb89 	bl	80084c0 <sniprintf>
        Serial_Print(huart,buffer);
 8001dae:	f107 0308 	add.w	r3, r7, #8
 8001db2:	4619      	mov	r1, r3
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff fdc1 	bl	800193c <Serial_Print>

        print_tictactoe_board(board);
 8001dba:	4864      	ldr	r0, [pc, #400]	@ (8001f4c <tictactoe_game+0x2e8>)
 8001dbc:	f7ff fe08 	bl	80019d0 <print_tictactoe_board>

        updateDisplay();
 8001dc0:	f7ff fcb4 	bl	800172c <updateDisplay>

        delay(1000);
 8001dc4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dc8:	f7ff fd20 	bl	800180c <delay>

        if (winner(board) == O) {
 8001dcc:	485f      	ldr	r0, [pc, #380]	@ (8001f4c <tictactoe_game+0x2e8>)
 8001dce:	f7ff fe49 	bl	8001a64 <winner>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f113 0f40 	cmn.w	r3, #64	@ 0x40
 8001dd8:	d108      	bne.n	8001dec <tictactoe_game+0x188>
            Serial_Print(huart,"******* Congratulations: You won the game! *******\n");
 8001dda:	4966      	ldr	r1, [pc, #408]	@ (8001f74 <tictactoe_game+0x310>)
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff fdad 	bl	800193c <Serial_Print>
            Serial_Print(huart, "This should be impossible in theory.\n");
 8001de2:	4965      	ldr	r1, [pc, #404]	@ (8001f78 <tictactoe_game+0x314>)
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fda9 	bl	800193c <Serial_Print>
            break;
 8001dea:	e0aa      	b.n	8001f42 <tictactoe_game+0x2de>
        }

        // Memorizzo il tempo di esecuzione del codice
        double time_spent = 0.0;
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
        clock_t begin = clock();
 8001df8:	f006 fc96 	bl	8008728 <clock>
 8001dfc:	6778      	str	r0, [r7, #116]	@ 0x74

        action = run_ai_agent(board);
 8001dfe:	4853      	ldr	r0, [pc, #332]	@ (8001f4c <tictactoe_game+0x2e8>)
 8001e00:	f000 fa04 	bl	800220c <run_ai_agent>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

        clock_t end = clock();
 8001e0a:	f006 fc8d 	bl	8008728 <clock>
 8001e0e:	6738      	str	r0, [r7, #112]	@ 0x70

        // Calcola il tempo trascorso
        time_spent += (double)(end - begin) / CLOCKS_PER_SEC;
 8001e10:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001e12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fb7c 	bl	8000514 <__aeabi_ui2d>
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	4b56      	ldr	r3, [pc, #344]	@ (8001f7c <tictactoe_game+0x318>)
 8001e22:	f7fe fd1b 	bl	800085c <__aeabi_ddiv>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001e2e:	f7fe fa35 	bl	800029c <__adddf3>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78

        // Update the board with AI's action
        board[action] = X;
 8001e3a:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001e3e:	4a43      	ldr	r2, [pc, #268]	@ (8001f4c <tictactoe_game+0x2e8>)
 8001e40:	2140      	movs	r1, #64	@ 0x40
 8001e42:	54d1      	strb	r1, [r2, r3]

        snprintf(buffer, 100, "The AI took %f seconds to think about the turn.\n", time_spent);
 8001e44:	f107 0008 	add.w	r0, r7, #8
 8001e48:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001e4c:	e9cd 2300 	strd	r2, r3, [sp]
 8001e50:	4a4b      	ldr	r2, [pc, #300]	@ (8001f80 <tictactoe_game+0x31c>)
 8001e52:	2164      	movs	r1, #100	@ 0x64
 8001e54:	f006 fb34 	bl	80084c0 <sniprintf>
        Serial_Print(huart,buffer);
 8001e58:	f107 0308 	add.w	r3, r7, #8
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff fd6c 	bl	800193c <Serial_Print>
        snprintf(buffer, 100, "AIs turn was %c%d\n", (char)(action % 3 + 97), (int)(action / 3 + 1));
 8001e64:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 8001e68:	4b46      	ldr	r3, [pc, #280]	@ (8001f84 <tictactoe_game+0x320>)
 8001e6a:	fba3 1302 	umull	r1, r3, r3, r2
 8001e6e:	0859      	lsrs	r1, r3, #1
 8001e70:	460b      	mov	r3, r1
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	440b      	add	r3, r1
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	3361      	adds	r3, #97	@ 0x61
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8001e84:	4a3f      	ldr	r2, [pc, #252]	@ (8001f84 <tictactoe_game+0x320>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	085b      	lsrs	r3, r3, #1
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f107 0008 	add.w	r0, r7, #8
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	460b      	mov	r3, r1
 8001e98:	4a3b      	ldr	r2, [pc, #236]	@ (8001f88 <tictactoe_game+0x324>)
 8001e9a:	2164      	movs	r1, #100	@ 0x64
 8001e9c:	f006 fb10 	bl	80084c0 <sniprintf>
        Serial_Print(huart, buffer);
 8001ea0:	f107 0308 	add.w	r3, r7, #8
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff fd48 	bl	800193c <Serial_Print>

        print_tictactoe_board(board);
 8001eac:	4827      	ldr	r0, [pc, #156]	@ (8001f4c <tictactoe_game+0x2e8>)
 8001eae:	f7ff fd8f 	bl	80019d0 <print_tictactoe_board>

        updateDisplay();
 8001eb2:	f7ff fc3b 	bl	800172c <updateDisplay>

        if (winner(board) == X) {
 8001eb6:	4825      	ldr	r0, [pc, #148]	@ (8001f4c <tictactoe_game+0x2e8>)
 8001eb8:	f7ff fdd4 	bl	8001a64 <winner>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b40      	cmp	r3, #64	@ 0x40
 8001ec0:	d11b      	bne.n	8001efa <tictactoe_game+0x296>

            Serial_Print(huart,"******* You lost the game! *******\n");
 8001ec2:	4932      	ldr	r1, [pc, #200]	@ (8001f8c <tictactoe_game+0x328>)
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff fd39 	bl	800193c <Serial_Print>

            delay(2000);
 8001eca:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001ece:	f7ff fc9d 	bl	800180c <delay>

            clearDisplay(false);
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f7ff fbe8 	bl	80016a8 <clearDisplay>

            LCD_Print("You Lost the Game!", 0, 7);
 8001ed8:	2207      	movs	r2, #7
 8001eda:	2100      	movs	r1, #0
 8001edc:	482c      	ldr	r0, [pc, #176]	@ (8001f90 <tictactoe_game+0x32c>)
 8001ede:	f7ff fad3 	bl	8001488 <LCD_Print>

            clearDisplay(false);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7ff fbe0 	bl	80016a8 <clearDisplay>

            delay(20000);
 8001ee8:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8001eec:	f7ff fc8e 	bl	800180c <delay>


            draw_tictactoe_grid();
 8001ef0:	f7ff f98e 	bl	8001210 <draw_tictactoe_grid>

            updateDisplay();
 8001ef4:	f7ff fc1a 	bl	800172c <updateDisplay>

            break;
 8001ef8:	e023      	b.n	8001f42 <tictactoe_game+0x2de>
        }
        /**
         * Se la griglia è piena allora il gioco è fermo
         * Reset Game !
         */
        if(isFull(board)){
 8001efa:	4814      	ldr	r0, [pc, #80]	@ (8001f4c <tictactoe_game+0x2e8>)
 8001efc:	f7ff fd43 	bl	8001986 <isFull>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d012      	beq.n	8001f2c <tictactoe_game+0x2c8>
            Serial_Print(huart, "\n La griglia è piena! Riavvio il gioco.\n");
 8001f06:	4923      	ldr	r1, [pc, #140]	@ (8001f94 <tictactoe_game+0x330>)
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff fd17 	bl	800193c <Serial_Print>

            clearDisplay(false);
 8001f0e:	2000      	movs	r0, #0
 8001f10:	f7ff fbca 	bl	80016a8 <clearDisplay>

            delay(2000);
 8001f14:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001f18:	f7ff fc78 	bl	800180c <delay>

            draw_tictactoe_grid();
 8001f1c:	f7ff f978 	bl	8001210 <draw_tictactoe_grid>

            delay(2000);
 8001f20:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001f24:	f7ff fc72 	bl	800180c <delay>

            updateDisplay();
 8001f28:	f7ff fc00 	bl	800172c <updateDisplay>
    for (i = 0; i < 5; i++) {
 8001f2c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001f30:	3301      	adds	r3, #1
 8001f32:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001f36:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	f67f aeb9 	bls.w	8001cb2 <tictactoe_game+0x4e>
        }
    }
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	3788      	adds	r7, #136	@ 0x88
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000760 	.word	0x20000760
 8001f50:	0800bc80 	.word	0x0800bc80
 8001f54:	0800bca4 	.word	0x0800bca4
 8001f58:	0800bcd8 	.word	0x0800bcd8
 8001f5c:	0800bd04 	.word	0x0800bd04
 8001f60:	0800bd24 	.word	0x0800bd24
 8001f64:	0800bd44 	.word	0x0800bd44
 8001f68:	0800bd70 	.word	0x0800bd70
 8001f6c:	0800bda0 	.word	0x0800bda0
 8001f70:	0800bdd0 	.word	0x0800bdd0
 8001f74:	0800bdf4 	.word	0x0800bdf4
 8001f78:	0800be28 	.word	0x0800be28
 8001f7c:	40590000 	.word	0x40590000
 8001f80:	0800be50 	.word	0x0800be50
 8001f84:	aaaaaaab 	.word	0xaaaaaaab
 8001f88:	0800be84 	.word	0x0800be84
 8001f8c:	0800be98 	.word	0x0800be98
 8001f90:	0800bebc 	.word	0x0800bebc
 8001f94:	0800bed0 	.word	0x0800bed0

08001f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f9c:	f002 fee8 	bl	8004d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fa0:	f000 f83e 	bl	8002020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fa4:	f7ff fc5c 	bl	8001860 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001fa8:	f000 f990 	bl	80022cc <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001fac:	f000 fb72 	bl	8002694 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /**
   * Define the initialization of SPI LCD module
   */
  lcdBegin();
 8001fb0:	f7ff fbf4 	bl	800179c <lcdBegin>
  setContrast(50);
 8001fb4:	2032      	movs	r0, #50	@ 0x32
 8001fb6:	f7ff fbd9 	bl	800176c <setContrast>
  updateDisplay();
 8001fba:	f7ff fbb7 	bl	800172c <updateDisplay>

  delay(20000);
 8001fbe:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8001fc2:	f7ff fc23 	bl	800180c <delay>

  clearDisplay(false);
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f7ff fb6e 	bl	80016a8 <clearDisplay>

  LCD_Print("Welcome in Tic-Tac-Toe Game", 1, 8);
 8001fcc:	2208      	movs	r2, #8
 8001fce:	2101      	movs	r1, #1
 8001fd0:	4810      	ldr	r0, [pc, #64]	@ (8002014 <main+0x7c>)
 8001fd2:	f7ff fa59 	bl	8001488 <LCD_Print>

  delay(20000);
 8001fd6:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8001fda:	f7ff fc17 	bl	800180c <delay>


  clearDisplay(false);
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f7ff fb62 	bl	80016a8 <clearDisplay>

  delay(10000);
 8001fe4:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001fe8:	f7ff fc10 	bl	800180c <delay>
  //HAL_Delay(1000);

  draw_tictactoe_grid();
 8001fec:	f7ff f910 	bl	8001210 <draw_tictactoe_grid>

  updateDisplay();
 8001ff0:	f7ff fb9c 	bl	800172c <updateDisplay>

  delay(20000);
 8001ff4:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8001ff8:	f7ff fc08 	bl	800180c <delay>

  Serial_Print(&huart2,"\n Ho inizializzato lo schermo LCD \n");
 8001ffc:	4906      	ldr	r1, [pc, #24]	@ (8002018 <main+0x80>)
 8001ffe:	4807      	ldr	r0, [pc, #28]	@ (800201c <main+0x84>)
 8002000:	f7ff fc9c 	bl	800193c <Serial_Print>

  init_ai_agent(&huart2);
 8002004:	4805      	ldr	r0, [pc, #20]	@ (800201c <main+0x84>)
 8002006:	f000 f87d 	bl	8002104 <init_ai_agent>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  tictactoe_game(&huart2);
 800200a:	4804      	ldr	r0, [pc, #16]	@ (800201c <main+0x84>)
 800200c:	f7ff fe2a 	bl	8001c64 <tictactoe_game>
 8002010:	e7fb      	b.n	800200a <main+0x72>
 8002012:	bf00      	nop
 8002014:	0800befc 	.word	0x0800befc
 8002018:	0800bf18 	.word	0x0800bf18
 800201c:	20000980 	.word	0x20000980

08002020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b094      	sub	sp, #80	@ 0x50
 8002024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002026:	f107 0320 	add.w	r3, r7, #32
 800202a:	2230      	movs	r2, #48	@ 0x30
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f006 fb72 	bl	8008718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002034:	f107 030c 	add.w	r3, r7, #12
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	4b29      	ldr	r3, [pc, #164]	@ (80020f0 <SystemClock_Config+0xd0>)
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	4a28      	ldr	r2, [pc, #160]	@ (80020f0 <SystemClock_Config+0xd0>)
 800204e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002052:	6413      	str	r3, [r2, #64]	@ 0x40
 8002054:	4b26      	ldr	r3, [pc, #152]	@ (80020f0 <SystemClock_Config+0xd0>)
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002060:	2300      	movs	r3, #0
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	4b23      	ldr	r3, [pc, #140]	@ (80020f4 <SystemClock_Config+0xd4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800206c:	4a21      	ldr	r2, [pc, #132]	@ (80020f4 <SystemClock_Config+0xd4>)
 800206e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4b1f      	ldr	r3, [pc, #124]	@ (80020f4 <SystemClock_Config+0xd4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800207c:	607b      	str	r3, [r7, #4]
 800207e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002080:	2302      	movs	r3, #2
 8002082:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002084:	2301      	movs	r3, #1
 8002086:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002088:	2310      	movs	r3, #16
 800208a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800208c:	2302      	movs	r3, #2
 800208e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002090:	2300      	movs	r3, #0
 8002092:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002094:	2310      	movs	r3, #16
 8002096:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002098:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800209c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800209e:	2304      	movs	r3, #4
 80020a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80020a2:	2307      	movs	r3, #7
 80020a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020a6:	f107 0320 	add.w	r3, r7, #32
 80020aa:	4618      	mov	r0, r3
 80020ac:	f003 fa38 	bl	8005520 <HAL_RCC_OscConfig>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80020b6:	f000 f81f 	bl	80020f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020ba:	230f      	movs	r3, #15
 80020bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020be:	2302      	movs	r3, #2
 80020c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	2102      	movs	r1, #2
 80020d6:	4618      	mov	r0, r3
 80020d8:	f003 fc9a 	bl	8005a10 <HAL_RCC_ClockConfig>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80020e2:	f000 f809 	bl	80020f8 <Error_Handler>
  }
}
 80020e6:	bf00      	nop
 80020e8:	3750      	adds	r7, #80	@ 0x50
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40007000 	.word	0x40007000

080020f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020fc:	b672      	cpsid	i
}
 80020fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002100:	bf00      	nop
 8002102:	e7fd      	b.n	8002100 <Error_Handler+0x8>

08002104 <init_ai_agent>:
};

#endif


void init_ai_agent(UART_HandleTypeDef *huart) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b09e      	sub	sp, #120	@ 0x78
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
    model.output_layer = x;

    #else

    // Connect the layers to build a model
    model.input_layer = ailayer_input_q7_default(&input_layer);
 800210c:	4833      	ldr	r0, [pc, #204]	@ (80021dc <init_ai_agent+0xd8>)
 800210e:	f002 f90b 	bl	8004328 <ailayer_input_q7_default>
 8002112:	4603      	mov	r3, r0
 8002114:	4a32      	ldr	r2, [pc, #200]	@ (80021e0 <init_ai_agent+0xdc>)
 8002116:	6013      	str	r3, [r2, #0]
    x = ailayer_dense_wt_q7_default(&dense_layer_1, model.input_layer);   // "wt" implementation, because the weights matrix is transposed
 8002118:	4b31      	ldr	r3, [pc, #196]	@ (80021e0 <init_ai_agent+0xdc>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4619      	mov	r1, r3
 800211e:	4831      	ldr	r0, [pc, #196]	@ (80021e4 <init_ai_agent+0xe0>)
 8002120:	f002 f8be 	bl	80042a0 <ailayer_dense_wt_q7_default>
 8002124:	6778      	str	r0, [r7, #116]	@ 0x74
    x = ailayer_relu_q7_default(&relu_layer_1, x);
 8002126:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002128:	482f      	ldr	r0, [pc, #188]	@ (80021e8 <init_ai_agent+0xe4>)
 800212a:	f002 f919 	bl	8004360 <ailayer_relu_q7_default>
 800212e:	6778      	str	r0, [r7, #116]	@ 0x74
    x = ailayer_dense_wt_q7_default(&dense_layer_2, x);
 8002130:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002132:	482e      	ldr	r0, [pc, #184]	@ (80021ec <init_ai_agent+0xe8>)
 8002134:	f002 f8b4 	bl	80042a0 <ailayer_dense_wt_q7_default>
 8002138:	6778      	str	r0, [r7, #116]	@ 0x74
    x = ailayer_relu_q7_default(&relu_layer_2, x);
 800213a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800213c:	482c      	ldr	r0, [pc, #176]	@ (80021f0 <init_ai_agent+0xec>)
 800213e:	f002 f90f 	bl	8004360 <ailayer_relu_q7_default>
 8002142:	6778      	str	r0, [r7, #116]	@ 0x74
    x = ailayer_dense_wt_q7_default(&dense_layer_3, x);
 8002144:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002146:	482b      	ldr	r0, [pc, #172]	@ (80021f4 <init_ai_agent+0xf0>)
 8002148:	f002 f8aa 	bl	80042a0 <ailayer_dense_wt_q7_default>
 800214c:	6778      	str	r0, [r7, #116]	@ 0x74
    x = ailayer_softmax_q7_default(&softmax_layer, x);
 800214e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002150:	4829      	ldr	r0, [pc, #164]	@ (80021f8 <init_ai_agent+0xf4>)
 8002152:	f002 f951 	bl	80043f8 <ailayer_softmax_q7_default>
 8002156:	6778      	str	r0, [r7, #116]	@ 0x74
    model.output_layer = x;
 8002158:	4a21      	ldr	r2, [pc, #132]	@ (80021e0 <init_ai_agent+0xdc>)
 800215a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800215c:	6053      	str	r3, [r2, #4]

    #endif // __AVR__

    // Finish the model creation by checking the connections and setting some parameters for further processing
    aialgo_compile_model(&model);
 800215e:	4820      	ldr	r0, [pc, #128]	@ (80021e0 <init_ai_agent+0xdc>)
 8002160:	f000 fd54 	bl	8002c0c <aialgo_compile_model>

    // Distribute the memory to the trainable parameters of the model
    aialgo_distribute_parameter_memory(&model, (void *) model_parameters, parameter_memory_size);
 8002164:	f240 533c 	movw	r3, #1340	@ 0x53c
 8002168:	461a      	mov	r2, r3
 800216a:	4924      	ldr	r1, [pc, #144]	@ (80021fc <init_ai_agent+0xf8>)
 800216c:	481c      	ldr	r0, [pc, #112]	@ (80021e0 <init_ai_agent+0xdc>)
 800216e:	f000 fc12 	bl	8002996 <aialgo_distribute_parameter_memory>

    // Clear the LCD and print the AI agent model structure
    Serial_Print(huart, "AI agent model structure\n");
 8002172:	4923      	ldr	r1, [pc, #140]	@ (8002200 <init_ai_agent+0xfc>)
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff fbe1 	bl	800193c <Serial_Print>
    aialgo_print_model_structure(&model);
 800217a:	4819      	ldr	r0, [pc, #100]	@ (80021e0 <init_ai_agent+0xdc>)
 800217c:	f000 fd78 	bl	8002c70 <aialgo_print_model_structure>

    char buffer[100];
    snprintf(buffer, 100, "Weights need: %d bytes of memory\n", parameter_memory_size);
 8002180:	f240 533c 	movw	r3, #1340	@ 0x53c
 8002184:	f107 0008 	add.w	r0, r7, #8
 8002188:	4a1e      	ldr	r2, [pc, #120]	@ (8002204 <init_ai_agent+0x100>)
 800218a:	2164      	movs	r1, #100	@ 0x64
 800218c:	f006 f998 	bl	80084c0 <sniprintf>
    Serial_Print(huart, buffer);
 8002190:	f107 0308 	add.w	r3, r7, #8
 8002194:	4619      	mov	r1, r3
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff fbd0 	bl	800193c <Serial_Print>

    // Allocate memory for intermediate results of the inference
    uint32_t inference_memory_size = aialgo_sizeof_inference_memory(&model);
 800219c:	4810      	ldr	r0, [pc, #64]	@ (80021e0 <init_ai_agent+0xdc>)
 800219e:	f000 fb7e 	bl	800289e <aialgo_sizeof_inference_memory>
 80021a2:	6738      	str	r0, [r7, #112]	@ 0x70
    snprintf(buffer, 100, "Model needs: %d bytes for inference\n", inference_memory_size);
 80021a4:	f107 0008 	add.w	r0, r7, #8
 80021a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021aa:	4a17      	ldr	r2, [pc, #92]	@ (8002208 <init_ai_agent+0x104>)
 80021ac:	2164      	movs	r1, #100	@ 0x64
 80021ae:	f006 f987 	bl	80084c0 <sniprintf>
    Serial_Print(huart, buffer);
 80021b2:	f107 0308 	add.w	r3, r7, #8
 80021b6:	4619      	mov	r1, r3
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff fbbf 	bl	800193c <Serial_Print>

    void *inference_memory = malloc(inference_memory_size);
 80021be:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80021c0:	f005 f988 	bl	80074d4 <malloc>
 80021c4:	4603      	mov	r3, r0
 80021c6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // Schedule the memory to the model
    aialgo_schedule_inference_memory(&model, inference_memory, inference_memory_size);
 80021c8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80021ca:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80021cc:	4804      	ldr	r0, [pc, #16]	@ (80021e0 <init_ai_agent+0xdc>)
 80021ce:	f000 fc50 	bl	8002a72 <aialgo_schedule_inference_memory>
}
 80021d2:	bf00      	nop
 80021d4:	3778      	adds	r7, #120	@ 0x78
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200001fc 	.word	0x200001fc
 80021e0:	2000076c 	.word	0x2000076c
 80021e4:	20000288 	.word	0x20000288
 80021e8:	2000077c 	.word	0x2000077c
 80021ec:	20000370 	.word	0x20000370
 80021f0:	2000080c 	.word	0x2000080c
 80021f4:	20000458 	.word	0x20000458
 80021f8:	2000089c 	.word	0x2000089c
 80021fc:	0800c20c 	.word	0x0800c20c
 8002200:	0800bf3c 	.word	0x0800bf3c
 8002204:	0800bf58 	.word	0x0800bf58
 8002208:	0800bf7c 	.word	0x0800bf7c

0800220c <run_ai_agent>:

uint8_t run_ai_agent(int8_t *board)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08c      	sub	sp, #48	@ 0x30
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint16_t board_shape[2] = {1, 9};
 8002214:	4b2a      	ldr	r3, [pc, #168]	@ (80022c0 <run_ai_agent+0xb4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	623b      	str	r3, [r7, #32]
  aimath_q7_params_t input_q_params;
  input_q_params.shift = pgm_read_word(&(((aimath_q7_params_t *) model.input_layer->result.tensor_params)->shift));
 800221a:	4b2a      	ldr	r3, [pc, #168]	@ (80022c4 <run_ai_agent+0xb8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	83bb      	strh	r3, [r7, #28]
  input_q_params.zero_point = pgm_read_word(&(((aimath_q7_params_t *) model.input_layer->result.tensor_params)->zero_point));
 8002224:	4b27      	ldr	r3, [pc, #156]	@ (80022c4 <run_ai_agent+0xb8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800222a:	3302      	adds	r3, #2
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	b25b      	sxtb	r3, r3
 8002230:	77bb      	strb	r3, [r7, #30]
  aitensor_t board_tensor = AITENSOR_2D_Q7(board_shape, &input_q_params, board); // Has the same quantization parameters as the input layer of the nn
 8002232:	4b25      	ldr	r3, [pc, #148]	@ (80022c8 <run_ai_agent+0xbc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	2302      	movs	r3, #2
 800223a:	733b      	strb	r3, [r7, #12]
 800223c:	f107 0320 	add.w	r3, r7, #32
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	f107 031c 	add.w	r3, r7, #28
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	61bb      	str	r3, [r7, #24]

  aitensor_t *out_tensor = aialgo_forward_model(&model, &board_tensor);
 800224c:	f107 0308 	add.w	r3, r7, #8
 8002250:	4619      	mov	r1, r3
 8002252:	481c      	ldr	r0, [pc, #112]	@ (80022c4 <run_ai_agent+0xb8>)
 8002254:	f000 fcb4 	bl	8002bc0 <aialgo_forward_model>
 8002258:	62b8      	str	r0, [r7, #40]	@ 0x28
  int8_t *out_data = (int8_t *) out_tensor->data;
 800225a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	627b      	str	r3, [r7, #36]	@ 0x24

  // Calculate the most probable index (argmax)
  int8_t maxi = out_data[0];
 8002260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t argmax = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  for(uint8_t j = 1; j < 9; j++){
 800226e:	2301      	movs	r3, #1
 8002270:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8002274:	e019      	b.n	80022aa <run_ai_agent+0x9e>
    if(out_data[j] > maxi){
 8002276:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800227a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800227c:	4413      	add	r3, r2
 800227e:	f993 3000 	ldrsb.w	r3, [r3]
 8002282:	f997 202f 	ldrsb.w	r2, [r7, #47]	@ 0x2f
 8002286:	429a      	cmp	r2, r3
 8002288:	da0a      	bge.n	80022a0 <run_ai_agent+0x94>
        maxi = out_data[j];
 800228a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800228e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002290:	4413      	add	r3, r2
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        argmax = j;
 8002298:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800229c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  for(uint8_t j = 1; j < 9; j++){
 80022a0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80022a4:	3301      	adds	r3, #1
 80022a6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80022aa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d9e1      	bls.n	8002276 <run_ai_agent+0x6a>
    }
  }

  return argmax;
 80022b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3730      	adds	r7, #48	@ 0x30
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	0800bfa4 	.word	0x0800bfa4
 80022c4:	2000076c 	.word	0x2000076c
 80022c8:	20000570 	.word	0x20000570

080022cc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80022d0:	4b17      	ldr	r3, [pc, #92]	@ (8002330 <MX_SPI2_Init+0x64>)
 80022d2:	4a18      	ldr	r2, [pc, #96]	@ (8002334 <MX_SPI2_Init+0x68>)
 80022d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80022d6:	4b16      	ldr	r3, [pc, #88]	@ (8002330 <MX_SPI2_Init+0x64>)
 80022d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80022dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80022de:	4b14      	ldr	r3, [pc, #80]	@ (8002330 <MX_SPI2_Init+0x64>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80022e4:	4b12      	ldr	r3, [pc, #72]	@ (8002330 <MX_SPI2_Init+0x64>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022ea:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <MX_SPI2_Init+0x64>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002330 <MX_SPI2_Init+0x64>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80022f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002330 <MX_SPI2_Init+0x64>)
 80022f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <MX_SPI2_Init+0x64>)
 8002300:	2200      	movs	r2, #0
 8002302:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002304:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <MX_SPI2_Init+0x64>)
 8002306:	2200      	movs	r2, #0
 8002308:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800230a:	4b09      	ldr	r3, [pc, #36]	@ (8002330 <MX_SPI2_Init+0x64>)
 800230c:	2200      	movs	r2, #0
 800230e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002310:	4b07      	ldr	r3, [pc, #28]	@ (8002330 <MX_SPI2_Init+0x64>)
 8002312:	2200      	movs	r2, #0
 8002314:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002316:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <MX_SPI2_Init+0x64>)
 8002318:	220a      	movs	r2, #10
 800231a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800231c:	4804      	ldr	r0, [pc, #16]	@ (8002330 <MX_SPI2_Init+0x64>)
 800231e:	f003 fd97 	bl	8005e50 <HAL_SPI_Init>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002328:	f7ff fee6 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800232c:	bf00      	nop
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000924 	.word	0x20000924
 8002334:	40003800 	.word	0x40003800

08002338 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	@ 0x28
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
 800234e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a28      	ldr	r2, [pc, #160]	@ (80023f8 <HAL_SPI_MspInit+0xc0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d14a      	bne.n	80023f0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	4b27      	ldr	r3, [pc, #156]	@ (80023fc <HAL_SPI_MspInit+0xc4>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	4a26      	ldr	r2, [pc, #152]	@ (80023fc <HAL_SPI_MspInit+0xc4>)
 8002364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002368:	6413      	str	r3, [r2, #64]	@ 0x40
 800236a:	4b24      	ldr	r3, [pc, #144]	@ (80023fc <HAL_SPI_MspInit+0xc4>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	4b20      	ldr	r3, [pc, #128]	@ (80023fc <HAL_SPI_MspInit+0xc4>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	4a1f      	ldr	r2, [pc, #124]	@ (80023fc <HAL_SPI_MspInit+0xc4>)
 8002380:	f043 0304 	orr.w	r3, r3, #4
 8002384:	6313      	str	r3, [r2, #48]	@ 0x30
 8002386:	4b1d      	ldr	r3, [pc, #116]	@ (80023fc <HAL_SPI_MspInit+0xc4>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	4b19      	ldr	r3, [pc, #100]	@ (80023fc <HAL_SPI_MspInit+0xc4>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	4a18      	ldr	r2, [pc, #96]	@ (80023fc <HAL_SPI_MspInit+0xc4>)
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a2:	4b16      	ldr	r3, [pc, #88]	@ (80023fc <HAL_SPI_MspInit+0xc4>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|MOSI_LCD_DISPLAY_Pin;
 80023ae:	230c      	movs	r3, #12
 80023b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b2:	2302      	movs	r3, #2
 80023b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ba:	2303      	movs	r3, #3
 80023bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023be:	2305      	movs	r3, #5
 80023c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c2:	f107 0314 	add.w	r3, r7, #20
 80023c6:	4619      	mov	r1, r3
 80023c8:	480d      	ldr	r0, [pc, #52]	@ (8002400 <HAL_SPI_MspInit+0xc8>)
 80023ca:	f002 ff0b 	bl	80051e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCLK_LCD_DISPLAY_Pin;
 80023ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d4:	2302      	movs	r3, #2
 80023d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023dc:	2303      	movs	r3, #3
 80023de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023e0:	2305      	movs	r3, #5
 80023e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCLK_LCD_DISPLAY_GPIO_Port, &GPIO_InitStruct);
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	4619      	mov	r1, r3
 80023ea:	4806      	ldr	r0, [pc, #24]	@ (8002404 <HAL_SPI_MspInit+0xcc>)
 80023ec:	f002 fefa 	bl	80051e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80023f0:	bf00      	nop
 80023f2:	3728      	adds	r7, #40	@ 0x28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40003800 	.word	0x40003800
 80023fc:	40023800 	.word	0x40023800
 8002400:	40020800 	.word	0x40020800
 8002404:	40020400 	.word	0x40020400

08002408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
 8002412:	4b10      	ldr	r3, [pc, #64]	@ (8002454 <HAL_MspInit+0x4c>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002416:	4a0f      	ldr	r2, [pc, #60]	@ (8002454 <HAL_MspInit+0x4c>)
 8002418:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800241c:	6453      	str	r3, [r2, #68]	@ 0x44
 800241e:	4b0d      	ldr	r3, [pc, #52]	@ (8002454 <HAL_MspInit+0x4c>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	603b      	str	r3, [r7, #0]
 800242e:	4b09      	ldr	r3, [pc, #36]	@ (8002454 <HAL_MspInit+0x4c>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	4a08      	ldr	r2, [pc, #32]	@ (8002454 <HAL_MspInit+0x4c>)
 8002434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002438:	6413      	str	r3, [r2, #64]	@ 0x40
 800243a:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <HAL_MspInit+0x4c>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002446:	2007      	movs	r0, #7
 8002448:	f002 fdf8 	bl	800503c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40023800 	.word	0x40023800

08002458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <NMI_Handler+0x4>

08002460 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002464:	bf00      	nop
 8002466:	e7fd      	b.n	8002464 <HardFault_Handler+0x4>

08002468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800246c:	bf00      	nop
 800246e:	e7fd      	b.n	800246c <MemManage_Handler+0x4>

08002470 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002474:	bf00      	nop
 8002476:	e7fd      	b.n	8002474 <BusFault_Handler+0x4>

08002478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800247c:	bf00      	nop
 800247e:	e7fd      	b.n	800247c <UsageFault_Handler+0x4>

08002480 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024ae:	f002 fcb1 	bl	8004e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024bc:	4802      	ldr	r0, [pc, #8]	@ (80024c8 <USART2_IRQHandler+0x10>)
 80024be:	f004 f8e3 	bl	8006688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000980 	.word	0x20000980

080024cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return 1;
 80024d0:	2301      	movs	r3, #1
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <_kill>:

int _kill(int pid, int sig)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024e6:	f006 f991 	bl	800880c <__errno>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2216      	movs	r2, #22
 80024ee:	601a      	str	r2, [r3, #0]
  return -1;
 80024f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <_exit>:

void _exit (int status)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002504:	f04f 31ff 	mov.w	r1, #4294967295
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff ffe7 	bl	80024dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800250e:	bf00      	nop
 8002510:	e7fd      	b.n	800250e <_exit+0x12>

08002512 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b086      	sub	sp, #24
 8002516:	af00      	add	r7, sp, #0
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	e00a      	b.n	800253a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002524:	f3af 8000 	nop.w
 8002528:	4601      	mov	r1, r0
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	60ba      	str	r2, [r7, #8]
 8002530:	b2ca      	uxtb	r2, r1
 8002532:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	3301      	adds	r3, #1
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	429a      	cmp	r2, r3
 8002540:	dbf0      	blt.n	8002524 <_read+0x12>
  }

  return len;
 8002542:	687b      	ldr	r3, [r7, #4]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	e009      	b.n	8002572 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	60ba      	str	r2, [r7, #8]
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	3301      	adds	r3, #1
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	429a      	cmp	r2, r3
 8002578:	dbf1      	blt.n	800255e <_write+0x12>
  }
  return len;
 800257a:	687b      	ldr	r3, [r7, #4]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <_close>:

int _close(int file)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800258c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025ac:	605a      	str	r2, [r3, #4]
  return 0;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <_isatty>:

int _isatty(int file)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025c4:	2301      	movs	r3, #1
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b085      	sub	sp, #20
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <_times>:
  errno = ENOENT;
  return -1;
}

int _times(struct tms *buf)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  (void)buf;
  return -1;
 80025f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800260c:	4a14      	ldr	r2, [pc, #80]	@ (8002660 <_sbrk+0x5c>)
 800260e:	4b15      	ldr	r3, [pc, #84]	@ (8002664 <_sbrk+0x60>)
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002618:	4b13      	ldr	r3, [pc, #76]	@ (8002668 <_sbrk+0x64>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d102      	bne.n	8002626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002620:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <_sbrk+0x64>)
 8002622:	4a12      	ldr	r2, [pc, #72]	@ (800266c <_sbrk+0x68>)
 8002624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002626:	4b10      	ldr	r3, [pc, #64]	@ (8002668 <_sbrk+0x64>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	429a      	cmp	r2, r3
 8002632:	d207      	bcs.n	8002644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002634:	f006 f8ea 	bl	800880c <__errno>
 8002638:	4603      	mov	r3, r0
 800263a:	220c      	movs	r2, #12
 800263c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800263e:	f04f 33ff 	mov.w	r3, #4294967295
 8002642:	e009      	b.n	8002658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002644:	4b08      	ldr	r3, [pc, #32]	@ (8002668 <_sbrk+0x64>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800264a:	4b07      	ldr	r3, [pc, #28]	@ (8002668 <_sbrk+0x64>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	4a05      	ldr	r2, [pc, #20]	@ (8002668 <_sbrk+0x64>)
 8002654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002656:	68fb      	ldr	r3, [r7, #12]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	20018000 	.word	0x20018000
 8002664:	00000400 	.word	0x00000400
 8002668:	2000097c 	.word	0x2000097c
 800266c:	20000b18 	.word	0x20000b18

08002670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002674:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <SystemInit+0x20>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800267a:	4a05      	ldr	r2, [pc, #20]	@ (8002690 <SystemInit+0x20>)
 800267c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002698:	4b11      	ldr	r3, [pc, #68]	@ (80026e0 <MX_USART2_UART_Init+0x4c>)
 800269a:	4a12      	ldr	r2, [pc, #72]	@ (80026e4 <MX_USART2_UART_Init+0x50>)
 800269c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800269e:	4b10      	ldr	r3, [pc, #64]	@ (80026e0 <MX_USART2_UART_Init+0x4c>)
 80026a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026a6:	4b0e      	ldr	r3, [pc, #56]	@ (80026e0 <MX_USART2_UART_Init+0x4c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026ac:	4b0c      	ldr	r3, [pc, #48]	@ (80026e0 <MX_USART2_UART_Init+0x4c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026b2:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <MX_USART2_UART_Init+0x4c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026b8:	4b09      	ldr	r3, [pc, #36]	@ (80026e0 <MX_USART2_UART_Init+0x4c>)
 80026ba:	220c      	movs	r2, #12
 80026bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026be:	4b08      	ldr	r3, [pc, #32]	@ (80026e0 <MX_USART2_UART_Init+0x4c>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c4:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <MX_USART2_UART_Init+0x4c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026ca:	4805      	ldr	r0, [pc, #20]	@ (80026e0 <MX_USART2_UART_Init+0x4c>)
 80026cc:	f003 fe6a 	bl	80063a4 <HAL_UART_Init>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026d6:	f7ff fd0f 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000980 	.word	0x20000980
 80026e4:	40004400 	.word	0x40004400

080026e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08a      	sub	sp, #40	@ 0x28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a1d      	ldr	r2, [pc, #116]	@ (800277c <HAL_UART_MspInit+0x94>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d133      	bne.n	8002772 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
 800270e:	4b1c      	ldr	r3, [pc, #112]	@ (8002780 <HAL_UART_MspInit+0x98>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	4a1b      	ldr	r2, [pc, #108]	@ (8002780 <HAL_UART_MspInit+0x98>)
 8002714:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002718:	6413      	str	r3, [r2, #64]	@ 0x40
 800271a:	4b19      	ldr	r3, [pc, #100]	@ (8002780 <HAL_UART_MspInit+0x98>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	4b15      	ldr	r3, [pc, #84]	@ (8002780 <HAL_UART_MspInit+0x98>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	4a14      	ldr	r2, [pc, #80]	@ (8002780 <HAL_UART_MspInit+0x98>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6313      	str	r3, [r2, #48]	@ 0x30
 8002736:	4b12      	ldr	r3, [pc, #72]	@ (8002780 <HAL_UART_MspInit+0x98>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002742:	230c      	movs	r3, #12
 8002744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274e:	2300      	movs	r3, #0
 8002750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002752:	2307      	movs	r3, #7
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002756:	f107 0314 	add.w	r3, r7, #20
 800275a:	4619      	mov	r1, r3
 800275c:	4809      	ldr	r0, [pc, #36]	@ (8002784 <HAL_UART_MspInit+0x9c>)
 800275e:	f002 fd41 	bl	80051e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002762:	2200      	movs	r2, #0
 8002764:	2100      	movs	r1, #0
 8002766:	2026      	movs	r0, #38	@ 0x26
 8002768:	f002 fc73 	bl	8005052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800276c:	2026      	movs	r0, #38	@ 0x26
 800276e:	f002 fc8c 	bl	800508a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002772:	bf00      	nop
 8002774:	3728      	adds	r7, #40	@ 0x28
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40004400 	.word	0x40004400
 8002780:	40023800 	.word	0x40023800
 8002784:	40020000 	.word	0x40020000

08002788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002788:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800278c:	f7ff ff70 	bl	8002670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002790:	480c      	ldr	r0, [pc, #48]	@ (80027c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002792:	490d      	ldr	r1, [pc, #52]	@ (80027c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002794:	4a0d      	ldr	r2, [pc, #52]	@ (80027cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002798:	e002      	b.n	80027a0 <LoopCopyDataInit>

0800279a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800279a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800279c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800279e:	3304      	adds	r3, #4

080027a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027a4:	d3f9      	bcc.n	800279a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027a6:	4a0a      	ldr	r2, [pc, #40]	@ (80027d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027a8:	4c0a      	ldr	r4, [pc, #40]	@ (80027d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027ac:	e001      	b.n	80027b2 <LoopFillZerobss>

080027ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b0:	3204      	adds	r2, #4

080027b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027b4:	d3fb      	bcc.n	80027ae <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80027b6:	f006 f82f 	bl	8008818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ba:	f7ff fbed 	bl	8001f98 <main>
  bx  lr    
 80027be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80027c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027c8:	20000744 	.word	0x20000744
  ldr r2, =_sidata
 80027cc:	0800cdd4 	.word	0x0800cdd4
  ldr r2, =_sbss
 80027d0:	20000744 	.word	0x20000744
  ldr r4, =_ebss
 80027d4:	20000b18 	.word	0x20000b18

080027d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027d8:	e7fe      	b.n	80027d8 <ADC_IRQHandler>
	...

080027dc <aifes_log_e>:
int (*aiprint_long_int)(const char *format, long int var) = aifes_print_long_int;
int (*aiprint_float)(const char *format, float var) = aifes_print_float;


int aifes_log_e(const char *message)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
    printf("\nERROR: ");
 80027e4:	4805      	ldr	r0, [pc, #20]	@ (80027fc <aifes_log_e+0x20>)
 80027e6:	f005 fe59 	bl	800849c <iprintf>
    return printf("%s", message);
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4804      	ldr	r0, [pc, #16]	@ (8002800 <aifes_log_e+0x24>)
 80027ee:	f005 fe55 	bl	800849c <iprintf>
 80027f2:	4603      	mov	r3, r0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	0800bfa8 	.word	0x0800bfa8
 8002800:	0800bfb4 	.word	0x0800bfb4

08002804 <aifes_print>:

int aifes_print(const char *string)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
    return printf("%s", string);
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	4804      	ldr	r0, [pc, #16]	@ (8002820 <aifes_print+0x1c>)
 8002810:	f005 fe44 	bl	800849c <iprintf>
 8002814:	4603      	mov	r3, r0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	0800bfb4 	.word	0x0800bfb4

08002824 <aifes_print_int>:

int aifes_print_int(const char *format, int var)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
    return printf(format, var);
 800282e:	6839      	ldr	r1, [r7, #0]
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f005 fe33 	bl	800849c <iprintf>
 8002836:	4603      	mov	r3, r0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <aifes_print_uint>:

int aifes_print_uint(const char *format, unsigned int var)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
    return printf(format, var);
 800284a:	6839      	ldr	r1, [r7, #0]
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f005 fe25 	bl	800849c <iprintf>
 8002852:	4603      	mov	r3, r0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <aifes_print_long_int>:

int aifes_print_long_int(const char *format, long int var)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
    return printf(format, var);
 8002866:	6839      	ldr	r1, [r7, #0]
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f005 fe17 	bl	800849c <iprintf>
 800286e:	4603      	mov	r3, r0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <aifes_print_float>:

int aifes_print_float(const char *format, float var)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	ed87 0a00 	vstr	s0, [r7]
    return printf(format, var);
 8002884:	6838      	ldr	r0, [r7, #0]
 8002886:	f7fd fe67 	bl	8000558 <__aeabi_f2d>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f005 fe04 	bl	800849c <iprintf>
 8002894:	4603      	mov	r3, r0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <aialgo_sizeof_inference_memory>:

#include <float.h>
#include <string.h>

uint32_t aialgo_sizeof_inference_memory(aimodel_t *model)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b088      	sub	sp, #32
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t temp_memory = 0, memory = 0, max_memory = 0, max_memory2 = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
	ailayer_t *layer_ptr = model->input_layer;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60bb      	str	r3, [r7, #8]

	// Calculate result shapes and max amount of memory
	for(i = 0; i < model->layer_count; i++)
 80028bc:	2300      	movs	r3, #0
 80028be:	83fb      	strh	r3, [r7, #30]
 80028c0:	e046      	b.n	8002950 <aialgo_sizeof_inference_memory+0xb2>
	{
		layer_ptr->calc_result_shape(layer_ptr);
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	68b8      	ldr	r0, [r7, #8]
 80028c8:	4798      	blx	r3

        // Memory for the quantization parameter of the intermediate results
        if(layer_ptr->calc_result_tensor_params != 0){
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00e      	beq.n	80028f0 <aialgo_sizeof_inference_memory+0x52>
            // This memory is only needed if the parameters are predefined by the layer (e.g. for sigmoid layers)
            // The other result tensor parameters are in the parameter memory
            memory += layer_ptr->result.dtype->tensor_params_size;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	4413      	add	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]
            AIFES_ALIGN_INTEGER(memory, AIFES_MEMORY_ALIGNMENT);
 80028de:	e002      	b.n	80028e6 <aialgo_sizeof_inference_memory+0x48>
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	3301      	adds	r3, #1
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f7      	bne.n	80028e0 <aialgo_sizeof_inference_memory+0x42>
        }

        // Swapping memory for the layer results
        if(!AILAYER_SETTINGS_IS(layer_ptr->settings, 0b1, AILAYER_SETTINGS_KEEP_INPUT_BUFFER_FOR_RESULT)){
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d114      	bne.n	8002926 <aialgo_sizeof_inference_memory+0x88>

            temp_memory = aimath_sizeof_tensor_data(&(layer_ptr->result));
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	331c      	adds	r3, #28
 8002900:	4618      	mov	r0, r3
 8002902:	f000 ffca 	bl	800389a <aimath_sizeof_tensor_data>
 8002906:	61b8      	str	r0, [r7, #24]
            AIFES_ALIGN_INTEGER(temp_memory, AIFES_MEMORY_ALIGNMENT);
 8002908:	e002      	b.n	8002910 <aialgo_sizeof_inference_memory+0x72>
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	3301      	adds	r3, #1
 800290e:	61bb      	str	r3, [r7, #24]
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f7      	bne.n	800290a <aialgo_sizeof_inference_memory+0x6c>

            if(temp_memory > max_memory) max_memory = temp_memory;
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	429a      	cmp	r2, r3
 8002920:	d901      	bls.n	8002926 <aialgo_sizeof_inference_memory+0x88>
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	613b      	str	r3, [r7, #16]
        }

        // Shared memory for temporary results of the forward pass
        if(layer_ptr->sizeof_fwdmem != 0){
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <aialgo_sizeof_inference_memory+0xa6>
            temp_memory = layer_ptr->sizeof_fwdmem(layer_ptr);
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002932:	68b8      	ldr	r0, [r7, #8]
 8002934:	4798      	blx	r3
 8002936:	61b8      	str	r0, [r7, #24]
            if(temp_memory > max_memory2) max_memory2 = temp_memory;
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	429a      	cmp	r2, r3
 800293e:	d901      	bls.n	8002944 <aialgo_sizeof_inference_memory+0xa6>
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	60fb      	str	r3, [r7, #12]
        }

		layer_ptr = layer_ptr->output_layer;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < model->layer_count; i++)
 800294a:	8bfb      	ldrh	r3, [r7, #30]
 800294c:	3301      	adds	r3, #1
 800294e:	83fb      	strh	r3, [r7, #30]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	891b      	ldrh	r3, [r3, #8]
 8002954:	8bfa      	ldrh	r2, [r7, #30]
 8002956:	429a      	cmp	r2, r3
 8002958:	d3b3      	bcc.n	80028c2 <aialgo_sizeof_inference_memory+0x24>
	}

	AIFES_ALIGN_INTEGER(max_memory, AIFES_MEMORY_ALIGNMENT);
 800295a:	e002      	b.n	8002962 <aialgo_sizeof_inference_memory+0xc4>
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	3301      	adds	r3, #1
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f7      	bne.n	800295c <aialgo_sizeof_inference_memory+0xbe>
	AIFES_ALIGN_INTEGER(max_memory2, AIFES_MEMORY_ALIGNMENT);
 800296c:	e002      	b.n	8002974 <aialgo_sizeof_inference_memory+0xd6>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	3301      	adds	r3, #1
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f7      	bne.n	800296e <aialgo_sizeof_inference_memory+0xd0>

	memory += 2 * max_memory + max_memory2;
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	005a      	lsls	r2, r3, #1
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4413      	add	r3, r2
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4413      	add	r3, r2
 800298a:	617b      	str	r3, [r7, #20]

	return memory; // Input and output buffer + temporary results buffer
 800298c:	697b      	ldr	r3, [r7, #20]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3720      	adds	r7, #32
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <aialgo_distribute_parameter_memory>:
	}
	return memory;
}

void aialgo_distribute_parameter_memory(aimodel_t *model, void *memory_ptr, uint32_t memory_size)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b088      	sub	sp, #32
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
	int i;
	ailayer_t *layer_ptr;
	uint32_t address_counter = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]

	// Set memory in 2 separate loops to avoid wasting memory for alignment

	// 1. Distribute memory for tensor parameters (Q7-shift, Q7-ZeroPoint, ...)
	layer_ptr = model->input_layer;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < model->layer_count; i++)
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
 80029b0:	e026      	b.n	8002a00 <aialgo_distribute_parameter_memory+0x6a>
	{
		layer_ptr->calc_result_shape(layer_ptr);
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b6:	69b8      	ldr	r0, [r7, #24]
 80029b8:	4798      	blx	r3

		// Memory for the quantization parameter of the intermediate results
		if(layer_ptr->result.dtype->tensor_params_size != 0){
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d017      	beq.n	80029f4 <aialgo_distribute_parameter_memory+0x5e>
            if(layer_ptr->calc_result_tensor_params == 0){
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d113      	bne.n	80029f4 <aialgo_distribute_parameter_memory+0x5e>
                // This memory is only needed if the parameters are NOT predefined by the layer (e.g. for dense layers)
                // The other result tensor parameters are in the inference of training memory
                layer_ptr->result.tensor_params = memory_ptr + address_counter;
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	441a      	add	r2, r3
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	629a      	str	r2, [r3, #40]	@ 0x28
                address_counter += layer_ptr->result.dtype->tensor_params_size;
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	4413      	add	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]
                AIFES_ALIGN_INTEGER(address_counter, AIFES_MEMORY_ALIGNMENT);
 80029e2:	e002      	b.n	80029ea <aialgo_distribute_parameter_memory+0x54>
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	3301      	adds	r3, #1
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f7      	bne.n	80029e4 <aialgo_distribute_parameter_memory+0x4e>
            }
		}
		layer_ptr = layer_ptr->output_layer;
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < model->layer_count; i++)
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3301      	adds	r3, #1
 80029fe:	61fb      	str	r3, [r7, #28]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	891b      	ldrh	r3, [r3, #8]
 8002a04:	461a      	mov	r2, r3
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	dbd2      	blt.n	80029b2 <aialgo_distribute_parameter_memory+0x1c>
	}

	// 2. Distribute memory for trainable parameters (weights, ...)
	// The memory address might be unaligned afterwards.
	layer_ptr = model->input_layer;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < model->layer_count; i++)
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	e022      	b.n	8002a5e <aialgo_distribute_parameter_memory+0xc8>
	{
        // Memory for trainable parameter
		if(layer_ptr->sizeof_paramem != 0)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d018      	beq.n	8002a52 <aialgo_distribute_parameter_memory+0xbc>
		{
			layer_ptr->set_paramem(layer_ptr, memory_ptr + address_counter);
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	440a      	add	r2, r1
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	69b8      	ldr	r0, [r7, #24]
 8002a2e:	4798      	blx	r3
			address_counter += layer_ptr->sizeof_paramem(layer_ptr);
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a34:	69b8      	ldr	r0, [r7, #24]
 8002a36:	4798      	blx	r3
 8002a38:	4602      	mov	r2, r0
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
            AIFES_ALIGN_INTEGER(address_counter, AIFES_MEMORY_ALIGNMENT);
 8002a40:	e002      	b.n	8002a48 <aialgo_distribute_parameter_memory+0xb2>
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	3301      	adds	r3, #1
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f7      	bne.n	8002a42 <aialgo_distribute_parameter_memory+0xac>
		}

		layer_ptr = layer_ptr->output_layer;
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < model->layer_count; i++)
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	61fb      	str	r3, [r7, #28]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	891b      	ldrh	r3, [r3, #8]
 8002a62:	461a      	mov	r2, r3
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	4293      	cmp	r3, r2
 8002a68:	dbd6      	blt.n	8002a18 <aialgo_distribute_parameter_memory+0x82>
	}
	return;
 8002a6a:	bf00      	nop
}
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <aialgo_schedule_inference_memory>:


uint8_t aialgo_schedule_inference_memory(aimodel_t *model, void *memory_ptr, uint32_t memory_size)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b08a      	sub	sp, #40	@ 0x28
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
	uint16_t i, idx;
	void *memory_block;
	ailayer_t *layer_ptr = model->input_layer;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	623b      	str	r3, [r7, #32]
	uint32_t max_memory = 0, address_counter = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61bb      	str	r3, [r7, #24]

	// 1. Shared memory for temporary results of the forward pass
    // This is placed in the first part of the memory block
	for(i = 0; i < model->layer_count; i++){
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002a90:	e01f      	b.n	8002ad2 <aialgo_schedule_inference_memory+0x60>
        layer_ptr->calc_result_shape(layer_ptr);
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	6a38      	ldr	r0, [r7, #32]
 8002a98:	4798      	blx	r3

        // Memory for temporary results of the forward pass
        if(layer_ptr->sizeof_fwdmem != 0){
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00c      	beq.n	8002abc <aialgo_schedule_inference_memory+0x4a>
            if(layer_ptr->sizeof_fwdmem(layer_ptr) > max_memory) max_memory = layer_ptr->sizeof_fwdmem(layer_ptr);
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa6:	6a38      	ldr	r0, [r7, #32]
 8002aa8:	4798      	blx	r3
 8002aaa:	4602      	mov	r2, r0
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d204      	bcs.n	8002abc <aialgo_schedule_inference_memory+0x4a>
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab6:	6a38      	ldr	r0, [r7, #32]
 8002ab8:	4798      	blx	r3
 8002aba:	61f8      	str	r0, [r7, #28]
        }
        layer_ptr->tempmem = memory_ptr + address_counter;
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	441a      	add	r2, r3
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	679a      	str	r2, [r3, #120]	@ 0x78

        layer_ptr = layer_ptr->output_layer;
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	623b      	str	r3, [r7, #32]
	for(i = 0; i < model->layer_count; i++){
 8002acc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002ace:	3301      	adds	r3, #1
 8002ad0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	891b      	ldrh	r3, [r3, #8]
 8002ad6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d3da      	bcc.n	8002a92 <aialgo_schedule_inference_memory+0x20>
	}
	address_counter += max_memory;
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
    AIFES_ALIGN_INTEGER(address_counter, AIFES_MEMORY_ALIGNMENT);
 8002ae4:	e002      	b.n	8002aec <aialgo_schedule_inference_memory+0x7a>
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	61bb      	str	r3, [r7, #24]
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1f7      	bne.n	8002ae6 <aialgo_schedule_inference_memory+0x74>

    // 2. Memory for the tensor parameters (if required)
	layer_ptr = model->input_layer;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	623b      	str	r3, [r7, #32]
	for(i = 0; i < model->layer_count; i++){
 8002afc:	2300      	movs	r3, #0
 8002afe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002b00:	e022      	b.n	8002b48 <aialgo_schedule_inference_memory+0xd6>
        // Memory for tensor params (quantization parameter etc.)
        if(layer_ptr->result.dtype->tensor_params_size != 0){
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d017      	beq.n	8002b3c <aialgo_schedule_inference_memory+0xca>
            if(layer_ptr->calc_result_tensor_params != 0){
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d013      	beq.n	8002b3c <aialgo_schedule_inference_memory+0xca>
                // This memory is only needed if the parameters are predefined by the layer (e.g. for sigmoid layers)
                // The other result tensor parameters are in the parameter memory
                layer_ptr->result.tensor_params = memory_ptr + address_counter;
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	441a      	add	r2, r3
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	629a      	str	r2, [r3, #40]	@ 0x28
                address_counter += layer_ptr->result.dtype->tensor_params_size;
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4413      	add	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
                AIFES_ALIGN_INTEGER(address_counter, AIFES_MEMORY_ALIGNMENT);
 8002b2a:	e002      	b.n	8002b32 <aialgo_schedule_inference_memory+0xc0>
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	61bb      	str	r3, [r7, #24]
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f7      	bne.n	8002b2c <aialgo_schedule_inference_memory+0xba>
            }
        }

        layer_ptr = layer_ptr->output_layer;
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	623b      	str	r3, [r7, #32]
	for(i = 0; i < model->layer_count; i++){
 8002b42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002b44:	3301      	adds	r3, #1
 8002b46:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	891b      	ldrh	r3, [r3, #8]
 8002b4c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d3d7      	bcc.n	8002b02 <aialgo_schedule_inference_memory+0x90>
	}

	// 3. Swapping memory buffer for the layer results
	layer_ptr = model->input_layer;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	623b      	str	r3, [r7, #32]
	idx = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for(i = 0; i < model->layer_count; i++)
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002b60:	e024      	b.n	8002bac <aialgo_schedule_inference_memory+0x13a>
	{
        memory_block = memory_ptr + address_counter + (idx % 2) * (memory_size - address_counter) / 2;
 8002b62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	1a8a      	subs	r2, r1, r2
 8002b6e:	fb02 f303 	mul.w	r3, r2, r3
 8002b72:	085a      	lsrs	r2, r3, #1
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	4413      	add	r3, r2
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]
        layer_ptr->result.data = memory_block;
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	62da      	str	r2, [r3, #44]	@ 0x2c

        if(layer_ptr->output_layer == 0
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d006      	beq.n	8002b9a <aialgo_schedule_inference_memory+0x128>
           || !AILAYER_SETTINGS_IS(layer_ptr->output_layer->settings, 0b1, AILAYER_SETTINGS_KEEP_INPUT_BUFFER_FOR_RESULT)){
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d102      	bne.n	8002ba0 <aialgo_schedule_inference_memory+0x12e>
            idx++;
 8002b9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        }
        layer_ptr = layer_ptr->output_layer;
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	623b      	str	r3, [r7, #32]
	for(i = 0; i < model->layer_count; i++)
 8002ba6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002ba8:	3301      	adds	r3, #1
 8002baa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	891b      	ldrh	r3, [r3, #8]
 8002bb0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d3d5      	bcc.n	8002b62 <aialgo_schedule_inference_memory+0xf0>
	}

	return 0;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3728      	adds	r7, #40	@ 0x28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <aialgo_forward_model>:

aitensor_t *aialgo_forward_model(aimodel_t *model, aitensor_t *input_data)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
	uint16_t i;
	ailayer_t *layer_ptr = model->input_layer;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	60bb      	str	r3, [r7, #8]

	model->input_layer->result.data = input_data->data;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	6912      	ldr	r2, [r2, #16]
 8002bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
	for(i = 0; i < model->layer_count; i++)
 8002bda:	2300      	movs	r3, #0
 8002bdc:	81fb      	strh	r3, [r7, #14]
 8002bde:	e009      	b.n	8002bf4 <aialgo_forward_model+0x34>
	{
		layer_ptr->forward(layer_ptr);
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be4:	68b8      	ldr	r0, [r7, #8]
 8002be6:	4798      	blx	r3
		layer_ptr = layer_ptr->output_layer;
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < model->layer_count; i++)
 8002bee:	89fb      	ldrh	r3, [r7, #14]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	81fb      	strh	r3, [r7, #14]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	891b      	ldrh	r3, [r3, #8]
 8002bf8:	89fa      	ldrh	r2, [r7, #14]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d3f0      	bcc.n	8002be0 <aialgo_forward_model+0x20>
	}
	return &(model->output_layer->result);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	331c      	adds	r3, #28
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <aialgo_compile_model>:
	}
	return 0;
}

uint8_t aialgo_compile_model(aimodel_t *model)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	ailayer_t *layer_ptr = model->input_layer;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	60fb      	str	r3, [r7, #12]
	uint16_t layer_counter = 1;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	817b      	strh	r3, [r7, #10]
	const uint16_t MAX_LAYER_COUNT = 128; // May be an other value
 8002c1e:	2380      	movs	r3, #128	@ 0x80
 8002c20:	813b      	strh	r3, [r7, #8]

	model->trainable_params_count = 0;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	815a      	strh	r2, [r3, #10]
	while(layer_ptr != model->output_layer && layer_counter < MAX_LAYER_COUNT)
 8002c28:	e00e      	b.n	8002c48 <aialgo_compile_model+0x3c>
	{
		layer_counter++;
 8002c2a:	897b      	ldrh	r3, [r7, #10]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	817b      	strh	r3, [r7, #10]
		model->trainable_params_count += layer_ptr->trainable_params_count;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	895b      	ldrh	r3, [r3, #10]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	f892 2050 	ldrb.w	r2, [r2, #80]	@ 0x50
 8002c3a:	4413      	add	r3, r2
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	815a      	strh	r2, [r3, #10]

		layer_ptr = layer_ptr->output_layer;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	60fb      	str	r3, [r7, #12]
	while(layer_ptr != model->output_layer && layer_counter < MAX_LAYER_COUNT)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d003      	beq.n	8002c5a <aialgo_compile_model+0x4e>
 8002c52:	897a      	ldrh	r2, [r7, #10]
 8002c54:	893b      	ldrh	r3, [r7, #8]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d3e7      	bcc.n	8002c2a <aialgo_compile_model+0x1e>
	}
	model->layer_count = layer_counter;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	897a      	ldrh	r2, [r7, #10]
 8002c5e:	811a      	strh	r2, [r3, #8]

	return 0;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <aialgo_print_model_structure>:
AISTRING_STORAGE_WRAPPER(aistring_print_model_structure_3);
AISTRING_STORAGE_WRAPPER(aistring_print_model_structure_4);
AISTRING_STORAGE_WRAPPER(aistring_print_model_structure_5);

void aialgo_print_model_structure(aimodel_t *model)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
    int i;
	ailayer_t *layer_ptr = model->input_layer;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	60bb      	str	r3, [r7, #8]

	for(i = 0; i < model->layer_count; i++){
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	e040      	b.n	8002d06 <aialgo_print_model_structure+0x96>
        if(layer_ptr->layer_type->print_specs != 0){
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d02a      	beq.n	8002ce4 <aialgo_print_model_structure+0x74>
            AIPRINT_INT("%4d", i + 1);
 8002c8e:	4b23      	ldr	r3, [pc, #140]	@ (8002d1c <aialgo_print_model_structure+0xac>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	3201      	adds	r2, #1
 8002c96:	4611      	mov	r1, r2
 8002c98:	4821      	ldr	r0, [pc, #132]	@ (8002d20 <aialgo_print_model_structure+0xb0>)
 8002c9a:	4798      	blx	r3
            AIPRINT(aistring_print_model_structure_1);
 8002c9c:	4b21      	ldr	r3, [pc, #132]	@ (8002d24 <aialgo_print_model_structure+0xb4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4821      	ldr	r0, [pc, #132]	@ (8002d28 <aialgo_print_model_structure+0xb8>)
 8002ca2:	4798      	blx	r3
            AIPRINT(layer_ptr->layer_type->name);
 8002ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d24 <aialgo_print_model_structure+0xb4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	4610      	mov	r0, r2
 8002cb0:	4798      	blx	r3
            AIPRINT(aistring_print_model_structure_2);
 8002cb2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d24 <aialgo_print_model_structure+0xb4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	481d      	ldr	r0, [pc, #116]	@ (8002d2c <aialgo_print_model_structure+0xbc>)
 8002cb8:	4798      	blx	r3
            AIPRINT(layer_ptr->result.dtype->name);
 8002cba:	4b1a      	ldr	r3, [pc, #104]	@ (8002d24 <aialgo_print_model_structure+0xb4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	69d2      	ldr	r2, [r2, #28]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4798      	blx	r3
            AIPRINT(aistring_print_model_structure_3);
 8002cc8:	4b16      	ldr	r3, [pc, #88]	@ (8002d24 <aialgo_print_model_structure+0xb4>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4818      	ldr	r0, [pc, #96]	@ (8002d30 <aialgo_print_model_structure+0xc0>)
 8002cce:	4798      	blx	r3
            layer_ptr->layer_type->print_specs(layer_ptr);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	68b8      	ldr	r0, [r7, #8]
 8002cd8:	4798      	blx	r3
            AIPRINT(aistring_print_model_structure_4);
 8002cda:	4b12      	ldr	r3, [pc, #72]	@ (8002d24 <aialgo_print_model_structure+0xb4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4815      	ldr	r0, [pc, #84]	@ (8002d34 <aialgo_print_model_structure+0xc4>)
 8002ce0:	4798      	blx	r3
 8002ce2:	e00a      	b.n	8002cfa <aialgo_print_model_structure+0x8a>
        } else {
            AIPRINT_INT("%4d", i + 1);
 8002ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8002d1c <aialgo_print_model_structure+0xac>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	3201      	adds	r2, #1
 8002cec:	4611      	mov	r1, r2
 8002cee:	480c      	ldr	r0, [pc, #48]	@ (8002d20 <aialgo_print_model_structure+0xb0>)
 8002cf0:	4798      	blx	r3
            AIPRINT(aistring_print_model_structure_5);
 8002cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8002d24 <aialgo_print_model_structure+0xb4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4810      	ldr	r0, [pc, #64]	@ (8002d38 <aialgo_print_model_structure+0xc8>)
 8002cf8:	4798      	blx	r3
        }
        layer_ptr = layer_ptr->output_layer;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < model->layer_count; i++){
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	3301      	adds	r3, #1
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	891b      	ldrh	r3, [r3, #8]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	dbb8      	blt.n	8002c84 <aialgo_print_model_structure+0x14>
	}
	return;
 8002d12:	bf00      	nop
}
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	2000054c 	.word	0x2000054c
 8002d20:	0800bfb8 	.word	0x0800bfb8
 8002d24:	20000548 	.word	0x20000548
 8002d28:	0800c760 	.word	0x0800c760
 8002d2c:	0800c764 	.word	0x0800c764
 8002d30:	0800c768 	.word	0x0800c768
 8002d34:	0800c770 	.word	0x0800c770
 8002d38:	0800c774 	.word	0x0800c774

08002d3c <ailayer_dense>:
#endif
};
const aicore_layertype_t *ailayer_dense_type = &ailayer_dense_type_s;

ailayer_t *ailayer_dense(ailayer_dense_t *layer, ailayer_t *input_layer)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
    layer->base.layer_type = ailayer_dense_type;
 8002d46:	4b54      	ldr	r3, [pc, #336]	@ (8002e98 <ailayer_dense+0x15c>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	601a      	str	r2, [r3, #0]

    layer->base.settings = 0;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
    AILAYER_SETTINGS_SET(layer->base.settings, 0b1, AILAYER_SETTINGS_TRAINABLE, TRUE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f043 0202 	orr.w	r2, r3, #2
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
    AILAYER_SETTINGS_SET(layer->base.settings, 0b1, AILAYER_SETTINGS_NO_INPUT_GRADIENT, FALSE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f023 0208 	bic.w	r2, r3, #8
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	609a      	str	r2, [r3, #8]

	layer->base.input_layer = input_layer;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	60da      	str	r2, [r3, #12]
    layer->base.output_layer = 0;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	611a      	str	r2, [r3, #16]
	input_layer->output_layer = &(layer->base);
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	611a      	str	r2, [r3, #16]

	layer->base.layer_configuration = layer;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	605a      	str	r2, [r3, #4]
	layer->base.result.dim = 2;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 2020 	strb.w	r2, [r3, #32]
	layer->base.result.shape = layer->result_shape;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f103 02e4 	add.w	r2, r3, #228	@ 0xe4
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	625a      	str	r2, [r3, #36]	@ 0x24
	layer->base.result.shape[1] = layer->neurons;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	3302      	adds	r3, #2
 8002da2:	b292      	uxth	r2, r2
 8002da4:	801a      	strh	r2, [r3, #0]

	layer->base.deltas.dim = 2;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2202      	movs	r2, #2
 8002daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	layer->base.deltas.shape = input_layer->result.shape;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	645a      	str	r2, [r3, #68]	@ 0x44

	layer->weights.dim = 2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2202      	movs	r2, #2
 8002dba:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
	layer->weights.shape = layer->weights_shape;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	layer->weights.shape[0] = input_layer->result.shape[1];
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd4:	8852      	ldrh	r2, [r2, #2]
 8002dd6:	801a      	strh	r2, [r3, #0]
	layer->weights.shape[1] = layer->neurons;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de4:	3302      	adds	r3, #2
 8002de6:	b292      	uxth	r2, r2
 8002de8:	801a      	strh	r2, [r3, #0]

	layer->bias.dim = 1;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
	layer->bias.shape = layer->bias_shape;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f103 02b4 	add.w	r2, r3, #180	@ 0xb4
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	layer->bias.shape[0] = layer->neurons;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002e0a:	b292      	uxth	r2, r2
 8002e0c:	801a      	strh	r2, [r3, #0]

	layer->base.forward = ailayer_dense_forward;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a22      	ldr	r2, [pc, #136]	@ (8002e9c <ailayer_dense+0x160>)
 8002e12:	639a      	str	r2, [r3, #56]	@ 0x38
	layer->base.backward = ailayer_dense_backward;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a22      	ldr	r2, [pc, #136]	@ (8002ea0 <ailayer_dense+0x164>)
 8002e18:	661a      	str	r2, [r3, #96]	@ 0x60

	layer->base.calc_result_shape = ailayer_dense_calc_result_shape;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a21      	ldr	r2, [pc, #132]	@ (8002ea4 <ailayer_dense+0x168>)
 8002e1e:	631a      	str	r2, [r3, #48]	@ 0x30
	layer->base.sizeof_paramem = ailayer_dense_sizeof_paramem;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a21      	ldr	r2, [pc, #132]	@ (8002ea8 <ailayer_dense+0x16c>)
 8002e24:	665a      	str	r2, [r3, #100]	@ 0x64
	layer->base.set_paramem = ailayer_dense_set_paramem;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a20      	ldr	r2, [pc, #128]	@ (8002eac <ailayer_dense+0x170>)
 8002e2a:	669a      	str	r2, [r3, #104]	@ 0x68
	layer->base.sizeof_trainmem = ailayer_dense_sizeof_trainmem;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a20      	ldr	r2, [pc, #128]	@ (8002eb0 <ailayer_dense+0x174>)
 8002e30:	67da      	str	r2, [r3, #124]	@ 0x7c
	layer->base.set_trainmem = ailayer_dense_set_trainmem;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a1f      	ldr	r2, [pc, #124]	@ (8002eb4 <ailayer_dense+0x178>)
 8002e36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	layer->base.sizeof_fwdmem = 0;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	671a      	str	r2, [r3, #112]	@ 0x70
	layer->base.sizeof_bwdmem = ailayer_dense_sizeof_bwdmem;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a1d      	ldr	r2, [pc, #116]	@ (8002eb8 <ailayer_dense+0x17c>)
 8002e44:	675a      	str	r2, [r3, #116]	@ 0x74


	layer->base.trainable_params_count = 2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	layer->base.trainable_params = layer->trainable_params;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	655a      	str	r2, [r3, #84]	@ 0x54
	layer->base.gradients = layer->gradients;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	659a      	str	r2, [r3, #88]	@ 0x58
	layer->base.optimem = layer->optimem;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	65da      	str	r2, [r3, #92]	@ 0x5c

	layer->trainable_params[0] = &layer->weights;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	layer->trainable_params[1] = &layer->bias;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f103 029c 	add.w	r2, r3, #156	@ 0x9c
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	ailayer_dense_calc_result_shape(&layer->base);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 f8a6 	bl	8002fd8 <ailayer_dense_calc_result_shape>

	return &layer->base;
 8002e8c:	687b      	ldr	r3, [r7, #4]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	2000055c 	.word	0x2000055c
 8002e9c:	08002ebd 	.word	0x08002ebd
 8002ea0:	08002efd 	.word	0x08002efd
 8002ea4:	08002fd9 	.word	0x08002fd9
 8002ea8:	08003059 	.word	0x08003059
 8002eac:	08003113 	.word	0x08003113
 8002eb0:	080031db 	.word	0x080031db
 8002eb4:	08003281 	.word	0x08003281
 8002eb8:	08003011 	.word	0x08003011

08002ebc <ailayer_dense_forward>:

void ailayer_dense_forward(ailayer_t *self)
{
 8002ebc:	b590      	push	{r4, r7, lr}
 8002ebe:	b089      	sub	sp, #36	@ 0x24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
	aitensor_t *x_in = &(self->input_layer->result);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	331c      	adds	r3, #28
 8002eca:	61fb      	str	r3, [r7, #28]
	aitensor_t *x_out = &(self->result);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	331c      	adds	r3, #28
 8002ed0:	61bb      	str	r3, [r7, #24]
	ailayer_dense_t *layer = (ailayer_dense_t *)(self->layer_configuration);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	617b      	str	r3, [r7, #20]
	aitensor_t *weights = &(layer->weights);
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	3388      	adds	r3, #136	@ 0x88
 8002edc:	613b      	str	r3, [r7, #16]
	aitensor_t *bias = &(layer->bias);
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	339c      	adds	r3, #156	@ 0x9c
 8002ee2:	60fb      	str	r3, [r7, #12]

	// z = x * W + b
	layer->linear(x_in, weights, bias, x_out);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f8d3 40d0 	ldr.w	r4, [r3, #208]	@ 0xd0
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	6939      	ldr	r1, [r7, #16]
 8002ef0:	69f8      	ldr	r0, [r7, #28]
 8002ef2:	47a0      	blx	r4

	return;
 8002ef4:	bf00      	nop
}
 8002ef6:	3724      	adds	r7, #36	@ 0x24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd90      	pop	{r4, r7, pc}

08002efc <ailayer_dense_backward>:


void ailayer_dense_backward(ailayer_t *self)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08e      	sub	sp, #56	@ 0x38
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	aitensor_t *delta_in = &(self->deltas);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	333c      	adds	r3, #60	@ 0x3c
 8002f08:	637b      	str	r3, [r7, #52]	@ 0x34
	aitensor_t *delta_out = &(self->output_layer->deltas);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	333c      	adds	r3, #60	@ 0x3c
 8002f10:	633b      	str	r3, [r7, #48]	@ 0x30
	aitensor_t *x_in = &(self->input_layer->result);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	331c      	adds	r3, #28
 8002f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
	ailayer_dense_t *layer = (ailayer_dense_t *)(self->layer_configuration);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
	aitensor_t *weights = &(layer->weights);
 8002f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f22:	3388      	adds	r3, #136	@ 0x88
 8002f24:	627b      	str	r3, [r7, #36]	@ 0x24
	aitensor_t *d_weights = layer->gradients[0];
 8002f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002f2c:	623b      	str	r3, [r7, #32]
	aitensor_t *d_bias = layer->gradients[1];
 8002f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f30:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002f34:	61fb      	str	r3, [r7, #28]

	aitensor_t temp_result;
	temp_result.data = self->tempmem;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f3a:	61bb      	str	r3, [r7, #24]

	if(AILAYER_SETTINGS_IS(self->settings, 0b1, AILAYER_SETTINGS_TRAINABLE)){
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d035      	beq.n	8002fb4 <ailayer_dense_backward+0xb8>

        // d_weights += x_in^T * delta_out
        temp_result.dim             = 2;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	733b      	strb	r3, [r7, #12]
        temp_result.shape           = d_weights->shape;
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	613b      	str	r3, [r7, #16]
        temp_result.dtype           = d_weights->dtype;
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60bb      	str	r3, [r7, #8]
        temp_result.tensor_params   = d_weights->tensor_params;
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	617b      	str	r3, [r7, #20]
        layer->mat_mul_at(x_in, delta_out, &temp_result);
 8002f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f60:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002f64:	f107 0208 	add.w	r2, r7, #8
 8002f68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002f6c:	4798      	blx	r3
        layer->tensor_add(d_weights, &temp_result, d_weights);
 8002f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f70:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002f74:	f107 0108 	add.w	r1, r7, #8
 8002f78:	6a3a      	ldr	r2, [r7, #32]
 8002f7a:	6a38      	ldr	r0, [r7, #32]
 8002f7c:	4798      	blx	r3

        // d_bias_j += sum_i(delta_out_ij)
        temp_result.dim             = 1;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	733b      	strb	r3, [r7, #12]
        temp_result.shape           = d_bias->shape;
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	613b      	str	r3, [r7, #16]
        temp_result.dtype           = d_bias->dtype;
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60bb      	str	r3, [r7, #8]
        temp_result.tensor_params   = d_bias->tensor_params;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	617b      	str	r3, [r7, #20]
        layer->sum_channelwise(delta_out, 1, &temp_result);
 8002f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f9a:	f107 0208 	add.w	r2, r7, #8
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fa2:	4798      	blx	r3
        layer->tensor_add(d_bias, &temp_result, d_bias);
 8002fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002faa:	f107 0108 	add.w	r1, r7, #8
 8002fae:	69fa      	ldr	r2, [r7, #28]
 8002fb0:	69f8      	ldr	r0, [r7, #28]
 8002fb2:	4798      	blx	r3
	}

	if(!AILAYER_SETTINGS_IS(self->settings, 0b1, AILAYER_SETTINGS_NO_INPUT_GRADIENT)){
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d107      	bne.n	8002fd0 <ailayer_dense_backward+0xd4>
        // Calculate delta for next layer. Do not before calculating gradients!!! May override x_in!!!
        // d_in = delta_out * W^T
        layer->mat_mul_bt(delta_out, weights, delta_in);
 8002fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002fc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fcc:	4798      	blx	r3
	}

	return;
 8002fce:	bf00      	nop
 8002fd0:	bf00      	nop
}
 8002fd2:	3738      	adds	r7, #56	@ 0x38
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <ailayer_dense_calc_result_shape>:

void ailayer_dense_calc_result_shape(ailayer_t *self)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
	ailayer_dense_t *layer = (ailayer_dense_t *)(self->layer_configuration);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	60fb      	str	r3, [r7, #12]

	self->result.shape[0] = self->input_layer->result.shape[0];
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff0:	8812      	ldrh	r2, [r2, #0]
 8002ff2:	801a      	strh	r2, [r3, #0]
	self->result.shape[1] = layer->neurons;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffe:	3302      	adds	r3, #2
 8003000:	b292      	uxth	r2, r2
 8003002:	801a      	strh	r2, [r3, #0]

	return;
 8003004:	bf00      	nop
}
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <ailayer_dense_sizeof_bwdmem>:

uint32_t ailayer_dense_sizeof_bwdmem(const ailayer_t *self)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
	ailayer_dense_t *layer = (ailayer_dense_t *)(self->layer_configuration);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	617b      	str	r3, [r7, #20]
    uint32_t d_weights_mem, d_bias_mem;

    if(AILAYER_SETTINGS_IS(self->settings, 0b1, AILAYER_SETTINGS_TRAINABLE)){
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d011      	beq.n	800304e <ailayer_dense_sizeof_bwdmem+0x3e>
        // Shared memory buffer for d_weights and d_bias
        d_weights_mem = aimath_sizeof_tensor_data(&layer->weights);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	3388      	adds	r3, #136	@ 0x88
 800302e:	4618      	mov	r0, r3
 8003030:	f000 fc33 	bl	800389a <aimath_sizeof_tensor_data>
 8003034:	6138      	str	r0, [r7, #16]
        d_bias_mem = aimath_sizeof_tensor_data(&layer->bias);
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	339c      	adds	r3, #156	@ 0x9c
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fc2d 	bl	800389a <aimath_sizeof_tensor_data>
 8003040:	60f8      	str	r0, [r7, #12]
        return d_weights_mem > d_bias_mem ? d_weights_mem : d_bias_mem;
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4293      	cmp	r3, r2
 8003048:	bf38      	it	cc
 800304a:	4613      	movcc	r3, r2
 800304c:	e000      	b.n	8003050 <ailayer_dense_sizeof_bwdmem+0x40>
    } else {
        // No temp memory is needed
        return 0;
 800304e:	2300      	movs	r3, #0
    }
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <ailayer_dense_sizeof_paramem>:

uint32_t ailayer_dense_sizeof_paramem(const ailayer_t *self)
{
 8003058:	b590      	push	{r4, r7, lr}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
	uint32_t memory = 0;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]
	ailayer_dense_t *layer = (ailayer_dense_t *)(self->layer_configuration);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	60bb      	str	r3, [r7, #8]

	// Weights
	memory += layer->weights.dtype->tensor_params_size;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4413      	add	r3, r2
 8003076:	60fb      	str	r3, [r7, #12]
    AIFES_ALIGN_INTEGER(memory, AIFES_MEMORY_ALIGNMENT);
 8003078:	e002      	b.n	8003080 <ailayer_dense_sizeof_paramem+0x28>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	3301      	adds	r3, #1
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f7      	bne.n	800307a <ailayer_dense_sizeof_paramem+0x22>
	memory += self->input_layer->result.shape[1] * layer->neurons * aimath_sizeof_dtype(layer->weights.dtype); // data
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003090:	3302      	adds	r3, #2
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	461a      	mov	r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800309c:	fb03 f402 	mul.w	r4, r3, r2
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fbeb 	bl	8003882 <aimath_sizeof_dtype>
 80030ac:	4603      	mov	r3, r0
 80030ae:	fb04 f303 	mul.w	r3, r4, r3
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4413      	add	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]
    AIFES_ALIGN_INTEGER(memory, AIFES_MEMORY_ALIGNMENT);
 80030b8:	e002      	b.n	80030c0 <ailayer_dense_sizeof_paramem+0x68>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	3301      	adds	r3, #1
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f7      	bne.n	80030ba <ailayer_dense_sizeof_paramem+0x62>

	// Bias
	memory += layer->bias.dtype->tensor_params_size;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	4413      	add	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
    AIFES_ALIGN_INTEGER(memory, AIFES_MEMORY_ALIGNMENT);
 80030d8:	e002      	b.n	80030e0 <ailayer_dense_sizeof_paramem+0x88>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	3301      	adds	r3, #1
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f7      	bne.n	80030da <ailayer_dense_sizeof_paramem+0x82>
	memory += layer->neurons * aimath_sizeof_dtype(layer->bias.dtype); // data
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fbc3 	bl	8003882 <aimath_sizeof_dtype>
 80030fc:	4603      	mov	r3, r0
 80030fe:	fb04 f303 	mul.w	r3, r4, r3
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	4413      	add	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]
	return memory;
 8003108:	68fb      	ldr	r3, [r7, #12]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	bd90      	pop	{r4, r7, pc}

08003112 <ailayer_dense_set_paramem>:

void ailayer_dense_set_paramem(ailayer_t *self, void *memory_ptr)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
	uint32_t address_counter = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
	ailayer_dense_t *layer = (ailayer_dense_t *) (self->layer_configuration);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	60bb      	str	r3, [r7, #8]

	layer->weights.tensor_params = memory_ptr + address_counter;
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	441a      	add	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	address_counter += layer->weights.dtype->tensor_params_size;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4413      	add	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]
    AIFES_ALIGN_INTEGER(address_counter, AIFES_MEMORY_ALIGNMENT);
 8003140:	e002      	b.n	8003148 <ailayer_dense_set_paramem+0x36>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	3301      	adds	r3, #1
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f7      	bne.n	8003142 <ailayer_dense_set_paramem+0x30>

	layer->weights.data = memory_ptr + address_counter;
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	441a      	add	r2, r3
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	address_counter += aimath_sizeof_tensor_data(&(layer->weights));
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	3388      	adds	r3, #136	@ 0x88
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fb99 	bl	800389a <aimath_sizeof_tensor_data>
 8003168:	4602      	mov	r2, r0
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4413      	add	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
    AIFES_ALIGN_INTEGER(address_counter, AIFES_MEMORY_ALIGNMENT);
 8003170:	e002      	b.n	8003178 <ailayer_dense_set_paramem+0x66>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	3301      	adds	r3, #1
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f7      	bne.n	8003172 <ailayer_dense_set_paramem+0x60>

	layer->bias.tensor_params = memory_ptr + address_counter;
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	441a      	add	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	address_counter += layer->bias.dtype->tensor_params_size;
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4413      	add	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]
    AIFES_ALIGN_INTEGER(address_counter, AIFES_MEMORY_ALIGNMENT);
 800319c:	e002      	b.n	80031a4 <ailayer_dense_set_paramem+0x92>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	3301      	adds	r3, #1
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f7      	bne.n	800319e <ailayer_dense_set_paramem+0x8c>

	layer->bias.data = memory_ptr + address_counter;
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	441a      	add	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	//address_counter += aimath_sizeof_tensor_data(&(layer->bias));

	layer->trainable_params[0] = &(layer->weights);
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	layer->trainable_params[1] = &(layer->bias);
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f103 029c 	add.w	r2, r3, #156	@ 0x9c
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	return;
 80031d2:	bf00      	nop
}
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <ailayer_dense_sizeof_trainmem>:

uint32_t ailayer_dense_sizeof_trainmem(const ailayer_t *self)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
	uint32_t memory = 0;
 80031e2:	2300      	movs	r3, #0
 80031e4:	60fb      	str	r3, [r7, #12]
	ailayer_dense_t *layer = (ailayer_dense_t *)(self->layer_configuration);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	60bb      	str	r3, [r7, #8]

	// Weights
	memory += sizeof(aitensor_t);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	3314      	adds	r3, #20
 80031f0:	60fb      	str	r3, [r7, #12]
	memory += aimath_sizeof_tensor_data(&layer->weights);
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	3388      	adds	r3, #136	@ 0x88
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fb4f 	bl	800389a <aimath_sizeof_tensor_data>
 80031fc:	4602      	mov	r2, r0
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4413      	add	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]
    AIFES_ALIGN_INTEGER(memory, AIFES_MEMORY_ALIGNMENT);
 8003204:	e002      	b.n	800320c <ailayer_dense_sizeof_trainmem+0x32>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	3301      	adds	r3, #1
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f7      	bne.n	8003206 <ailayer_dense_sizeof_trainmem+0x2c>
	memory += aimath_sizeof_tensor_params(&layer->weights);
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	3388      	adds	r3, #136	@ 0x88
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fb51 	bl	80038c2 <aimath_sizeof_tensor_params>
 8003220:	4602      	mov	r2, r0
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4413      	add	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]
    AIFES_ALIGN_INTEGER(memory, AIFES_MEMORY_ALIGNMENT);
 8003228:	e002      	b.n	8003230 <ailayer_dense_sizeof_trainmem+0x56>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	3301      	adds	r3, #1
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f7      	bne.n	800322a <ailayer_dense_sizeof_trainmem+0x50>
	// Bias
	memory += sizeof(aitensor_t);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	3314      	adds	r3, #20
 800323e:	60fb      	str	r3, [r7, #12]
	memory += aimath_sizeof_tensor_data(&layer->bias);
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	339c      	adds	r3, #156	@ 0x9c
 8003244:	4618      	mov	r0, r3
 8003246:	f000 fb28 	bl	800389a <aimath_sizeof_tensor_data>
 800324a:	4602      	mov	r2, r0
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]
    AIFES_ALIGN_INTEGER(memory, AIFES_MEMORY_ALIGNMENT);
 8003252:	e002      	b.n	800325a <ailayer_dense_sizeof_trainmem+0x80>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	3301      	adds	r3, #1
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f7      	bne.n	8003254 <ailayer_dense_sizeof_trainmem+0x7a>
	memory += aimath_sizeof_tensor_params(&layer->bias);
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	339c      	adds	r3, #156	@ 0x9c
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fb2a 	bl	80038c2 <aimath_sizeof_tensor_params>
 800326e:	4602      	mov	r2, r0
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4413      	add	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
	return memory;
 8003276:	68fb      	ldr	r3, [r7, #12]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <ailayer_dense_set_trainmem>:

void ailayer_dense_set_trainmem(ailayer_t *self, void *memory_ptr)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
	uint32_t address_counter = 0;
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
	ailayer_dense_t *layer = (ailayer_dense_t *) (self->layer_configuration);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	60bb      	str	r3, [r7, #8]

	// Weights gradients in gradients[0]
	self->gradients[0] = memory_ptr;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	601a      	str	r2, [r3, #0]
	address_counter += sizeof(aitensor_t);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	3314      	adds	r3, #20
 80032a0:	60fb      	str	r3, [r7, #12]
	self->gradients[0]->data = memory_ptr + address_counter;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6839      	ldr	r1, [r7, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	440a      	add	r2, r1
 80032ae:	611a      	str	r2, [r3, #16]
	self->gradients[0]->dtype = layer->weights.dtype;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80032bc:	601a      	str	r2, [r3, #0]
	self->gradients[0]->dim = 2;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2202      	movs	r2, #2
 80032c6:	711a      	strb	r2, [r3, #4]
	self->gradients[0]->shape = layer->weights.shape;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	f8d2 2090 	ldr.w	r2, [r2, #144]	@ 0x90
 80032d4:	609a      	str	r2, [r3, #8]
	address_counter += aimath_sizeof_tensor_data(layer->gradients[0]);
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fadc 	bl	800389a <aimath_sizeof_tensor_data>
 80032e2:	4602      	mov	r2, r0
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4413      	add	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
    AIFES_ALIGN_INTEGER(address_counter, AIFES_MEMORY_ALIGNMENT);
 80032ea:	e002      	b.n	80032f2 <ailayer_dense_set_trainmem+0x72>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	3301      	adds	r3, #1
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1f7      	bne.n	80032ec <ailayer_dense_set_trainmem+0x6c>
	self->gradients[0]->tensor_params = memory_ptr + address_counter;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6839      	ldr	r1, [r7, #0]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	440a      	add	r2, r1
 8003308:	60da      	str	r2, [r3, #12]
	address_counter += aimath_sizeof_tensor_params(layer->gradients[0]);
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003310:	4618      	mov	r0, r3
 8003312:	f000 fad6 	bl	80038c2 <aimath_sizeof_tensor_params>
 8003316:	4602      	mov	r2, r0
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4413      	add	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
    AIFES_ALIGN_INTEGER(address_counter, AIFES_MEMORY_ALIGNMENT);
 800331e:	e002      	b.n	8003326 <ailayer_dense_set_trainmem+0xa6>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	3301      	adds	r3, #1
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1f7      	bne.n	8003320 <ailayer_dense_set_trainmem+0xa0>

	// Bias gradients in gradients[1]
	self->gradients[1] = memory_ptr + address_counter;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003334:	3304      	adds	r3, #4
 8003336:	6839      	ldr	r1, [r7, #0]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	440a      	add	r2, r1
 800333c:	601a      	str	r2, [r3, #0]
	address_counter += sizeof(aitensor_t);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	3314      	adds	r3, #20
 8003342:	60fb      	str	r3, [r7, #12]
	self->gradients[1]->data = memory_ptr + address_counter;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003348:	3304      	adds	r3, #4
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6839      	ldr	r1, [r7, #0]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	440a      	add	r2, r1
 8003352:	611a      	str	r2, [r3, #16]
	self->gradients[1]->dtype = layer->bias.dtype;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003358:	3304      	adds	r3, #4
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	f8d2 209c 	ldr.w	r2, [r2, #156]	@ 0x9c
 8003362:	601a      	str	r2, [r3, #0]
	self->gradients[1]->dim = 1;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003368:	3304      	adds	r3, #4
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2201      	movs	r2, #1
 800336e:	711a      	strb	r2, [r3, #4]
	self->gradients[1]->shape = layer->bias.shape;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003374:	3304      	adds	r3, #4
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 800337e:	609a      	str	r2, [r3, #8]
	address_counter += aimath_sizeof_tensor_data(layer->gradients[1]);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fa87 	bl	800389a <aimath_sizeof_tensor_data>
 800338c:	4602      	mov	r2, r0
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4413      	add	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]
    AIFES_ALIGN_INTEGER(address_counter, AIFES_MEMORY_ALIGNMENT);
 8003394:	e002      	b.n	800339c <ailayer_dense_set_trainmem+0x11c>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	3301      	adds	r3, #1
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f7      	bne.n	8003396 <ailayer_dense_set_trainmem+0x116>
	self->gradients[1]->tensor_params = memory_ptr + address_counter;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033aa:	3304      	adds	r3, #4
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6839      	ldr	r1, [r7, #0]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	440a      	add	r2, r1
 80033b4:	60da      	str	r2, [r3, #12]
	address_counter += aimath_sizeof_tensor_params(layer->gradients[1]);
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fa80 	bl	80038c2 <aimath_sizeof_tensor_params>
 80033c2:	4602      	mov	r2, r0
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4413      	add	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

	return;
 80033ca:	bf00      	nop
}
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <ailayer_dense_print_specs>:
const char aistring_print_layer_specs_dense_1[]="neurons: ";

AISTRING_STORAGE_WRAPPER(aistring_print_layer_specs_dense_1);

void ailayer_dense_print_specs(const ailayer_t *self)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
    ailayer_dense_t *layer = (ailayer_dense_t *)(self->layer_configuration);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	60fb      	str	r3, [r7, #12]

    AIPRINT(aistring_print_layer_specs_dense_1);
 80033e2:	4b08      	ldr	r3, [pc, #32]	@ (8003404 <ailayer_dense_print_specs+0x30>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4808      	ldr	r0, [pc, #32]	@ (8003408 <ailayer_dense_print_specs+0x34>)
 80033e8:	4798      	blx	r3
    AIPRINT_LONG_INT("%ld", (long int) layer->neurons);
 80033ea:	4b08      	ldr	r3, [pc, #32]	@ (800340c <ailayer_dense_print_specs+0x38>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 80033f4:	4611      	mov	r1, r2
 80033f6:	4806      	ldr	r0, [pc, #24]	@ (8003410 <ailayer_dense_print_specs+0x3c>)
 80033f8:	4798      	blx	r3
}
 80033fa:	bf00      	nop
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20000548 	.word	0x20000548
 8003408:	0800c7b0 	.word	0x0800c7b0
 800340c:	20000554 	.word	0x20000554
 8003410:	0800bfbc 	.word	0x0800bfbc

08003414 <ailayer_input>:
};
const aicore_layertype_t *ailayer_input_type = &ailayer_input_type_s;


ailayer_t *ailayer_input(ailayer_input_t *layer)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
    layer->base.layer_type = ailayer_input_type;
 800341c:	4b26      	ldr	r3, [pc, #152]	@ (80034b8 <ailayer_input+0xa4>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	601a      	str	r2, [r3, #0]

    layer->base.output_layer = 0;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	611a      	str	r2, [r3, #16]

    layer->base.settings = 0;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	609a      	str	r2, [r3, #8]
    AILAYER_SETTINGS_SET(layer->base.settings, 0b1, AILAYER_SETTINGS_TRAINABLE, FALSE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f023 0202 	bic.w	r2, r3, #2
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	609a      	str	r2, [r3, #8]
    AILAYER_SETTINGS_SET(layer->base.settings, 0b1, AILAYER_SETTINGS_NO_INPUT_GRADIENT, TRUE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f043 0208 	orr.w	r2, r3, #8
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	609a      	str	r2, [r3, #8]

	layer->base.layer_configuration = layer;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	605a      	str	r2, [r3, #4]
	layer->base.result.shape = layer->input_shape;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	625a      	str	r2, [r3, #36]	@ 0x24
	layer->base.result.dim = layer->input_dim;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f883 2020 	strb.w	r2, [r3, #32]

	layer->base.forward = ailayer_input_forward;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a15      	ldr	r2, [pc, #84]	@ (80034bc <ailayer_input+0xa8>)
 8003468:	639a      	str	r2, [r3, #56]	@ 0x38
	layer->base.backward = ailayer_input_backward;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a14      	ldr	r2, [pc, #80]	@ (80034c0 <ailayer_input+0xac>)
 800346e:	661a      	str	r2, [r3, #96]	@ 0x60

	layer->base.calc_result_shape = ailayer_input_calc_result_shape;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a14      	ldr	r2, [pc, #80]	@ (80034c4 <ailayer_input+0xb0>)
 8003474:	631a      	str	r2, [r3, #48]	@ 0x30
	layer->base.sizeof_paramem = 0;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	665a      	str	r2, [r3, #100]	@ 0x64
	layer->base.set_paramem = 0;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	669a      	str	r2, [r3, #104]	@ 0x68
	layer->base.sizeof_trainmem = 0;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	67da      	str	r2, [r3, #124]	@ 0x7c
	layer->base.set_trainmem = 0;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	layer->base.sizeof_fwdmem = 0;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	671a      	str	r2, [r3, #112]	@ 0x70
	layer->base.sizeof_bwdmem = 0;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	675a      	str	r2, [r3, #116]	@ 0x74

	layer->base.trainable_params_count = 0;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

	ailayer_input_calc_result_shape(&layer->base);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 f822 	bl	80034f0 <ailayer_input_calc_result_shape>

	return &layer->base;
 80034ac:	687b      	ldr	r3, [r7, #4]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000560 	.word	0x20000560
 80034bc:	080034c9 	.word	0x080034c9
 80034c0:	080034dd 	.word	0x080034dd
 80034c4:	080034f1 	.word	0x080034f1

080034c8 <ailayer_input_forward>:

void ailayer_input_forward(ailayer_t *self)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
	return;
 80034d0:	bf00      	nop
}
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <ailayer_input_backward>:

void ailayer_input_backward(ailayer_t *self)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
	return;
 80034e4:	bf00      	nop
}
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <ailayer_input_calc_result_shape>:

void ailayer_input_calc_result_shape(ailayer_t *self)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
	return;
 80034f8:	bf00      	nop
}
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <ailayer_input_print_specs>:
AISTRING_STORAGE_WRAPPER(aistring_print_layer_specs_input_2);
AISTRING_STORAGE_WRAPPER(aistring_print_layer_specs_input_3);
AISTRING_STORAGE_WRAPPER(aistring_print_layer_specs_input_4);

void ailayer_input_print_specs(const ailayer_t *self)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
    ailayer_input_t *self_casted = (ailayer_input_t *) self;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	60bb      	str	r3, [r7, #8]
    uint8_t i = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	73fb      	strb	r3, [r7, #15]

    AIPRINT(aistring_print_layer_specs_input_1);
 8003514:	4b1f      	ldr	r3, [pc, #124]	@ (8003594 <ailayer_input_print_specs+0x90>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	481f      	ldr	r0, [pc, #124]	@ (8003598 <ailayer_input_print_specs+0x94>)
 800351a:	4798      	blx	r3
    AIPRINT_UINT("%u", (unsigned int) self_casted->input_dim);
 800351c:	4b1f      	ldr	r3, [pc, #124]	@ (800359c <ailayer_input_print_specs+0x98>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8003526:	4611      	mov	r1, r2
 8003528:	481d      	ldr	r0, [pc, #116]	@ (80035a0 <ailayer_input_print_specs+0x9c>)
 800352a:	4798      	blx	r3
    AIPRINT(aistring_print_layer_specs_input_2);
 800352c:	4b19      	ldr	r3, [pc, #100]	@ (8003594 <ailayer_input_print_specs+0x90>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	481c      	ldr	r0, [pc, #112]	@ (80035a4 <ailayer_input_print_specs+0xa0>)
 8003532:	4798      	blx	r3
    AIPRINT_LONG_INT("%ld", (long int) self_casted->input_shape[i]);
 8003534:	4b1c      	ldr	r3, [pc, #112]	@ (80035a8 <ailayer_input_print_specs+0xa4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 800353e:	7bfa      	ldrb	r2, [r7, #15]
 8003540:	0052      	lsls	r2, r2, #1
 8003542:	440a      	add	r2, r1
 8003544:	8812      	ldrh	r2, [r2, #0]
 8003546:	4611      	mov	r1, r2
 8003548:	4818      	ldr	r0, [pc, #96]	@ (80035ac <ailayer_input_print_specs+0xa8>)
 800354a:	4798      	blx	r3
    for(i = 1; i < self_casted->input_dim; i++){
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
 8003550:	e012      	b.n	8003578 <ailayer_input_print_specs+0x74>
        AIPRINT(aistring_print_layer_specs_input_3);
 8003552:	4b10      	ldr	r3, [pc, #64]	@ (8003594 <ailayer_input_print_specs+0x90>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4816      	ldr	r0, [pc, #88]	@ (80035b0 <ailayer_input_print_specs+0xac>)
 8003558:	4798      	blx	r3
        AIPRINT_LONG_INT("%ld", (long int) self_casted->input_shape[i]);
 800355a:	4b13      	ldr	r3, [pc, #76]	@ (80035a8 <ailayer_input_print_specs+0xa4>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 8003564:	7bfa      	ldrb	r2, [r7, #15]
 8003566:	0052      	lsls	r2, r2, #1
 8003568:	440a      	add	r2, r1
 800356a:	8812      	ldrh	r2, [r2, #0]
 800356c:	4611      	mov	r1, r2
 800356e:	480f      	ldr	r0, [pc, #60]	@ (80035ac <ailayer_input_print_specs+0xa8>)
 8003570:	4798      	blx	r3
    for(i = 1; i < self_casted->input_dim; i++){
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	3301      	adds	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800357e:	7bfa      	ldrb	r2, [r7, #15]
 8003580:	429a      	cmp	r2, r3
 8003582:	d3e6      	bcc.n	8003552 <ailayer_input_print_specs+0x4e>
    }
    AIPRINT(aistring_print_layer_specs_input_4);
 8003584:	4b03      	ldr	r3, [pc, #12]	@ (8003594 <ailayer_input_print_specs+0x90>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	480a      	ldr	r0, [pc, #40]	@ (80035b4 <ailayer_input_print_specs+0xb0>)
 800358a:	4798      	blx	r3
    return;
 800358c:	bf00      	nop
}
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	20000548 	.word	0x20000548
 8003598:	0800c7cc 	.word	0x0800c7cc
 800359c:	20000550 	.word	0x20000550
 80035a0:	0800bfc0 	.word	0x0800bfc0
 80035a4:	0800c7d4 	.word	0x0800c7d4
 80035a8:	20000554 	.word	0x20000554
 80035ac:	0800bfc4 	.word	0x0800bfc4
 80035b0:	0800c7e0 	.word	0x0800c7e0
 80035b4:	0800c7e4 	.word	0x0800c7e4

080035b8 <ailayer_relu>:
};
const aicore_layertype_t *ailayer_relu_type = &ailayer_relu_type_s;


ailayer_t *ailayer_relu(ailayer_relu_t *layer, ailayer_t *input_layer)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
    layer->base.layer_type = ailayer_relu_type;
 80035c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003678 <ailayer_relu+0xc0>)
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	601a      	str	r2, [r3, #0]

    layer->base.settings = 0;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	609a      	str	r2, [r3, #8]
    AILAYER_SETTINGS_SET(layer->base.settings, 0b1, AILAYER_SETTINGS_TRAINABLE, FALSE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f023 0202 	bic.w	r2, r3, #2
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	609a      	str	r2, [r3, #8]
    AILAYER_SETTINGS_SET(layer->base.settings, 0b1, AILAYER_SETTINGS_NO_INPUT_GRADIENT, FALSE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f023 0208 	bic.w	r2, r3, #8
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	609a      	str	r2, [r3, #8]

	layer->base.input_layer = input_layer;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	60da      	str	r2, [r3, #12]
    layer->base.output_layer = 0;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	611a      	str	r2, [r3, #16]
	input_layer->output_layer = &(layer->base);
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	611a      	str	r2, [r3, #16]

	layer->base.layer_configuration = layer;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	605a      	str	r2, [r3, #4]
	layer->base.result.shape = input_layer->result.shape;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	625a      	str	r2, [r3, #36]	@ 0x24
	layer->base.result.dim = input_layer->result.dim;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f883 2020 	strb.w	r2, [r3, #32]

	layer->base.deltas.dim = 2;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	layer->base.deltas.shape = layer->base.result.shape;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	645a      	str	r2, [r3, #68]	@ 0x44

	layer->base.forward = ailayer_relu_forward;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a15      	ldr	r2, [pc, #84]	@ (800367c <ailayer_relu+0xc4>)
 8003628:	639a      	str	r2, [r3, #56]	@ 0x38
	layer->base.backward = ailayer_relu_backward;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a14      	ldr	r2, [pc, #80]	@ (8003680 <ailayer_relu+0xc8>)
 800362e:	661a      	str	r2, [r3, #96]	@ 0x60

	layer->base.calc_result_shape = ailayer_relu_calc_result_shape;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a14      	ldr	r2, [pc, #80]	@ (8003684 <ailayer_relu+0xcc>)
 8003634:	631a      	str	r2, [r3, #48]	@ 0x30
	layer->base.sizeof_paramem = 0;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	665a      	str	r2, [r3, #100]	@ 0x64
	layer->base.set_paramem = 0;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	669a      	str	r2, [r3, #104]	@ 0x68
	layer->base.sizeof_trainmem = 0;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	67da      	str	r2, [r3, #124]	@ 0x7c
	layer->base.set_trainmem = 0;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	layer->base.sizeof_fwdmem = 0;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	671a      	str	r2, [r3, #112]	@ 0x70
	layer->base.sizeof_bwdmem = 0;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	675a      	str	r2, [r3, #116]	@ 0x74

	layer->base.trainable_params_count = 0;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

	ailayer_relu_calc_result_shape(&layer->base);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4618      	mov	r0, r3
 8003668:	f000 f849 	bl	80036fe <ailayer_relu_calc_result_shape>

	return &(layer->base);
 800366c:	687b      	ldr	r3, [r7, #4]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20000564 	.word	0x20000564
 800367c:	08003689 	.word	0x08003689
 8003680:	080036b9 	.word	0x080036b9
 8003684:	080036ff 	.word	0x080036ff

08003688 <ailayer_relu_forward>:

void ailayer_relu_forward(ailayer_t *self)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
	ailayer_relu_t *layer = (ailayer_relu_t *)(self->layer_configuration);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	617b      	str	r3, [r7, #20]
	aitensor_t *x_in = &(self->input_layer->result);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	331c      	adds	r3, #28
 800369c:	613b      	str	r3, [r7, #16]
	aitensor_t *x_out = &(self->result);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	331c      	adds	r3, #28
 80036a2:	60fb      	str	r3, [r7, #12]

	layer->relu(x_in, x_out);
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036aa:	68f9      	ldr	r1, [r7, #12]
 80036ac:	6938      	ldr	r0, [r7, #16]
 80036ae:	4798      	blx	r3
	return;
 80036b0:	bf00      	nop
}
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <ailayer_relu_backward>:


void ailayer_relu_backward(ailayer_t *self)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
	ailayer_relu_t *layer = (ailayer_relu_t *)(self->layer_configuration);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	617b      	str	r3, [r7, #20]
	aitensor_t *delta_in = &(self->deltas);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	333c      	adds	r3, #60	@ 0x3c
 80036ca:	613b      	str	r3, [r7, #16]
	aitensor_t *delta_out = &(self->output_layer->deltas);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	333c      	adds	r3, #60	@ 0x3c
 80036d2:	60fb      	str	r3, [r7, #12]
	aitensor_t *x_in = &(self->input_layer->result);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	331c      	adds	r3, #28
 80036da:	60bb      	str	r3, [r7, #8]

	// delta_in = delta_out .* relu'(x_in)
	layer->d_relu(x_in, delta_in);
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e2:	6939      	ldr	r1, [r7, #16]
 80036e4:	68b8      	ldr	r0, [r7, #8]
 80036e6:	4798      	blx	r3
	layer->multiply(delta_in, delta_out, delta_in);
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	68f9      	ldr	r1, [r7, #12]
 80036f2:	6938      	ldr	r0, [r7, #16]
 80036f4:	4798      	blx	r3
	return;
 80036f6:	bf00      	nop
}
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <ailayer_relu_calc_result_shape>:

void ailayer_relu_calc_result_shape(ailayer_t *self)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
	// Unused: Shape is already defined (Pointer)
	return;
 8003706:	bf00      	nop
}
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <ailayer_relu_print_specs>:

#ifdef AIDEBUG_PRINT_MODULE_SPECS
void ailayer_relu_print_specs(const ailayer_t *self)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
    return;
 800371a:	bf00      	nop
}
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <ailayer_softmax>:
};
const aicore_layertype_t *ailayer_softmax_type = &ailayer_softmax_type_s;


ailayer_t *ailayer_softmax(ailayer_softmax_t *layer, ailayer_t *input_layer)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
    layer->base.layer_type = ailayer_softmax_type;
 8003732:	4b29      	ldr	r3, [pc, #164]	@ (80037d8 <ailayer_softmax+0xb0>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	601a      	str	r2, [r3, #0]

    layer->base.settings = 0;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	609a      	str	r2, [r3, #8]
    AILAYER_SETTINGS_SET(layer->base.settings, 0b1, AILAYER_SETTINGS_TRAINABLE, FALSE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f023 0202 	bic.w	r2, r3, #2
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	609a      	str	r2, [r3, #8]
    AILAYER_SETTINGS_SET(layer->base.settings, 0b1, AILAYER_SETTINGS_NO_INPUT_GRADIENT, FALSE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f023 0208 	bic.w	r2, r3, #8
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	609a      	str	r2, [r3, #8]

	layer->base.input_layer = input_layer;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	60da      	str	r2, [r3, #12]
    layer->base.output_layer = 0;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	611a      	str	r2, [r3, #16]
	input_layer->output_layer = &(layer->base);
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	611a      	str	r2, [r3, #16]

	layer->base.layer_configuration = layer;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	605a      	str	r2, [r3, #4]
	layer->base.result.shape = input_layer->result.shape;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	625a      	str	r2, [r3, #36]	@ 0x24
	layer->base.result.dim = input_layer->result.dim;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f883 2020 	strb.w	r2, [r3, #32]

	layer->base.forward = ailayer_softmax_forward;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a15      	ldr	r2, [pc, #84]	@ (80037dc <ailayer_softmax+0xb4>)
 8003788:	639a      	str	r2, [r3, #56]	@ 0x38
	layer->base.backward = 0;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	661a      	str	r2, [r3, #96]	@ 0x60

	layer->base.calc_result_shape = ailayer_softmax_calc_result_shape;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a13      	ldr	r2, [pc, #76]	@ (80037e0 <ailayer_softmax+0xb8>)
 8003794:	631a      	str	r2, [r3, #48]	@ 0x30
	layer->base.sizeof_paramem = 0;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	665a      	str	r2, [r3, #100]	@ 0x64
	layer->base.set_paramem = 0;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	669a      	str	r2, [r3, #104]	@ 0x68
	layer->base.sizeof_trainmem = 0;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	67da      	str	r2, [r3, #124]	@ 0x7c
	layer->base.set_trainmem = 0;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	layer->base.sizeof_fwdmem = 0;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	671a      	str	r2, [r3, #112]	@ 0x70
	layer->base.sizeof_bwdmem = 0;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	675a      	str	r2, [r3, #116]	@ 0x74

	layer->base.trainable_params_count = 0;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

	ailayer_softmax_calc_result_shape(&layer->base);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 f824 	bl	8003814 <ailayer_softmax_calc_result_shape>

	return &(layer->base);
 80037cc:	687b      	ldr	r3, [r7, #4]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20000568 	.word	0x20000568
 80037dc:	080037e5 	.word	0x080037e5
 80037e0:	08003815 	.word	0x08003815

080037e4 <ailayer_softmax_forward>:

void ailayer_softmax_forward(ailayer_t *self)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
	ailayer_softmax_t *layer = (ailayer_softmax_t *)(self->layer_configuration);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	617b      	str	r3, [r7, #20]
	aitensor_t *x_in = &(self->input_layer->result);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	331c      	adds	r3, #28
 80037f8:	613b      	str	r3, [r7, #16]
	aitensor_t *x_out = &(self->result);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	331c      	adds	r3, #28
 80037fe:	60fb      	str	r3, [r7, #12]

	layer->softmax(x_in, x_out);
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003806:	68f9      	ldr	r1, [r7, #12]
 8003808:	6938      	ldr	r0, [r7, #16]
 800380a:	4798      	blx	r3
	return;
 800380c:	bf00      	nop
}
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <ailayer_softmax_calc_result_shape>:

void ailayer_softmax_calc_result_shape(ailayer_t *self)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
	// Unused: Shape is already defined (Pointer)
	return;
 800381c:	bf00      	nop
}
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <ailayer_softmax_print_specs>:

#ifdef AIDEBUG_PRINT_MODULE_SPECS
void ailayer_softmax_print_specs(const ailayer_t *self)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
    return;
 8003830:	bf00      	nop
}
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <aimath_tensor_elements>:
	vector->shape[1] = temp;
	return;
}

uint32_t aimath_tensor_elements(const aitensor_t *tensor)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
	uint32_t elems = 1;
 8003844:	2301      	movs	r3, #1
 8003846:	60fb      	str	r3, [r7, #12]
	uint8_t i;

	for(i = 0; i < tensor->dim; i++)
 8003848:	2300      	movs	r3, #0
 800384a:	72fb      	strb	r3, [r7, #11]
 800384c:	e00d      	b.n	800386a <aimath_tensor_elements+0x2e>
	{
		elems *= tensor->shape[i];
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	7afb      	ldrb	r3, [r7, #11]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	4413      	add	r3, r2
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	461a      	mov	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	fb02 f303 	mul.w	r3, r2, r3
 8003862:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < tensor->dim; i++)
 8003864:	7afb      	ldrb	r3, [r7, #11]
 8003866:	3301      	adds	r3, #1
 8003868:	72fb      	strb	r3, [r7, #11]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	791b      	ldrb	r3, [r3, #4]
 800386e:	7afa      	ldrb	r2, [r7, #11]
 8003870:	429a      	cmp	r2, r3
 8003872:	d3ec      	bcc.n	800384e <aimath_tensor_elements+0x12>
	}
	return elems;
 8003874:	68fb      	ldr	r3, [r7, #12]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <aimath_sizeof_dtype>:

uint32_t aimath_sizeof_dtype(const aimath_dtype_t *dtype)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
	return dtype->size;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
}
 800388e:	4618      	mov	r0, r3
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <aimath_sizeof_tensor_data>:

uint32_t aimath_sizeof_tensor_data(const aitensor_t *tensor)
{
 800389a:	b590      	push	{r4, r7, lr}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
	return aimath_sizeof_dtype(tensor->dtype) * aimath_tensor_elements(tensor);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff ffeb 	bl	8003882 <aimath_sizeof_dtype>
 80038ac:	4604      	mov	r4, r0
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff ffc4 	bl	800383c <aimath_tensor_elements>
 80038b4:	4603      	mov	r3, r0
 80038b6:	fb04 f303 	mul.w	r3, r4, r3
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd90      	pop	{r4, r7, pc}

080038c2 <aimath_sizeof_tensor_params>:

uint32_t aimath_sizeof_tensor_params(const aitensor_t *tensor)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
	return tensor->dtype->tensor_params_size;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <aimath_q31_print_aitensor>:
AISTRING_STORAGE_WRAPPER(aistring_q31_print_aitensor_2);
AISTRING_STORAGE_WRAPPER(aistring_q31_print_aitensor_3);
AISTRING_STORAGE_WRAPPER(aistring_q31_print_aitensor_4);

void aimath_q31_print_aitensor(const aitensor_t *tensor)
{
 80038dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e0:	ed2d 8b02 	vpush	{d8}
 80038e4:	b09d      	sub	sp, #116	@ 0x74
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6578      	str	r0, [r7, #84]	@ 0x54
	uint16_t i, j, k, n;

	uint16_t shift = ((aimath_q31_params_t *) tensor->tensor_params)->shift;
 80038ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	int32_t zero_point = ((aimath_q31_params_t *) tensor->tensor_params)->zero_point;
 80038f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	663b      	str	r3, [r7, #96]	@ 0x60

	int32_t *tensor_data = (int32_t *) tensor->data;
 80038fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	65fb      	str	r3, [r7, #92]	@ 0x5c

	AIPRINT(aistring_q31_print_aitensor_1);
 8003902:	4b99      	ldr	r3, [pc, #612]	@ (8003b68 <aimath_q31_print_aitensor+0x28c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4899      	ldr	r0, [pc, #612]	@ (8003b6c <aimath_q31_print_aitensor+0x290>)
 8003908:	4798      	blx	r3
	AIPRINT_UINT("%u", (unsigned int) shift);
 800390a:	4b99      	ldr	r3, [pc, #612]	@ (8003b70 <aimath_q31_print_aitensor+0x294>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003912:	4619      	mov	r1, r3
 8003914:	4897      	ldr	r0, [pc, #604]	@ (8003b74 <aimath_q31_print_aitensor+0x298>)
 8003916:	4790      	blx	r2
	AIPRINT(aistring_q31_print_aitensor_2);
 8003918:	4b93      	ldr	r3, [pc, #588]	@ (8003b68 <aimath_q31_print_aitensor+0x28c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4896      	ldr	r0, [pc, #600]	@ (8003b78 <aimath_q31_print_aitensor+0x29c>)
 800391e:	4798      	blx	r3
	AIPRINT_LONG_INT("%ld", (long int) zero_point);
 8003920:	4b96      	ldr	r3, [pc, #600]	@ (8003b7c <aimath_q31_print_aitensor+0x2a0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8003926:	4896      	ldr	r0, [pc, #600]	@ (8003b80 <aimath_q31_print_aitensor+0x2a4>)
 8003928:	4798      	blx	r3
	AIPRINT(aistring_q31_print_aitensor_3);
 800392a:	4b8f      	ldr	r3, [pc, #572]	@ (8003b68 <aimath_q31_print_aitensor+0x28c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4895      	ldr	r0, [pc, #596]	@ (8003b84 <aimath_q31_print_aitensor+0x2a8>)
 8003930:	4798      	blx	r3
	if(tensor->dim == 1)
 8003932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003934:	791b      	ldrb	r3, [r3, #4]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d167      	bne.n	8003a0a <aimath_q31_print_aitensor+0x12e>
	{
		for(j = 0; j < tensor->shape[0]; j++)
 800393a:	2300      	movs	r3, #0
 800393c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8003940:	e05b      	b.n	80039fa <aimath_q31_print_aitensor+0x11e>
		{
			AIPRINT_FLOAT("%10.5f", Q31_TO_FLOAT(tensor_data[j], shift, zero_point));
 8003942:	4b91      	ldr	r3, [pc, #580]	@ (8003b88 <aimath_q31_print_aitensor+0x2ac>)
 8003944:	681d      	ldr	r5, [r3, #0]
 8003946:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800394e:	4413      	add	r3, r2
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	17da      	asrs	r2, r3, #31
 8003954:	643b      	str	r3, [r7, #64]	@ 0x40
 8003956:	647a      	str	r2, [r7, #68]	@ 0x44
 8003958:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800395a:	17da      	asrs	r2, r3, #31
 800395c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800395e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003960:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	@ 0x40
 8003964:	4653      	mov	r3, sl
 8003966:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800396a:	4602      	mov	r2, r0
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003970:	465b      	mov	r3, fp
 8003972:	460a      	mov	r2, r1
 8003974:	eb63 0302 	sbc.w	r3, r3, r2
 8003978:	637b      	str	r3, [r7, #52]	@ 0x34
 800397a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800397e:	f7fd fa5b 	bl	8000e38 <__aeabi_l2f>
 8003982:	ee08 0a10 	vmov	s16, r0
 8003986:	f8b7 1066 	ldrh.w	r1, [r7, #102]	@ 0x66
 800398a:	f04f 0201 	mov.w	r2, #1
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	f1a1 0420 	sub.w	r4, r1, #32
 8003996:	f1c1 0020 	rsb	r0, r1, #32
 800399a:	fa03 f901 	lsl.w	r9, r3, r1
 800399e:	fa02 f404 	lsl.w	r4, r2, r4
 80039a2:	ea49 0904 	orr.w	r9, r9, r4
 80039a6:	fa22 f000 	lsr.w	r0, r2, r0
 80039aa:	ea49 0900 	orr.w	r9, r9, r0
 80039ae:	fa02 f801 	lsl.w	r8, r2, r1
 80039b2:	4640      	mov	r0, r8
 80039b4:	4649      	mov	r1, r9
 80039b6:	f7fd fa3f 	bl	8000e38 <__aeabi_l2f>
 80039ba:	ee07 0a10 	vmov	s14, r0
 80039be:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80039c2:	eeb0 0a67 	vmov.f32	s0, s15
 80039c6:	4871      	ldr	r0, [pc, #452]	@ (8003b8c <aimath_q31_print_aitensor+0x2b0>)
 80039c8:	47a8      	blx	r5
            AIPRINT(aistring_q31_print_aitensor_bracket);
 80039ca:	4b67      	ldr	r3, [pc, #412]	@ (8003b68 <aimath_q31_print_aitensor+0x28c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4870      	ldr	r0, [pc, #448]	@ (8003b90 <aimath_q31_print_aitensor+0x2b4>)
 80039d0:	4798      	blx	r3
            AIPRINT_LONG_INT("%10ld", tensor_data[j]);
 80039d2:	4b6a      	ldr	r3, [pc, #424]	@ (8003b7c <aimath_q31_print_aitensor+0x2a0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80039da:	0092      	lsls	r2, r2, #2
 80039dc:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80039de:	440a      	add	r2, r1
 80039e0:	6812      	ldr	r2, [r2, #0]
 80039e2:	4611      	mov	r1, r2
 80039e4:	486b      	ldr	r0, [pc, #428]	@ (8003b94 <aimath_q31_print_aitensor+0x2b8>)
 80039e6:	4798      	blx	r3
            AIPRINT(aistring_q31_print_aitensor_tab);
 80039e8:	4b5f      	ldr	r3, [pc, #380]	@ (8003b68 <aimath_q31_print_aitensor+0x28c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	486a      	ldr	r0, [pc, #424]	@ (8003b98 <aimath_q31_print_aitensor+0x2bc>)
 80039ee:	4798      	blx	r3
		for(j = 0; j < tensor->shape[0]; j++)
 80039f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80039f4:	3301      	adds	r3, #1
 80039f6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80039fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d39c      	bcc.n	8003942 <aimath_q31_print_aitensor+0x66>
 8003a08:	e19a      	b.n	8003d40 <aimath_q31_print_aitensor+0x464>
		}
	}
	else if(tensor->dim == 2)
 8003a0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a0c:	791b      	ldrb	r3, [r3, #4]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	f040 8094 	bne.w	8003b3c <aimath_q31_print_aitensor+0x260>
	{
		for(i = 0; i < tensor->shape[0]; i++)
 8003a14:	2300      	movs	r3, #0
 8003a16:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8003a1a:	e086      	b.n	8003b2a <aimath_q31_print_aitensor+0x24e>
		{
			for(j = 0; j < tensor->shape[1]; j++)
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8003a22:	e071      	b.n	8003b08 <aimath_q31_print_aitensor+0x22c>
			{
				AIPRINT_FLOAT("%10.5f", Q31_TO_FLOAT(tensor_data[i*tensor->shape[1] + j], shift, zero_point));
 8003a24:	4b58      	ldr	r3, [pc, #352]	@ (8003b88 <aimath_q31_print_aitensor+0x2ac>)
 8003a26:	681d      	ldr	r5, [r3, #0]
 8003a28:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003a2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a2e:	6892      	ldr	r2, [r2, #8]
 8003a30:	3202      	adds	r2, #2
 8003a32:	8812      	ldrh	r2, [r2, #0]
 8003a34:	fb03 f202 	mul.w	r2, r3, r2
 8003a38:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003a42:	4413      	add	r3, r2
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	17da      	asrs	r2, r3, #31
 8003a48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a4e:	17da      	asrs	r2, r3, #31
 8003a50:	623b      	str	r3, [r7, #32]
 8003a52:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a54:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003a58:	4643      	mov	r3, r8
 8003a5a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003a5e:	4602      	mov	r2, r0
 8003a60:	1a9b      	subs	r3, r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	464b      	mov	r3, r9
 8003a66:	460a      	mov	r2, r1
 8003a68:	eb63 0302 	sbc.w	r3, r3, r2
 8003a6c:	61fb      	str	r3, [r7, #28]
 8003a6e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003a72:	f7fd f9e1 	bl	8000e38 <__aeabi_l2f>
 8003a76:	ee08 0a10 	vmov	s16, r0
 8003a7a:	f8b7 1066 	ldrh.w	r1, [r7, #102]	@ 0x66
 8003a7e:	f04f 0201 	mov.w	r2, #1
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	f1a1 0420 	sub.w	r4, r1, #32
 8003a8a:	f1c1 0020 	rsb	r0, r1, #32
 8003a8e:	fa03 f601 	lsl.w	r6, r3, r1
 8003a92:	64fe      	str	r6, [r7, #76]	@ 0x4c
 8003a94:	fa02 f404 	lsl.w	r4, r2, r4
 8003a98:	6cfe      	ldr	r6, [r7, #76]	@ 0x4c
 8003a9a:	4326      	orrs	r6, r4
 8003a9c:	64fe      	str	r6, [r7, #76]	@ 0x4c
 8003a9e:	fa22 f000 	lsr.w	r0, r2, r0
 8003aa2:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8003aa4:	4304      	orrs	r4, r0
 8003aa6:	64fc      	str	r4, [r7, #76]	@ 0x4c
 8003aa8:	fa02 f301 	lsl.w	r3, r2, r1
 8003aac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003aae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8003ab2:	f7fd f9c1 	bl	8000e38 <__aeabi_l2f>
 8003ab6:	ee07 0a10 	vmov	s14, r0
 8003aba:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003abe:	eeb0 0a67 	vmov.f32	s0, s15
 8003ac2:	4832      	ldr	r0, [pc, #200]	@ (8003b8c <aimath_q31_print_aitensor+0x2b0>)
 8003ac4:	47a8      	blx	r5
				AIPRINT(aistring_q31_print_aitensor_bracket);
 8003ac6:	4b28      	ldr	r3, [pc, #160]	@ (8003b68 <aimath_q31_print_aitensor+0x28c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4831      	ldr	r0, [pc, #196]	@ (8003b90 <aimath_q31_print_aitensor+0x2b4>)
 8003acc:	4798      	blx	r3
				AIPRINT_LONG_INT("%10ld", (long int) tensor_data[i*tensor->shape[1] + j]);
 8003ace:	4b2b      	ldr	r3, [pc, #172]	@ (8003b7c <aimath_q31_print_aitensor+0x2a0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8003ad6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ad8:	6889      	ldr	r1, [r1, #8]
 8003ada:	3102      	adds	r1, #2
 8003adc:	8809      	ldrh	r1, [r1, #0]
 8003ade:	fb02 f101 	mul.w	r1, r2, r1
 8003ae2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003ae6:	440a      	add	r2, r1
 8003ae8:	0092      	lsls	r2, r2, #2
 8003aea:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003aec:	440a      	add	r2, r1
 8003aee:	6812      	ldr	r2, [r2, #0]
 8003af0:	4611      	mov	r1, r2
 8003af2:	4828      	ldr	r0, [pc, #160]	@ (8003b94 <aimath_q31_print_aitensor+0x2b8>)
 8003af4:	4798      	blx	r3
				AIPRINT(aistring_q31_print_aitensor_tab);
 8003af6:	4b1c      	ldr	r3, [pc, #112]	@ (8003b68 <aimath_q31_print_aitensor+0x28c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4827      	ldr	r0, [pc, #156]	@ (8003b98 <aimath_q31_print_aitensor+0x2bc>)
 8003afc:	4798      	blx	r3
			for(j = 0; j < tensor->shape[1]; j++)
 8003afe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003b02:	3301      	adds	r3, #1
 8003b04:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8003b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	3302      	adds	r3, #2
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d385      	bcc.n	8003a24 <aimath_q31_print_aitensor+0x148>
			}
			AIPRINT(aistring_q31_print_aitensor_nl);
 8003b18:	4b13      	ldr	r3, [pc, #76]	@ (8003b68 <aimath_q31_print_aitensor+0x28c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	481f      	ldr	r0, [pc, #124]	@ (8003b9c <aimath_q31_print_aitensor+0x2c0>)
 8003b1e:	4798      	blx	r3
		for(i = 0; i < tensor->shape[0]; i++)
 8003b20:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003b24:	3301      	adds	r3, #1
 8003b26:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8003b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8003b34:	429a      	cmp	r2, r3
 8003b36:	f4ff af71 	bcc.w	8003a1c <aimath_q31_print_aitensor+0x140>
 8003b3a:	e101      	b.n	8003d40 <aimath_q31_print_aitensor+0x464>
		}
	}
	else if(tensor->dim == 4)
 8003b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b3e:	791b      	ldrb	r3, [r3, #4]
 8003b40:	2b04      	cmp	r3, #4
 8003b42:	f040 80fd 	bne.w	8003d40 <aimath_q31_print_aitensor+0x464>
	{
		for(n = 0; n < tensor->shape[0]; n++)
 8003b46:	2300      	movs	r3, #0
 8003b48:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8003b4c:	e0f0      	b.n	8003d30 <aimath_q31_print_aitensor+0x454>
		{
			for(k = 0; k < tensor->shape[1]; k++)
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8003b54:	e0da      	b.n	8003d0c <aimath_q31_print_aitensor+0x430>
			{
				for(i = 0; i < tensor->shape[2]; i++)
 8003b56:	2300      	movs	r3, #0
 8003b58:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8003b5c:	e0c4      	b.n	8003ce8 <aimath_q31_print_aitensor+0x40c>
				{
					for(j = 0; j < tensor->shape[3]; j++)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8003b64:	e0ae      	b.n	8003cc4 <aimath_q31_print_aitensor+0x3e8>
 8003b66:	bf00      	nop
 8003b68:	20000548 	.word	0x20000548
 8003b6c:	0800c818 	.word	0x0800c818
 8003b70:	20000550 	.word	0x20000550
 8003b74:	0800bfc8 	.word	0x0800bfc8
 8003b78:	0800c824 	.word	0x0800c824
 8003b7c:	20000554 	.word	0x20000554
 8003b80:	0800bfcc 	.word	0x0800bfcc
 8003b84:	0800c82c 	.word	0x0800c82c
 8003b88:	20000558 	.word	0x20000558
 8003b8c:	0800bfd0 	.word	0x0800bfd0
 8003b90:	0800c80c 	.word	0x0800c80c
 8003b94:	0800bfd8 	.word	0x0800bfd8
 8003b98:	0800c810 	.word	0x0800c810
 8003b9c:	0800c814 	.word	0x0800c814
					{
						AIPRINT_FLOAT("%10.5f\t", Q31_TO_FLOAT(tensor_data[((n * tensor->shape[1] + k) * tensor->shape[2] + i) * tensor->shape[3] + j], shift, zero_point));
 8003ba0:	4b6d      	ldr	r3, [pc, #436]	@ (8003d58 <aimath_q31_print_aitensor+0x47c>)
 8003ba2:	681d      	ldr	r5, [r3, #0]
 8003ba4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8003ba8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003baa:	6892      	ldr	r2, [r2, #8]
 8003bac:	3202      	adds	r2, #2
 8003bae:	8812      	ldrh	r2, [r2, #0]
 8003bb0:	fb03 f202 	mul.w	r2, r3, r2
 8003bb4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8003bb8:	4413      	add	r3, r2
 8003bba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003bbc:	6892      	ldr	r2, [r2, #8]
 8003bbe:	3204      	adds	r2, #4
 8003bc0:	8812      	ldrh	r2, [r2, #0]
 8003bc2:	fb03 f202 	mul.w	r2, r3, r2
 8003bc6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003bca:	4413      	add	r3, r2
 8003bcc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003bce:	6892      	ldr	r2, [r2, #8]
 8003bd0:	3206      	adds	r2, #6
 8003bd2:	8812      	ldrh	r2, [r2, #0]
 8003bd4:	fb03 f202 	mul.w	r2, r3, r2
 8003bd8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003be2:	4413      	add	r3, r2
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	17da      	asrs	r2, r3, #31
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	617a      	str	r2, [r7, #20]
 8003bec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bee:	17da      	asrs	r2, r3, #31
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	60fa      	str	r2, [r7, #12]
 8003bf4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003bf8:	4643      	mov	r3, r8
 8003bfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bfe:	4602      	mov	r2, r0
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	464b      	mov	r3, r9
 8003c06:	460a      	mov	r2, r1
 8003c08:	eb63 0302 	sbc.w	r3, r3, r2
 8003c0c:	607b      	str	r3, [r7, #4]
 8003c0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c12:	f7fd f911 	bl	8000e38 <__aeabi_l2f>
 8003c16:	ee08 0a10 	vmov	s16, r0
 8003c1a:	f8b7 1066 	ldrh.w	r1, [r7, #102]	@ 0x66
 8003c1e:	f04f 0201 	mov.w	r2, #1
 8003c22:	f04f 0300 	mov.w	r3, #0
 8003c26:	f1a1 0420 	sub.w	r4, r1, #32
 8003c2a:	f1c1 0020 	rsb	r0, r1, #32
 8003c2e:	fa03 fb01 	lsl.w	fp, r3, r1
 8003c32:	fa02 f404 	lsl.w	r4, r2, r4
 8003c36:	ea4b 0b04 	orr.w	fp, fp, r4
 8003c3a:	fa22 f000 	lsr.w	r0, r2, r0
 8003c3e:	ea4b 0b00 	orr.w	fp, fp, r0
 8003c42:	fa02 fa01 	lsl.w	sl, r2, r1
 8003c46:	4650      	mov	r0, sl
 8003c48:	4659      	mov	r1, fp
 8003c4a:	f7fd f8f5 	bl	8000e38 <__aeabi_l2f>
 8003c4e:	ee07 0a10 	vmov	s14, r0
 8003c52:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003c56:	eeb0 0a67 	vmov.f32	s0, s15
 8003c5a:	4840      	ldr	r0, [pc, #256]	@ (8003d5c <aimath_q31_print_aitensor+0x480>)
 8003c5c:	47a8      	blx	r5
						AIPRINT(aistring_q31_print_aitensor_bracket);
 8003c5e:	4b40      	ldr	r3, [pc, #256]	@ (8003d60 <aimath_q31_print_aitensor+0x484>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4840      	ldr	r0, [pc, #256]	@ (8003d64 <aimath_q31_print_aitensor+0x488>)
 8003c64:	4798      	blx	r3
						AIPRINT_LONG_INT("%10ld", (long int) tensor_data[((n * tensor->shape[1] + k) * tensor->shape[2] + i) * tensor->shape[3] + j]);
 8003c66:	4b40      	ldr	r3, [pc, #256]	@ (8003d68 <aimath_q31_print_aitensor+0x48c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f8b7 2068 	ldrh.w	r2, [r7, #104]	@ 0x68
 8003c6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c70:	6889      	ldr	r1, [r1, #8]
 8003c72:	3102      	adds	r1, #2
 8003c74:	8809      	ldrh	r1, [r1, #0]
 8003c76:	fb02 f101 	mul.w	r1, r2, r1
 8003c7a:	f8b7 206a 	ldrh.w	r2, [r7, #106]	@ 0x6a
 8003c7e:	440a      	add	r2, r1
 8003c80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c82:	6889      	ldr	r1, [r1, #8]
 8003c84:	3104      	adds	r1, #4
 8003c86:	8809      	ldrh	r1, [r1, #0]
 8003c88:	fb02 f101 	mul.w	r1, r2, r1
 8003c8c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8003c90:	440a      	add	r2, r1
 8003c92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c94:	6889      	ldr	r1, [r1, #8]
 8003c96:	3106      	adds	r1, #6
 8003c98:	8809      	ldrh	r1, [r1, #0]
 8003c9a:	fb02 f101 	mul.w	r1, r2, r1
 8003c9e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003ca2:	440a      	add	r2, r1
 8003ca4:	0092      	lsls	r2, r2, #2
 8003ca6:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003ca8:	440a      	add	r2, r1
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	4611      	mov	r1, r2
 8003cae:	482f      	ldr	r0, [pc, #188]	@ (8003d6c <aimath_q31_print_aitensor+0x490>)
 8003cb0:	4798      	blx	r3
						AIPRINT(aistring_q31_print_aitensor_tab);
 8003cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8003d60 <aimath_q31_print_aitensor+0x484>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	482e      	ldr	r0, [pc, #184]	@ (8003d70 <aimath_q31_print_aitensor+0x494>)
 8003cb8:	4798      	blx	r3
					for(j = 0; j < tensor->shape[3]; j++)
 8003cba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8003cc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	3306      	adds	r3, #6
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	f4ff af65 	bcc.w	8003ba0 <aimath_q31_print_aitensor+0x2c4>
					}
					AIPRINT(aistring_q31_print_aitensor_nl);
 8003cd6:	4b22      	ldr	r3, [pc, #136]	@ (8003d60 <aimath_q31_print_aitensor+0x484>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4826      	ldr	r0, [pc, #152]	@ (8003d74 <aimath_q31_print_aitensor+0x498>)
 8003cdc:	4798      	blx	r3
				for(i = 0; i < tensor->shape[2]; i++)
 8003cde:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8003ce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	3304      	adds	r3, #4
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	f4ff af32 	bcc.w	8003b5e <aimath_q31_print_aitensor+0x282>
				}
				AIPRINT(aistring_q31_print_aitensor_nl);
 8003cfa:	4b19      	ldr	r3, [pc, #100]	@ (8003d60 <aimath_q31_print_aitensor+0x484>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	481d      	ldr	r0, [pc, #116]	@ (8003d74 <aimath_q31_print_aitensor+0x498>)
 8003d00:	4798      	blx	r3
			for(k = 0; k < tensor->shape[1]; k++)
 8003d02:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8003d06:	3301      	adds	r3, #1
 8003d08:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8003d0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	3302      	adds	r3, #2
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	f8b7 206a 	ldrh.w	r2, [r7, #106]	@ 0x6a
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	f4ff af1c 	bcc.w	8003b56 <aimath_q31_print_aitensor+0x27a>
			}
			AIPRINT(aistring_q31_print_aitensor_nl);
 8003d1e:	4b10      	ldr	r3, [pc, #64]	@ (8003d60 <aimath_q31_print_aitensor+0x484>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4814      	ldr	r0, [pc, #80]	@ (8003d74 <aimath_q31_print_aitensor+0x498>)
 8003d24:	4798      	blx	r3
		for(n = 0; n < tensor->shape[0]; n++)
 8003d26:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8003d30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	f8b7 2068 	ldrh.w	r2, [r7, #104]	@ 0x68
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	f4ff af07 	bcc.w	8003b4e <aimath_q31_print_aitensor+0x272>
		}
	}
	AIPRINT(aistring_q31_print_aitensor_4);
 8003d40:	4b07      	ldr	r3, [pc, #28]	@ (8003d60 <aimath_q31_print_aitensor+0x484>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	480c      	ldr	r0, [pc, #48]	@ (8003d78 <aimath_q31_print_aitensor+0x49c>)
 8003d46:	4798      	blx	r3
	return;
 8003d48:	bf00      	nop
}
 8003d4a:	3774      	adds	r7, #116	@ 0x74
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	ecbd 8b02 	vpop	{d8}
 8003d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d56:	bf00      	nop
 8003d58:	20000558 	.word	0x20000558
 8003d5c:	0800bfe0 	.word	0x0800bfe0
 8003d60:	20000548 	.word	0x20000548
 8003d64:	0800c80c 	.word	0x0800c80c
 8003d68:	20000554 	.word	0x20000554
 8003d6c:	0800bfd8 	.word	0x0800bfd8
 8003d70:	0800c810 	.word	0x0800c810
 8003d74:	0800c814 	.word	0x0800c814
 8003d78:	0800c834 	.word	0x0800c834

08003d7c <aimath_q31_print_aiscalar>:
AISTRING_STORAGE_WRAPPER(aistring_q31_print_aiscalar_2);
AISTRING_STORAGE_WRAPPER(aistring_q31_print_aiscalar_3);
AISTRING_STORAGE_WRAPPER(aistring_q31_print_aiscalar_4);

void aimath_q31_print_aiscalar(const void *scalar)
{
 8003d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d80:	ed2d 8b02 	vpush	{d8}
 8003d84:	b085      	sub	sp, #20
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
    aiscalar_q31_t *scalar_q31 = (aiscalar_q31_t *) scalar;
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	60f9      	str	r1, [r7, #12]
    AIPRINT_FLOAT("%f", Q31_TO_FLOAT(scalar_q31->value, scalar_q31->shift, scalar_q31->zero_point));
 8003d8e:	4932      	ldr	r1, [pc, #200]	@ (8003e58 <aimath_q31_print_aiscalar+0xdc>)
 8003d90:	6809      	ldr	r1, [r1, #0]
 8003d92:	6039      	str	r1, [r7, #0]
 8003d94:	68f9      	ldr	r1, [r7, #12]
 8003d96:	6809      	ldr	r1, [r1, #0]
 8003d98:	17c8      	asrs	r0, r1, #31
 8003d9a:	4688      	mov	r8, r1
 8003d9c:	4681      	mov	r9, r0
 8003d9e:	68f9      	ldr	r1, [r7, #12]
 8003da0:	6889      	ldr	r1, [r1, #8]
 8003da2:	17c8      	asrs	r0, r1, #31
 8003da4:	460a      	mov	r2, r1
 8003da6:	4603      	mov	r3, r0
 8003da8:	ebb8 0a02 	subs.w	sl, r8, r2
 8003dac:	eb69 0b03 	sbc.w	fp, r9, r3
 8003db0:	4650      	mov	r0, sl
 8003db2:	4659      	mov	r1, fp
 8003db4:	f7fd f840 	bl	8000e38 <__aeabi_l2f>
 8003db8:	ee08 0a10 	vmov	s16, r0
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	889b      	ldrh	r3, [r3, #4]
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	f04f 0201 	mov.w	r2, #1
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	f1a1 0620 	sub.w	r6, r1, #32
 8003dce:	f1c1 0020 	rsb	r0, r1, #32
 8003dd2:	fa03 f501 	lsl.w	r5, r3, r1
 8003dd6:	fa02 f606 	lsl.w	r6, r2, r6
 8003dda:	4335      	orrs	r5, r6
 8003ddc:	fa22 f000 	lsr.w	r0, r2, r0
 8003de0:	4305      	orrs	r5, r0
 8003de2:	fa02 f401 	lsl.w	r4, r2, r1
 8003de6:	4620      	mov	r0, r4
 8003de8:	4629      	mov	r1, r5
 8003dea:	f7fd f825 	bl	8000e38 <__aeabi_l2f>
 8003dee:	ee07 0a10 	vmov	s14, r0
 8003df2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003df6:	eeb0 0a67 	vmov.f32	s0, s15
 8003dfa:	4818      	ldr	r0, [pc, #96]	@ (8003e5c <aimath_q31_print_aiscalar+0xe0>)
 8003dfc:	6839      	ldr	r1, [r7, #0]
 8003dfe:	4788      	blx	r1
    AIPRINT(aistring_q31_print_aiscalar_1);
 8003e00:	4b17      	ldr	r3, [pc, #92]	@ (8003e60 <aimath_q31_print_aiscalar+0xe4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4817      	ldr	r0, [pc, #92]	@ (8003e64 <aimath_q31_print_aiscalar+0xe8>)
 8003e06:	4798      	blx	r3
    AIPRINT_LONG_INT("%ld", (long int) scalar_q31->value);
 8003e08:	4b17      	ldr	r3, [pc, #92]	@ (8003e68 <aimath_q31_print_aiscalar+0xec>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	6812      	ldr	r2, [r2, #0]
 8003e10:	4611      	mov	r1, r2
 8003e12:	4816      	ldr	r0, [pc, #88]	@ (8003e6c <aimath_q31_print_aiscalar+0xf0>)
 8003e14:	4798      	blx	r3
    AIPRINT(aistring_q31_print_aiscalar_2);
 8003e16:	4b12      	ldr	r3, [pc, #72]	@ (8003e60 <aimath_q31_print_aiscalar+0xe4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4815      	ldr	r0, [pc, #84]	@ (8003e70 <aimath_q31_print_aiscalar+0xf4>)
 8003e1c:	4798      	blx	r3
    AIPRINT_UINT("%u", (unsigned int) scalar_q31->shift);
 8003e1e:	4b15      	ldr	r3, [pc, #84]	@ (8003e74 <aimath_q31_print_aiscalar+0xf8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	8892      	ldrh	r2, [r2, #4]
 8003e26:	4611      	mov	r1, r2
 8003e28:	4813      	ldr	r0, [pc, #76]	@ (8003e78 <aimath_q31_print_aiscalar+0xfc>)
 8003e2a:	4798      	blx	r3
    AIPRINT(aistring_q31_print_aiscalar_3);
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e60 <aimath_q31_print_aiscalar+0xe4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4812      	ldr	r0, [pc, #72]	@ (8003e7c <aimath_q31_print_aiscalar+0x100>)
 8003e32:	4798      	blx	r3
    AIPRINT_LONG_INT("%ld", (long int) scalar_q31->zero_point);
 8003e34:	4b0c      	ldr	r3, [pc, #48]	@ (8003e68 <aimath_q31_print_aiscalar+0xec>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	6892      	ldr	r2, [r2, #8]
 8003e3c:	4611      	mov	r1, r2
 8003e3e:	480b      	ldr	r0, [pc, #44]	@ (8003e6c <aimath_q31_print_aiscalar+0xf0>)
 8003e40:	4798      	blx	r3
    AIPRINT(aistring_q31_print_aiscalar_4);
 8003e42:	4b07      	ldr	r3, [pc, #28]	@ (8003e60 <aimath_q31_print_aiscalar+0xe4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	480e      	ldr	r0, [pc, #56]	@ (8003e80 <aimath_q31_print_aiscalar+0x104>)
 8003e48:	4798      	blx	r3
}
 8003e4a:	bf00      	nop
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	ecbd 8b02 	vpop	{d8}
 8003e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e58:	20000558 	.word	0x20000558
 8003e5c:	0800bfe8 	.word	0x0800bfe8
 8003e60:	20000548 	.word	0x20000548
 8003e64:	0800c838 	.word	0x0800c838
 8003e68:	20000554 	.word	0x20000554
 8003e6c:	0800bfcc 	.word	0x0800bfcc
 8003e70:	0800c844 	.word	0x0800c844
 8003e74:	20000550 	.word	0x20000550
 8003e78:	0800bfc8 	.word	0x0800bfc8
 8003e7c:	0800c84c 	.word	0x0800c84c
 8003e80:	0800c854 	.word	0x0800c854

08003e84 <aimath_q7_print_aitensor>:
AISTRING_STORAGE_WRAPPER(aistring_q7_print_aitensor_2);
AISTRING_STORAGE_WRAPPER(aistring_q7_print_aitensor_3);
AISTRING_STORAGE_WRAPPER(aistring_q7_print_aitensor_4);

void aimath_q7_print_aitensor(const aitensor_t *tensor)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
	uint16_t i, j, k, n;

	uint16_t shift = ((aimath_q7_params_t *) tensor->tensor_params)->shift;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	81fb      	strh	r3, [r7, #14]
	int8_t zero_point = ((aimath_q7_params_t *) tensor->tensor_params)->zero_point;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	789b      	ldrb	r3, [r3, #2]
 8003e9a:	737b      	strb	r3, [r7, #13]

	int8_t *tensor_data = (int8_t *) tensor->data;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	60bb      	str	r3, [r7, #8]

	AIPRINT(aistring_q7_print_aitensor_1);
 8003ea2:	4b66      	ldr	r3, [pc, #408]	@ (800403c <aimath_q7_print_aitensor+0x1b8>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4866      	ldr	r0, [pc, #408]	@ (8004040 <aimath_q7_print_aitensor+0x1bc>)
 8003ea8:	4798      	blx	r3
	AIPRINT_UINT("%u", (unsigned int) shift);
 8003eaa:	4b66      	ldr	r3, [pc, #408]	@ (8004044 <aimath_q7_print_aitensor+0x1c0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	89fa      	ldrh	r2, [r7, #14]
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	4865      	ldr	r0, [pc, #404]	@ (8004048 <aimath_q7_print_aitensor+0x1c4>)
 8003eb4:	4798      	blx	r3
	AIPRINT(aistring_q7_print_aitensor_2);
 8003eb6:	4b61      	ldr	r3, [pc, #388]	@ (800403c <aimath_q7_print_aitensor+0x1b8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4864      	ldr	r0, [pc, #400]	@ (800404c <aimath_q7_print_aitensor+0x1c8>)
 8003ebc:	4798      	blx	r3
	AIPRINT_INT("%d", zero_point);
 8003ebe:	4b64      	ldr	r3, [pc, #400]	@ (8004050 <aimath_q7_print_aitensor+0x1cc>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	4862      	ldr	r0, [pc, #392]	@ (8004054 <aimath_q7_print_aitensor+0x1d0>)
 8003eca:	4798      	blx	r3
	AIPRINT(aistring_q7_print_aitensor_3);
 8003ecc:	4b5b      	ldr	r3, [pc, #364]	@ (800403c <aimath_q7_print_aitensor+0x1b8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4861      	ldr	r0, [pc, #388]	@ (8004058 <aimath_q7_print_aitensor+0x1d4>)
 8003ed2:	4798      	blx	r3
	if(tensor->dim == 1)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	791b      	ldrb	r3, [r3, #4]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d13b      	bne.n	8003f54 <aimath_q7_print_aitensor+0xd0>
	{
		for(j = 0; j < tensor->shape[0]; j++)
 8003edc:	2300      	movs	r3, #0
 8003ede:	82bb      	strh	r3, [r7, #20]
 8003ee0:	e031      	b.n	8003f46 <aimath_q7_print_aitensor+0xc2>
		{
			AIPRINT_FLOAT("%10.5f", Q7_TO_FLOAT(tensor_data[j], shift, zero_point));
 8003ee2:	4b5e      	ldr	r3, [pc, #376]	@ (800405c <aimath_q7_print_aitensor+0x1d8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	8aba      	ldrh	r2, [r7, #20]
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	440a      	add	r2, r1
 8003eec:	f992 2000 	ldrsb.w	r2, [r2]
 8003ef0:	4611      	mov	r1, r2
 8003ef2:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8003ef6:	1a8a      	subs	r2, r1, r2
 8003ef8:	ee07 2a90 	vmov	s15, r2
 8003efc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f00:	89fa      	ldrh	r2, [r7, #14]
 8003f02:	2101      	movs	r1, #1
 8003f04:	fa01 f202 	lsl.w	r2, r1, r2
 8003f08:	ee07 2a90 	vmov	s15, r2
 8003f0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f10:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f14:	eeb0 0a66 	vmov.f32	s0, s13
 8003f18:	4851      	ldr	r0, [pc, #324]	@ (8004060 <aimath_q7_print_aitensor+0x1dc>)
 8003f1a:	4798      	blx	r3
            AIPRINT(aistring_q7_print_aitensor_bracket);
 8003f1c:	4b47      	ldr	r3, [pc, #284]	@ (800403c <aimath_q7_print_aitensor+0x1b8>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4850      	ldr	r0, [pc, #320]	@ (8004064 <aimath_q7_print_aitensor+0x1e0>)
 8003f22:	4798      	blx	r3
            AIPRINT_INT("%4d", tensor_data[j]);
 8003f24:	4b4a      	ldr	r3, [pc, #296]	@ (8004050 <aimath_q7_print_aitensor+0x1cc>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	8aba      	ldrh	r2, [r7, #20]
 8003f2a:	68b9      	ldr	r1, [r7, #8]
 8003f2c:	440a      	add	r2, r1
 8003f2e:	f992 2000 	ldrsb.w	r2, [r2]
 8003f32:	4611      	mov	r1, r2
 8003f34:	484c      	ldr	r0, [pc, #304]	@ (8004068 <aimath_q7_print_aitensor+0x1e4>)
 8003f36:	4798      	blx	r3
            AIPRINT(aistring_q7_print_aitensor_tab);
 8003f38:	4b40      	ldr	r3, [pc, #256]	@ (800403c <aimath_q7_print_aitensor+0x1b8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	484b      	ldr	r0, [pc, #300]	@ (800406c <aimath_q7_print_aitensor+0x1e8>)
 8003f3e:	4798      	blx	r3
		for(j = 0; j < tensor->shape[0]; j++)
 8003f40:	8abb      	ldrh	r3, [r7, #20]
 8003f42:	3301      	adds	r3, #1
 8003f44:	82bb      	strh	r3, [r7, #20]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	8aba      	ldrh	r2, [r7, #20]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d3c7      	bcc.n	8003ee2 <aimath_q7_print_aitensor+0x5e>
 8003f52:	e126      	b.n	80041a2 <aimath_q7_print_aitensor+0x31e>
		}
	}
	else if(tensor->dim == 2)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	791b      	ldrb	r3, [r3, #4]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d15e      	bne.n	800401a <aimath_q7_print_aitensor+0x196>
	{
		for(i = 0; i < tensor->shape[0]; i++)
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	82fb      	strh	r3, [r7, #22]
 8003f60:	e054      	b.n	800400c <aimath_q7_print_aitensor+0x188>
		{
			for(j = 0; j < tensor->shape[1]; j++)
 8003f62:	2300      	movs	r3, #0
 8003f64:	82bb      	strh	r3, [r7, #20]
 8003f66:	e043      	b.n	8003ff0 <aimath_q7_print_aitensor+0x16c>
			{
				AIPRINT_FLOAT("%10.5f", Q7_TO_FLOAT(tensor_data[i*tensor->shape[1] + j], shift, zero_point));
 8003f68:	4b3c      	ldr	r3, [pc, #240]	@ (800405c <aimath_q7_print_aitensor+0x1d8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	8afa      	ldrh	r2, [r7, #22]
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	6889      	ldr	r1, [r1, #8]
 8003f72:	3102      	adds	r1, #2
 8003f74:	8809      	ldrh	r1, [r1, #0]
 8003f76:	fb02 f101 	mul.w	r1, r2, r1
 8003f7a:	8aba      	ldrh	r2, [r7, #20]
 8003f7c:	440a      	add	r2, r1
 8003f7e:	4611      	mov	r1, r2
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	440a      	add	r2, r1
 8003f84:	f992 2000 	ldrsb.w	r2, [r2]
 8003f88:	4611      	mov	r1, r2
 8003f8a:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8003f8e:	1a8a      	subs	r2, r1, r2
 8003f90:	ee07 2a90 	vmov	s15, r2
 8003f94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f98:	89fa      	ldrh	r2, [r7, #14]
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa0:	ee07 2a90 	vmov	s15, r2
 8003fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fa8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003fac:	eeb0 0a66 	vmov.f32	s0, s13
 8003fb0:	482b      	ldr	r0, [pc, #172]	@ (8004060 <aimath_q7_print_aitensor+0x1dc>)
 8003fb2:	4798      	blx	r3
				AIPRINT(aistring_q7_print_aitensor_bracket);
 8003fb4:	4b21      	ldr	r3, [pc, #132]	@ (800403c <aimath_q7_print_aitensor+0x1b8>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	482a      	ldr	r0, [pc, #168]	@ (8004064 <aimath_q7_print_aitensor+0x1e0>)
 8003fba:	4798      	blx	r3
				AIPRINT_INT("%4d", tensor_data[i*tensor->shape[1] + j]);
 8003fbc:	4b24      	ldr	r3, [pc, #144]	@ (8004050 <aimath_q7_print_aitensor+0x1cc>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	8afa      	ldrh	r2, [r7, #22]
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	6889      	ldr	r1, [r1, #8]
 8003fc6:	3102      	adds	r1, #2
 8003fc8:	8809      	ldrh	r1, [r1, #0]
 8003fca:	fb02 f101 	mul.w	r1, r2, r1
 8003fce:	8aba      	ldrh	r2, [r7, #20]
 8003fd0:	440a      	add	r2, r1
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	440a      	add	r2, r1
 8003fd8:	f992 2000 	ldrsb.w	r2, [r2]
 8003fdc:	4611      	mov	r1, r2
 8003fde:	4822      	ldr	r0, [pc, #136]	@ (8004068 <aimath_q7_print_aitensor+0x1e4>)
 8003fe0:	4798      	blx	r3
				AIPRINT(aistring_q7_print_aitensor_tab);
 8003fe2:	4b16      	ldr	r3, [pc, #88]	@ (800403c <aimath_q7_print_aitensor+0x1b8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4821      	ldr	r0, [pc, #132]	@ (800406c <aimath_q7_print_aitensor+0x1e8>)
 8003fe8:	4798      	blx	r3
			for(j = 0; j < tensor->shape[1]; j++)
 8003fea:	8abb      	ldrh	r3, [r7, #20]
 8003fec:	3301      	adds	r3, #1
 8003fee:	82bb      	strh	r3, [r7, #20]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	3302      	adds	r3, #2
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	8aba      	ldrh	r2, [r7, #20]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d3b4      	bcc.n	8003f68 <aimath_q7_print_aitensor+0xe4>
			}
			AIPRINT(aistring_q7_print_aitensor_nl);
 8003ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800403c <aimath_q7_print_aitensor+0x1b8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	481b      	ldr	r0, [pc, #108]	@ (8004070 <aimath_q7_print_aitensor+0x1ec>)
 8004004:	4798      	blx	r3
		for(i = 0; i < tensor->shape[0]; i++)
 8004006:	8afb      	ldrh	r3, [r7, #22]
 8004008:	3301      	adds	r3, #1
 800400a:	82fb      	strh	r3, [r7, #22]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	8afa      	ldrh	r2, [r7, #22]
 8004014:	429a      	cmp	r2, r3
 8004016:	d3a4      	bcc.n	8003f62 <aimath_q7_print_aitensor+0xde>
 8004018:	e0c3      	b.n	80041a2 <aimath_q7_print_aitensor+0x31e>
		}
	}
	else if(tensor->dim == 4)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	791b      	ldrb	r3, [r3, #4]
 800401e:	2b04      	cmp	r3, #4
 8004020:	f040 80bf 	bne.w	80041a2 <aimath_q7_print_aitensor+0x31e>
	{
		for(n = 0; n < tensor->shape[0]; n++)
 8004024:	2300      	movs	r3, #0
 8004026:	823b      	strh	r3, [r7, #16]
 8004028:	e0b4      	b.n	8004194 <aimath_q7_print_aitensor+0x310>
		{
			for(k = 0; k < tensor->shape[1]; k++)
 800402a:	2300      	movs	r3, #0
 800402c:	827b      	strh	r3, [r7, #18]
 800402e:	e0a2      	b.n	8004176 <aimath_q7_print_aitensor+0x2f2>
			{
				for(i = 0; i < tensor->shape[2]; i++)
 8004030:	2300      	movs	r3, #0
 8004032:	82fb      	strh	r3, [r7, #22]
 8004034:	e090      	b.n	8004158 <aimath_q7_print_aitensor+0x2d4>
				{
					for(j = 0; j < tensor->shape[3]; j++)
 8004036:	2300      	movs	r3, #0
 8004038:	82bb      	strh	r3, [r7, #20]
 800403a:	e07f      	b.n	800413c <aimath_q7_print_aitensor+0x2b8>
 800403c:	20000548 	.word	0x20000548
 8004040:	0800c87c 	.word	0x0800c87c
 8004044:	20000550 	.word	0x20000550
 8004048:	0800bfec 	.word	0x0800bfec
 800404c:	0800c884 	.word	0x0800c884
 8004050:	2000054c 	.word	0x2000054c
 8004054:	0800bff0 	.word	0x0800bff0
 8004058:	0800c88c 	.word	0x0800c88c
 800405c:	20000558 	.word	0x20000558
 8004060:	0800bff4 	.word	0x0800bff4
 8004064:	0800c870 	.word	0x0800c870
 8004068:	0800bffc 	.word	0x0800bffc
 800406c:	0800c874 	.word	0x0800c874
 8004070:	0800c878 	.word	0x0800c878
					{
						AIPRINT_FLOAT("%10.5f\t", Q7_TO_FLOAT(tensor_data[((n * tensor->shape[1] + k) * tensor->shape[2] + i) * tensor->shape[3] + j], shift, zero_point));
 8004074:	4b4f      	ldr	r3, [pc, #316]	@ (80041b4 <aimath_q7_print_aitensor+0x330>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	8a3a      	ldrh	r2, [r7, #16]
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	6889      	ldr	r1, [r1, #8]
 800407e:	3102      	adds	r1, #2
 8004080:	8809      	ldrh	r1, [r1, #0]
 8004082:	fb02 f101 	mul.w	r1, r2, r1
 8004086:	8a7a      	ldrh	r2, [r7, #18]
 8004088:	440a      	add	r2, r1
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	6889      	ldr	r1, [r1, #8]
 800408e:	3104      	adds	r1, #4
 8004090:	8809      	ldrh	r1, [r1, #0]
 8004092:	fb02 f101 	mul.w	r1, r2, r1
 8004096:	8afa      	ldrh	r2, [r7, #22]
 8004098:	440a      	add	r2, r1
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	6889      	ldr	r1, [r1, #8]
 800409e:	3106      	adds	r1, #6
 80040a0:	8809      	ldrh	r1, [r1, #0]
 80040a2:	fb02 f101 	mul.w	r1, r2, r1
 80040a6:	8aba      	ldrh	r2, [r7, #20]
 80040a8:	440a      	add	r2, r1
 80040aa:	4611      	mov	r1, r2
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	440a      	add	r2, r1
 80040b0:	f992 2000 	ldrsb.w	r2, [r2]
 80040b4:	4611      	mov	r1, r2
 80040b6:	f997 200d 	ldrsb.w	r2, [r7, #13]
 80040ba:	1a8a      	subs	r2, r1, r2
 80040bc:	ee07 2a90 	vmov	s15, r2
 80040c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040c4:	89fa      	ldrh	r2, [r7, #14]
 80040c6:	2101      	movs	r1, #1
 80040c8:	fa01 f202 	lsl.w	r2, r1, r2
 80040cc:	ee07 2a90 	vmov	s15, r2
 80040d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80040d8:	eeb0 0a66 	vmov.f32	s0, s13
 80040dc:	4836      	ldr	r0, [pc, #216]	@ (80041b8 <aimath_q7_print_aitensor+0x334>)
 80040de:	4798      	blx	r3
						AIPRINT(aistring_q7_print_aitensor_bracket);
 80040e0:	4b36      	ldr	r3, [pc, #216]	@ (80041bc <aimath_q7_print_aitensor+0x338>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4836      	ldr	r0, [pc, #216]	@ (80041c0 <aimath_q7_print_aitensor+0x33c>)
 80040e6:	4798      	blx	r3
						AIPRINT_INT("%4d", tensor_data[((n * tensor->shape[1] + k) * tensor->shape[2] + i) * tensor->shape[3] + j]);
 80040e8:	4b36      	ldr	r3, [pc, #216]	@ (80041c4 <aimath_q7_print_aitensor+0x340>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	8a3a      	ldrh	r2, [r7, #16]
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	6889      	ldr	r1, [r1, #8]
 80040f2:	3102      	adds	r1, #2
 80040f4:	8809      	ldrh	r1, [r1, #0]
 80040f6:	fb02 f101 	mul.w	r1, r2, r1
 80040fa:	8a7a      	ldrh	r2, [r7, #18]
 80040fc:	440a      	add	r2, r1
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	6889      	ldr	r1, [r1, #8]
 8004102:	3104      	adds	r1, #4
 8004104:	8809      	ldrh	r1, [r1, #0]
 8004106:	fb02 f101 	mul.w	r1, r2, r1
 800410a:	8afa      	ldrh	r2, [r7, #22]
 800410c:	440a      	add	r2, r1
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	6889      	ldr	r1, [r1, #8]
 8004112:	3106      	adds	r1, #6
 8004114:	8809      	ldrh	r1, [r1, #0]
 8004116:	fb02 f101 	mul.w	r1, r2, r1
 800411a:	8aba      	ldrh	r2, [r7, #20]
 800411c:	440a      	add	r2, r1
 800411e:	4611      	mov	r1, r2
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	440a      	add	r2, r1
 8004124:	f992 2000 	ldrsb.w	r2, [r2]
 8004128:	4611      	mov	r1, r2
 800412a:	4827      	ldr	r0, [pc, #156]	@ (80041c8 <aimath_q7_print_aitensor+0x344>)
 800412c:	4798      	blx	r3
						AIPRINT(aistring_q7_print_aitensor_tab);
 800412e:	4b23      	ldr	r3, [pc, #140]	@ (80041bc <aimath_q7_print_aitensor+0x338>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4826      	ldr	r0, [pc, #152]	@ (80041cc <aimath_q7_print_aitensor+0x348>)
 8004134:	4798      	blx	r3
					for(j = 0; j < tensor->shape[3]; j++)
 8004136:	8abb      	ldrh	r3, [r7, #20]
 8004138:	3301      	adds	r3, #1
 800413a:	82bb      	strh	r3, [r7, #20]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	3306      	adds	r3, #6
 8004142:	881b      	ldrh	r3, [r3, #0]
 8004144:	8aba      	ldrh	r2, [r7, #20]
 8004146:	429a      	cmp	r2, r3
 8004148:	d394      	bcc.n	8004074 <aimath_q7_print_aitensor+0x1f0>
					}
					AIPRINT(aistring_q7_print_aitensor_nl);
 800414a:	4b1c      	ldr	r3, [pc, #112]	@ (80041bc <aimath_q7_print_aitensor+0x338>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4820      	ldr	r0, [pc, #128]	@ (80041d0 <aimath_q7_print_aitensor+0x34c>)
 8004150:	4798      	blx	r3
				for(i = 0; i < tensor->shape[2]; i++)
 8004152:	8afb      	ldrh	r3, [r7, #22]
 8004154:	3301      	adds	r3, #1
 8004156:	82fb      	strh	r3, [r7, #22]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	3304      	adds	r3, #4
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	8afa      	ldrh	r2, [r7, #22]
 8004162:	429a      	cmp	r2, r3
 8004164:	f4ff af67 	bcc.w	8004036 <aimath_q7_print_aitensor+0x1b2>
				}
				AIPRINT(aistring_q7_print_aitensor_nl);
 8004168:	4b14      	ldr	r3, [pc, #80]	@ (80041bc <aimath_q7_print_aitensor+0x338>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4818      	ldr	r0, [pc, #96]	@ (80041d0 <aimath_q7_print_aitensor+0x34c>)
 800416e:	4798      	blx	r3
			for(k = 0; k < tensor->shape[1]; k++)
 8004170:	8a7b      	ldrh	r3, [r7, #18]
 8004172:	3301      	adds	r3, #1
 8004174:	827b      	strh	r3, [r7, #18]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	3302      	adds	r3, #2
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	8a7a      	ldrh	r2, [r7, #18]
 8004180:	429a      	cmp	r2, r3
 8004182:	f4ff af55 	bcc.w	8004030 <aimath_q7_print_aitensor+0x1ac>
			}
			AIPRINT(aistring_q7_print_aitensor_nl);
 8004186:	4b0d      	ldr	r3, [pc, #52]	@ (80041bc <aimath_q7_print_aitensor+0x338>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4811      	ldr	r0, [pc, #68]	@ (80041d0 <aimath_q7_print_aitensor+0x34c>)
 800418c:	4798      	blx	r3
		for(n = 0; n < tensor->shape[0]; n++)
 800418e:	8a3b      	ldrh	r3, [r7, #16]
 8004190:	3301      	adds	r3, #1
 8004192:	823b      	strh	r3, [r7, #16]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	8a3a      	ldrh	r2, [r7, #16]
 800419c:	429a      	cmp	r2, r3
 800419e:	f4ff af44 	bcc.w	800402a <aimath_q7_print_aitensor+0x1a6>
		}
	}
	AIPRINT(aistring_q7_print_aitensor_4);
 80041a2:	4b06      	ldr	r3, [pc, #24]	@ (80041bc <aimath_q7_print_aitensor+0x338>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	480b      	ldr	r0, [pc, #44]	@ (80041d4 <aimath_q7_print_aitensor+0x350>)
 80041a8:	4798      	blx	r3
	return;
 80041aa:	bf00      	nop
}
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20000558 	.word	0x20000558
 80041b8:	0800c000 	.word	0x0800c000
 80041bc:	20000548 	.word	0x20000548
 80041c0:	0800c870 	.word	0x0800c870
 80041c4:	2000054c 	.word	0x2000054c
 80041c8:	0800bffc 	.word	0x0800bffc
 80041cc:	0800c874 	.word	0x0800c874
 80041d0:	0800c878 	.word	0x0800c878
 80041d4:	0800c894 	.word	0x0800c894

080041d8 <aimath_q7_print_aiscalar>:
AISTRING_STORAGE_WRAPPER(aistring_q7_print_aiscalar_2);
AISTRING_STORAGE_WRAPPER(aistring_q7_print_aiscalar_3);
AISTRING_STORAGE_WRAPPER(aistring_q7_print_aiscalar_4);

void aimath_q7_print_aiscalar(const void *scalar)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
    aiscalar_q7_t *scalar_q7 = (aiscalar_q7_t *) scalar;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	60fb      	str	r3, [r7, #12]
    AIPRINT_FLOAT("%f", Q7_TO_FLOAT(scalar_q7->value, scalar_q7->shift, scalar_q7->zero_point));
 80041e4:	4b23      	ldr	r3, [pc, #140]	@ (8004274 <aimath_q7_print_aiscalar+0x9c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	f992 2000 	ldrsb.w	r2, [r2]
 80041ee:	4611      	mov	r1, r2
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80041f6:	1a8a      	subs	r2, r1, r2
 80041f8:	ee07 2a90 	vmov	s15, r2
 80041fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	8852      	ldrh	r2, [r2, #2]
 8004204:	4611      	mov	r1, r2
 8004206:	2201      	movs	r2, #1
 8004208:	408a      	lsls	r2, r1
 800420a:	ee07 2a90 	vmov	s15, r2
 800420e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004212:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004216:	eeb0 0a66 	vmov.f32	s0, s13
 800421a:	4817      	ldr	r0, [pc, #92]	@ (8004278 <aimath_q7_print_aiscalar+0xa0>)
 800421c:	4798      	blx	r3
    AIPRINT(aistring_q7_print_aiscalar_1);
 800421e:	4b17      	ldr	r3, [pc, #92]	@ (800427c <aimath_q7_print_aiscalar+0xa4>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4817      	ldr	r0, [pc, #92]	@ (8004280 <aimath_q7_print_aiscalar+0xa8>)
 8004224:	4798      	blx	r3
    AIPRINT_INT("%d", scalar_q7->value);
 8004226:	4b17      	ldr	r3, [pc, #92]	@ (8004284 <aimath_q7_print_aiscalar+0xac>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	f992 2000 	ldrsb.w	r2, [r2]
 8004230:	4611      	mov	r1, r2
 8004232:	4815      	ldr	r0, [pc, #84]	@ (8004288 <aimath_q7_print_aiscalar+0xb0>)
 8004234:	4798      	blx	r3
    AIPRINT(aistring_q7_print_aiscalar_2);
 8004236:	4b11      	ldr	r3, [pc, #68]	@ (800427c <aimath_q7_print_aiscalar+0xa4>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4814      	ldr	r0, [pc, #80]	@ (800428c <aimath_q7_print_aiscalar+0xb4>)
 800423c:	4798      	blx	r3
    AIPRINT_UINT("%u", (unsigned int) scalar_q7->shift);
 800423e:	4b14      	ldr	r3, [pc, #80]	@ (8004290 <aimath_q7_print_aiscalar+0xb8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	8852      	ldrh	r2, [r2, #2]
 8004246:	4611      	mov	r1, r2
 8004248:	4812      	ldr	r0, [pc, #72]	@ (8004294 <aimath_q7_print_aiscalar+0xbc>)
 800424a:	4798      	blx	r3
    AIPRINT(aistring_q7_print_aiscalar_3);
 800424c:	4b0b      	ldr	r3, [pc, #44]	@ (800427c <aimath_q7_print_aiscalar+0xa4>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4811      	ldr	r0, [pc, #68]	@ (8004298 <aimath_q7_print_aiscalar+0xc0>)
 8004252:	4798      	blx	r3
    AIPRINT_INT("%d", scalar_q7->zero_point);
 8004254:	4b0b      	ldr	r3, [pc, #44]	@ (8004284 <aimath_q7_print_aiscalar+0xac>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800425e:	4611      	mov	r1, r2
 8004260:	4809      	ldr	r0, [pc, #36]	@ (8004288 <aimath_q7_print_aiscalar+0xb0>)
 8004262:	4798      	blx	r3
    AIPRINT(aistring_q7_print_aiscalar_4);
 8004264:	4b05      	ldr	r3, [pc, #20]	@ (800427c <aimath_q7_print_aiscalar+0xa4>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	480c      	ldr	r0, [pc, #48]	@ (800429c <aimath_q7_print_aiscalar+0xc4>)
 800426a:	4798      	blx	r3
}
 800426c:	bf00      	nop
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20000558 	.word	0x20000558
 8004278:	0800c008 	.word	0x0800c008
 800427c:	20000548 	.word	0x20000548
 8004280:	0800c898 	.word	0x0800c898
 8004284:	2000054c 	.word	0x2000054c
 8004288:	0800bff0 	.word	0x0800bff0
 800428c:	0800c8a4 	.word	0x0800c8a4
 8004290:	20000550 	.word	0x20000550
 8004294:	0800bfec 	.word	0x0800bfec
 8004298:	0800c8ac 	.word	0x0800c8ac
 800429c:	0800c8b4 	.word	0x0800c8b4

080042a0 <ailayer_dense_wt_q7_default>:

	return return_layer;
}

ailayer_t *ailayer_dense_wt_q7_default(ailayer_dense_q7_t *layer, ailayer_t *input_layer)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
    ailayer_t *return_layer;

	layer->base.result.dtype = aiq7;
 80042aa:	4b1c      	ldr	r3, [pc, #112]	@ (800431c <ailayer_dense_wt_q7_default+0x7c>)
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	61da      	str	r2, [r3, #28]
	layer->base.deltas.dtype = aiq7;
 80042b2:	4b1a      	ldr	r3, [pc, #104]	@ (800431c <ailayer_dense_wt_q7_default+0x7c>)
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	layer->weights.dtype = aiq7;
 80042ba:	4b18      	ldr	r3, [pc, #96]	@ (800431c <ailayer_dense_wt_q7_default+0x7c>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	layer->bias.dtype = aiq31; // Higher precision (s_bias = s_input + s_weights)
 80042c4:	4b16      	ldr	r3, [pc, #88]	@ (8004320 <ailayer_dense_wt_q7_default+0x80>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

	layer->base.calc_result_tensor_params = 0;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	635a      	str	r2, [r3, #52]	@ 0x34
	layer->base.init_params = 0;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	66da      	str	r2, [r3, #108]	@ 0x6c

	// Call "constructor" of base "class"
	return_layer = ailayer_dense(layer, input_layer);
 80042da:	6839      	ldr	r1, [r7, #0]
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7fe fd2d 	bl	8002d3c <ailayer_dense>
 80042e2:	60f8      	str	r0, [r7, #12]

	// Change shape to match transposed weights
	layer->weights.shape[0] = layer->neurons;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f0:	b292      	uxth	r2, r2
 80042f2:	801a      	strh	r2, [r3, #0]
	layer->weights.shape[1] = input_layer->result.shape[1];
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042fe:	3302      	adds	r3, #2
 8004300:	8852      	ldrh	r2, [r2, #2]
 8004302:	801a      	strh	r2, [r3, #0]

    // forward
	layer->linear = aimath_q7_default_linear32_bt;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a07      	ldr	r2, [pc, #28]	@ (8004324 <ailayer_dense_wt_q7_default+0x84>)
 8004308:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

	// backward
	// Not supported for q7
	return_layer->backward = 0;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	661a      	str	r2, [r3, #96]	@ 0x60

	return return_layer;
 8004312:	68fb      	ldr	r3, [r7, #12]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20000570 	.word	0x20000570
 8004320:	2000056c 	.word	0x2000056c
 8004324:	0800446d 	.word	0x0800446d

08004328 <ailayer_input_q7_default>:

	return ailayer_input(layer);
}

ailayer_t *ailayer_input_q7_default(ailayer_input_q7_t *layer)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
	layer->base.result.dtype = aiq7;
 8004330:	4b0a      	ldr	r3, [pc, #40]	@ (800435c <ailayer_input_q7_default+0x34>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	61da      	str	r2, [r3, #28]
	layer->base.deltas.dtype = aiq7;
 8004338:	4b08      	ldr	r3, [pc, #32]	@ (800435c <ailayer_input_q7_default+0x34>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	63da      	str	r2, [r3, #60]	@ 0x3c

	layer->base.calc_result_tensor_params = 0;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	635a      	str	r2, [r3, #52]	@ 0x34
	layer->base.init_params = 0;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	66da      	str	r2, [r3, #108]	@ 0x6c

	return ailayer_input(layer);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff f861 	bl	8003414 <ailayer_input>
 8004352:	4603      	mov	r3, r0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	20000570 	.word	0x20000570

08004360 <ailayer_relu_q7_default>:

	return ailayer_relu(layer, input_layer);
}

ailayer_t *ailayer_relu_q7_default(ailayer_relu_q7_t *layer, ailayer_t *input_layer)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
	layer->base.result.dtype = aiq7;
 800436a:	4b11      	ldr	r3, [pc, #68]	@ (80043b0 <ailayer_relu_q7_default+0x50>)
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	61da      	str	r2, [r3, #28]
	layer->base.deltas.dtype = aiq7;
 8004372:	4b0f      	ldr	r3, [pc, #60]	@ (80043b0 <ailayer_relu_q7_default+0x50>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	63da      	str	r2, [r3, #60]	@ 0x3c

	layer->base.calc_result_tensor_params = ailayer_relu_calc_result_tensor_params_q7_default;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a0d      	ldr	r2, [pc, #52]	@ (80043b4 <ailayer_relu_q7_default+0x54>)
 800437e:	635a      	str	r2, [r3, #52]	@ 0x34
	layer->base.init_params = 0;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	66da      	str	r2, [r3, #108]	@ 0x6c

	//forward
	layer->relu = aimath_q7_default_relu;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a0b      	ldr	r2, [pc, #44]	@ (80043b8 <ailayer_relu_q7_default+0x58>)
 800438a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

	// backward
	layer->d_relu = aimath_q7_default_d_relu;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a0a      	ldr	r2, [pc, #40]	@ (80043bc <ailayer_relu_q7_default+0x5c>)
 8004392:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	layer->multiply = aimath_q7_default_multiply;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a09      	ldr	r2, [pc, #36]	@ (80043c0 <ailayer_relu_q7_default+0x60>)
 800439a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

	return ailayer_relu(layer, input_layer);
 800439e:	6839      	ldr	r1, [r7, #0]
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff f909 	bl	80035b8 <ailayer_relu>
 80043a6:	4603      	mov	r3, r0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	20000570 	.word	0x20000570
 80043b4:	080043c5 	.word	0x080043c5
 80043b8:	08004959 	.word	0x08004959
 80043bc:	080049c7 	.word	0x080049c7
 80043c0:	08004719 	.word	0x08004719

080043c4 <ailayer_relu_calc_result_tensor_params_q7_default>:
	qparams->shift = ((aimath_q31_params_t *) (self->input_layer->result.tensor_params))->shift;
	qparams->zero_point = ((aimath_q31_params_t *) (self->input_layer->result.tensor_params))->zero_point;
}

void ailayer_relu_calc_result_tensor_params_q7_default(ailayer_t *self)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
	aimath_q7_params_t *qparams = (aimath_q7_params_t *) (self->result.tensor_params);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d0:	60fb      	str	r3, [r7, #12]

	// Values are the same as used in the relu q7 default math function
	qparams->shift = ((aimath_q7_params_t *) (self->input_layer->result.tensor_params))->shift;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d8:	881a      	ldrh	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	801a      	strh	r2, [r3, #0]
	qparams->zero_point = ((aimath_q7_params_t *) (self->input_layer->result.tensor_params))->zero_point;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	709a      	strb	r2, [r3, #2]
}
 80043ec:	bf00      	nop
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <ailayer_softmax_q7_default>:

	return ailayer_softmax(layer, input_layer);
}

ailayer_t *ailayer_softmax_q7_default(ailayer_softmax_q7_t *layer, ailayer_t *input_layer)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
	layer->base.result.dtype = aiq7;
 8004402:	4b0d      	ldr	r3, [pc, #52]	@ (8004438 <ailayer_softmax_q7_default+0x40>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	61da      	str	r2, [r3, #28]
	layer->base.deltas.dtype = aiq7;
 800440a:	4b0b      	ldr	r3, [pc, #44]	@ (8004438 <ailayer_softmax_q7_default+0x40>)
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	63da      	str	r2, [r3, #60]	@ 0x3c

	layer->base.calc_result_tensor_params = ailayer_softmax_calc_result_tensor_params_q7_default;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a09      	ldr	r2, [pc, #36]	@ (800443c <ailayer_softmax_q7_default+0x44>)
 8004416:	635a      	str	r2, [r3, #52]	@ 0x34
	layer->base.init_params = 0;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	66da      	str	r2, [r3, #108]	@ 0x6c

	//forward
	layer->softmax = aimath_q7_default_softmax;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a07      	ldr	r2, [pc, #28]	@ (8004440 <ailayer_softmax_q7_default+0x48>)
 8004422:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

	return ailayer_softmax(layer, input_layer);
 8004426:	6839      	ldr	r1, [r7, #0]
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7ff f97d 	bl	8003728 <ailayer_softmax>
 800442e:	4603      	mov	r3, r0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20000570 	.word	0x20000570
 800443c:	08004445 	.word	0x08004445
 8004440:	08004a31 	.word	0x08004a31

08004444 <ailayer_softmax_calc_result_tensor_params_q7_default>:
	qparams->shift = 32;
	qparams->zero_point = -2147483647;
}

void ailayer_softmax_calc_result_tensor_params_q7_default(ailayer_t *self)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
	aimath_q7_params_t *qparams = (aimath_q7_params_t *) (self->result.tensor_params);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004450:	60fb      	str	r3, [r7, #12]

	// Values are the same as used in the sigmoid q7 default math function
	qparams->shift = 8;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2208      	movs	r2, #8
 8004456:	801a      	strh	r2, [r3, #0]
	qparams->zero_point = -128;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2280      	movs	r2, #128	@ 0x80
 800445c:	709a      	strb	r2, [r3, #2]
}
 800445e:	bf00      	nop
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
	...

0800446c <aimath_q7_default_linear32_bt>:
	}
	return;
}

void aimath_q7_default_linear32_bt(const aitensor_t *a, const aitensor_t *b, const aitensor_t *c, aitensor_t *result)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b090      	sub	sp, #64	@ 0x40
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
	uint16_t i, j, k;
	int32_t sum, acc; // 16-bit accumulator
	uint16_t a_shift = ((aimath_q7_params_t *) a->tensor_params)->shift;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint16_t b_shift = ((aimath_q7_params_t *) b->tensor_params)->shift;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	853b      	strh	r3, [r7, #40]	@ 0x28
	uint16_t c_shift = ((aimath_q31_params_t *) c->tensor_params)->shift;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint16_t result_shift = ((aimath_q7_params_t *) result->tensor_params)->shift;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	84bb      	strh	r3, [r7, #36]	@ 0x24

	int8_t z_a = ((aimath_q7_params_t *) a->tensor_params)->zero_point;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	789b      	ldrb	r3, [r3, #2]
 80044a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	int8_t z_b = ((aimath_q7_params_t *) b->tensor_params)->zero_point;
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	789b      	ldrb	r3, [r3, #2]
 80044aa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	int8_t z_result = ((aimath_q7_params_t *) result->tensor_params)->zero_point;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	789b      	ldrb	r3, [r3, #2]
 80044b4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

	// Output scaling factor M = (S_1 * S_2) / S_3
	uint16_t output_shift = a_shift + b_shift - result_shift;
 80044b8:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80044ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80044bc:	4413      	add	r3, r2
 80044be:	b29a      	uxth	r2, r3
 80044c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	83fb      	strh	r3, [r7, #30]

	int8_t *a_data = (int8_t *) a->data;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	61bb      	str	r3, [r7, #24]
	int8_t *b_data = (int8_t *) b->data;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	617b      	str	r3, [r7, #20]
	int32_t *c_data;
	if(c != 0) c_data = (int32_t *) c->data;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <aimath_q7_default_linear32_bt+0x72>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int8_t *result_data = (int8_t *) result->data;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	613b      	str	r3, [r7, #16]


#ifdef AIDEBUG_SHAPE_CHECKS
	if(a->shape[1] != b->shape[1])
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	3302      	adds	r3, #2
 80044ea:	881a      	ldrh	r2, [r3, #0]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	3302      	adds	r3, #2
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d004      	beq.n	8004502 <aimath_q7_default_linear32_bt+0x96>
	{
		AILOG_E(aistring_error_q7_linear32_1);
 80044f8:	4b83      	ldr	r3, [pc, #524]	@ (8004708 <aimath_q7_default_linear32_bt+0x29c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4883      	ldr	r0, [pc, #524]	@ (800470c <aimath_q7_default_linear32_bt+0x2a0>)
 80044fe:	4798      	blx	r3
		return;
 8004500:	e0ff      	b.n	8004702 <aimath_q7_default_linear32_bt+0x296>
	}
	if(a->shape[0] != result->shape[0] || b->shape[0] != result->shape[1])
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	881a      	ldrh	r2, [r3, #0]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d108      	bne.n	8004524 <aimath_q7_default_linear32_bt+0xb8>
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	881a      	ldrh	r2, [r3, #0]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	3302      	adds	r3, #2
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d004      	beq.n	800452e <aimath_q7_default_linear32_bt+0xc2>
	{
		AILOG_E(aistring_error_q7_linear32_2);
 8004524:	4b78      	ldr	r3, [pc, #480]	@ (8004708 <aimath_q7_default_linear32_bt+0x29c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4879      	ldr	r0, [pc, #484]	@ (8004710 <aimath_q7_default_linear32_bt+0x2a4>)
 800452a:	4798      	blx	r3
		return;
 800452c:	e0e9      	b.n	8004702 <aimath_q7_default_linear32_bt+0x296>
	}
#endif
#ifdef AIDEBUG_GENERAL_CHECKS
	if(c_shift != a_shift + b_shift)
 800452e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004530:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8004532:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004534:	440b      	add	r3, r1
 8004536:	429a      	cmp	r2, r3
 8004538:	d004      	beq.n	8004544 <aimath_q7_default_linear32_bt+0xd8>
	{
		AILOG_E(aistring_error_q7_linear32_3);
 800453a:	4b73      	ldr	r3, [pc, #460]	@ (8004708 <aimath_q7_default_linear32_bt+0x29c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4875      	ldr	r0, [pc, #468]	@ (8004714 <aimath_q7_default_linear32_bt+0x2a8>)
 8004540:	4798      	blx	r3
		return;
 8004542:	e0de      	b.n	8004702 <aimath_q7_default_linear32_bt+0x296>
	}
#endif // AIDEBUG_GENERAL_CHECKS

	for(i = 0; i < a->shape[0]; i++)
 8004544:	2300      	movs	r3, #0
 8004546:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004548:	e0d3      	b.n	80046f2 <aimath_q7_default_linear32_bt+0x286>
	{
		for(j = 0; j < b->shape[0]; j++)
 800454a:	2300      	movs	r3, #0
 800454c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800454e:	e0c6      	b.n	80046de <aimath_q7_default_linear32_bt+0x272>
		{
			sum = 0;
 8004550:	2300      	movs	r3, #0
 8004552:	637b      	str	r3, [r7, #52]	@ 0x34
			for(k = 0; k < a->shape[1]; k++)
 8004554:	2300      	movs	r3, #0
 8004556:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004558:	e024      	b.n	80045a4 <aimath_q7_default_linear32_bt+0x138>
			{
				// uint32 += uint8 * uint8
				sum += (int32_t) a_data[i*a->shape[1] + k] * (int32_t) b_data[j*b->shape[1] + k];
 800455a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	6892      	ldr	r2, [r2, #8]
 8004560:	3202      	adds	r2, #2
 8004562:	8812      	ldrh	r2, [r2, #0]
 8004564:	fb03 f202 	mul.w	r2, r3, r2
 8004568:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800456a:	4413      	add	r3, r2
 800456c:	461a      	mov	r2, r3
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	4413      	add	r3, r2
 8004572:	f993 3000 	ldrsb.w	r3, [r3]
 8004576:	4619      	mov	r1, r3
 8004578:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	6892      	ldr	r2, [r2, #8]
 800457e:	3202      	adds	r2, #2
 8004580:	8812      	ldrh	r2, [r2, #0]
 8004582:	fb03 f202 	mul.w	r2, r3, r2
 8004586:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004588:	4413      	add	r3, r2
 800458a:	461a      	mov	r2, r3
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	4413      	add	r3, r2
 8004590:	f993 3000 	ldrsb.w	r3, [r3]
 8004594:	fb01 f303 	mul.w	r3, r1, r3
 8004598:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800459a:	4413      	add	r3, r2
 800459c:	637b      	str	r3, [r7, #52]	@ 0x34
			for(k = 0; k < a->shape[1]; k++)
 800459e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80045a0:	3301      	adds	r3, #1
 80045a2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	3302      	adds	r3, #2
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d3d3      	bcc.n	800455a <aimath_q7_default_linear32_bt+0xee>
			}
			// Add the zero point correction terms if zero point != 0
			if(z_a != 0){
 80045b2:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d028      	beq.n	800460c <aimath_q7_default_linear32_bt+0x1a0>
				// a_2 = sum(q_{2,jk}) from j=1 to N
				acc = 0;
 80045ba:	2300      	movs	r3, #0
 80045bc:	633b      	str	r3, [r7, #48]	@ 0x30
				for(k = 0; k < a->shape[1]; k++){
 80045be:	2300      	movs	r3, #0
 80045c0:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80045c2:	e014      	b.n	80045ee <aimath_q7_default_linear32_bt+0x182>
					acc += (int32_t) b_data[j*b->shape[1] + k];
 80045c4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	6892      	ldr	r2, [r2, #8]
 80045ca:	3202      	adds	r2, #2
 80045cc:	8812      	ldrh	r2, [r2, #0]
 80045ce:	fb03 f202 	mul.w	r2, r3, r2
 80045d2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80045d4:	4413      	add	r3, r2
 80045d6:	461a      	mov	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	4413      	add	r3, r2
 80045dc:	f993 3000 	ldrsb.w	r3, [r3]
 80045e0:	461a      	mov	r2, r3
 80045e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e4:	4413      	add	r3, r2
 80045e6:	633b      	str	r3, [r7, #48]	@ 0x30
				for(k = 0; k < a->shape[1]; k++){
 80045e8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80045ea:	3301      	adds	r3, #1
 80045ec:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	3302      	adds	r3, #2
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d3e3      	bcc.n	80045c4 <aimath_q7_default_linear32_bt+0x158>
				}
				sum -= z_a * acc;
 80045fc:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8004600:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004602:	fb02 f303 	mul.w	r3, r2, r3
 8004606:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	637b      	str	r3, [r7, #52]	@ 0x34
			}
			if(z_b != 0){
 800460c:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8004610:	2b00      	cmp	r3, #0
 8004612:	d028      	beq.n	8004666 <aimath_q7_default_linear32_bt+0x1fa>
				// a_1 = sum(q_{1,ij}) from j=1 to N
				acc = 0;
 8004614:	2300      	movs	r3, #0
 8004616:	633b      	str	r3, [r7, #48]	@ 0x30
				for(k = 0; k < a->shape[1]; k++){
 8004618:	2300      	movs	r3, #0
 800461a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800461c:	e014      	b.n	8004648 <aimath_q7_default_linear32_bt+0x1dc>
					acc += (int32_t) a_data[i*a->shape[1] + k];
 800461e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	6892      	ldr	r2, [r2, #8]
 8004624:	3202      	adds	r2, #2
 8004626:	8812      	ldrh	r2, [r2, #0]
 8004628:	fb03 f202 	mul.w	r2, r3, r2
 800462c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800462e:	4413      	add	r3, r2
 8004630:	461a      	mov	r2, r3
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	4413      	add	r3, r2
 8004636:	f993 3000 	ldrsb.w	r3, [r3]
 800463a:	461a      	mov	r2, r3
 800463c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800463e:	4413      	add	r3, r2
 8004640:	633b      	str	r3, [r7, #48]	@ 0x30
				for(k = 0; k < a->shape[1]; k++){
 8004642:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004644:	3301      	adds	r3, #1
 8004646:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	3302      	adds	r3, #2
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8004652:	429a      	cmp	r2, r3
 8004654:	d3e3      	bcc.n	800461e <aimath_q7_default_linear32_bt+0x1b2>
				}
				sum -= z_b * acc;
 8004656:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 800465a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800465c:	fb02 f303 	mul.w	r3, r2, r3
 8004660:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	637b      	str	r3, [r7, #52]	@ 0x34
			}
			if(z_a != 0 && z_b != 0){
 8004666:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800466a:	2b00      	cmp	r3, #0
 800466c:	d013      	beq.n	8004696 <aimath_q7_default_linear32_bt+0x22a>
 800466e:	f997 3022 	ldrsb.w	r3, [r7, #34]	@ 0x22
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00f      	beq.n	8004696 <aimath_q7_default_linear32_bt+0x22a>
				// N * Z_1 * Z_2
				sum += a->shape[1] * z_a * z_b;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	3302      	adds	r3, #2
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8004684:	fb02 f303 	mul.w	r3, r2, r3
 8004688:	f997 2022 	ldrsb.w	r2, [r7, #34]	@ 0x22
 800468c:	fb02 f303 	mul.w	r3, r2, r3
 8004690:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004692:	4413      	add	r3, r2
 8004694:	637b      	str	r3, [r7, #52]	@ 0x34
			}
			if(c != 0){
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d007      	beq.n	80046ac <aimath_q7_default_linear32_bt+0x240>
				// Bias add
				sum += c_data[j];
 800469c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046a2:	4413      	add	r3, r2
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046a8:	4413      	add	r3, r2
 80046aa:	637b      	str	r3, [r7, #52]	@ 0x34
			}

			result_data[i*b->shape[0] + j] = (int8_t)((sum >> output_shift) + (int16_t) z_result);
 80046ac:	8bfb      	ldrh	r3, [r7, #30]
 80046ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046b0:	fa42 f303 	asr.w	r3, r2, r3
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80046ba:	4413      	add	r3, r2
 80046bc:	b2d9      	uxtb	r1, r3
 80046be:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	6892      	ldr	r2, [r2, #8]
 80046c4:	8812      	ldrh	r2, [r2, #0]
 80046c6:	fb03 f202 	mul.w	r2, r3, r2
 80046ca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80046cc:	4413      	add	r3, r2
 80046ce:	461a      	mov	r2, r3
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	4413      	add	r3, r2
 80046d4:	b24a      	sxtb	r2, r1
 80046d6:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < b->shape[0]; j++)
 80046d8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80046da:	3301      	adds	r3, #1
 80046dc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80046e6:	429a      	cmp	r2, r3
 80046e8:	f4ff af32 	bcc.w	8004550 <aimath_q7_default_linear32_bt+0xe4>
	for(i = 0; i < a->shape[0]; i++)
 80046ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80046ee:	3301      	adds	r3, #1
 80046f0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80046fa:	429a      	cmp	r2, r3
 80046fc:	f4ff af25 	bcc.w	800454a <aimath_q7_default_linear32_bt+0xde>
		}
	}
	return;
 8004700:	bf00      	nop
}
 8004702:	3740      	adds	r7, #64	@ 0x40
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	20000544 	.word	0x20000544
 800470c:	0800c8cc 	.word	0x0800c8cc
 8004710:	0800c910 	.word	0x0800c910
 8004714:	0800c954 	.word	0x0800c954

08004718 <aimath_q7_default_multiply>:
void aimath_q7_default_mat_mul(const aitensor_t *a, const aitensor_t *b, aitensor_t *result){
	aimath_q7_default_linear32(a, b, 0, result);
}

void aimath_q7_default_multiply(const aitensor_t *a, const aitensor_t *b, aitensor_t *result)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08a      	sub	sp, #40	@ 0x28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
	uint32_t i;
	int32_t acc;

	int32_t z_a = (int32_t) ((aimath_q7_params_t *) a->tensor_params)->zero_point;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800472c:	623b      	str	r3, [r7, #32]
	int32_t z_b = (int32_t) ((aimath_q7_params_t *) b->tensor_params)->zero_point;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004736:	61fb      	str	r3, [r7, #28]
	int32_t z_result = (int32_t) ((aimath_q7_params_t *) result->tensor_params)->zero_point;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004740:	61bb      	str	r3, [r7, #24]

	uint16_t output_shift = ((aimath_q7_params_t *) a->tensor_params)->shift + ((aimath_q7_params_t *) b->tensor_params)->shift - ((aimath_q7_params_t *) result->tensor_params)->shift;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	881a      	ldrh	r2, [r3, #0]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	4413      	add	r3, r2
 8004750:	b29a      	uxth	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	82fb      	strh	r3, [r7, #22]

	// Check if zero point correction is needed
	if(z_a != 0 && z_b != 0){
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d050      	beq.n	8004804 <aimath_q7_default_multiply+0xec>
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d04d      	beq.n	8004804 <aimath_q7_default_multiply+0xec>
        for(i = 0; i < aimath_tensor_elements(a); i++){
 8004768:	2300      	movs	r3, #0
 800476a:	627b      	str	r3, [r7, #36]	@ 0x24
 800476c:	e042      	b.n	80047f4 <aimath_q7_default_multiply+0xdc>
            // q_a * q_b
            acc = (int32_t) ((int8_t *) a->data)[i] * (int32_t) ((int8_t *) b->data)[i];
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	691a      	ldr	r2, [r3, #16]
 8004772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004774:	4413      	add	r3, r2
 8004776:	f993 3000 	ldrsb.w	r3, [r3]
 800477a:	4619      	mov	r1, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	691a      	ldr	r2, [r3, #16]
 8004780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004782:	4413      	add	r3, r2
 8004784:	f993 3000 	ldrsb.w	r3, [r3]
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	613b      	str	r3, [r7, #16]

            // - q_b * z_a
            acc -= (int32_t) ((int8_t *) b->data)[i] * z_a;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	691a      	ldr	r2, [r3, #16]
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	4413      	add	r3, r2
 8004796:	f993 3000 	ldrsb.w	r3, [r3]
 800479a:	461a      	mov	r2, r3
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	fb02 f303 	mul.w	r3, r2, r3
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	613b      	str	r3, [r7, #16]

            // - q_a * z_b
            acc -= (int32_t) ((int8_t *) a->data)[i] * z_b;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ae:	4413      	add	r3, r2
 80047b0:	f993 3000 	ldrsb.w	r3, [r3]
 80047b4:	461a      	mov	r2, r3
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	fb02 f303 	mul.w	r3, r2, r3
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	613b      	str	r3, [r7, #16]

            // + z_a * z_b
            acc += z_a * z_b;
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	69fa      	ldr	r2, [r7, #28]
 80047c6:	fb02 f303 	mul.w	r3, r2, r3
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4413      	add	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]

            ((int8_t *) result->data)[i] = (int8_t) ((acc >> output_shift) + z_result);
 80047d0:	8afb      	ldrh	r3, [r7, #22]
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	fa42 f303 	asr.w	r3, r2, r3
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	4413      	add	r3, r2
 80047e0:	b2d9      	uxtb	r1, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691a      	ldr	r2, [r3, #16]
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	4413      	add	r3, r2
 80047ea:	b24a      	sxtb	r2, r1
 80047ec:	701a      	strb	r2, [r3, #0]
        for(i = 0; i < aimath_tensor_elements(a); i++){
 80047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f0:	3301      	adds	r3, #1
 80047f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f7ff f821 	bl	800383c <aimath_tensor_elements>
 80047fa:	4602      	mov	r2, r0
 80047fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fe:	4293      	cmp	r3, r2
 8004800:	d3b5      	bcc.n	800476e <aimath_q7_default_multiply+0x56>
	if(z_a != 0 && z_b != 0){
 8004802:	e0a5      	b.n	8004950 <aimath_q7_default_multiply+0x238>
        }
	}
	else if(z_a != 0){
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d039      	beq.n	800487e <aimath_q7_default_multiply+0x166>
        for(i = 0; i < aimath_tensor_elements(a); i++){
 800480a:	2300      	movs	r3, #0
 800480c:	627b      	str	r3, [r7, #36]	@ 0x24
 800480e:	e02e      	b.n	800486e <aimath_q7_default_multiply+0x156>
            // q_a * q_b
            acc = (int32_t) ((int8_t *) a->data)[i] * (int32_t) ((int8_t *) b->data)[i];
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004816:	4413      	add	r3, r2
 8004818:	f993 3000 	ldrsb.w	r3, [r3]
 800481c:	4619      	mov	r1, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	691a      	ldr	r2, [r3, #16]
 8004822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004824:	4413      	add	r3, r2
 8004826:	f993 3000 	ldrsb.w	r3, [r3]
 800482a:	fb01 f303 	mul.w	r3, r1, r3
 800482e:	613b      	str	r3, [r7, #16]

            // - q_b * z_a
            acc -= (int32_t) ((int8_t *) b->data)[i] * z_a;
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	691a      	ldr	r2, [r3, #16]
 8004834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004836:	4413      	add	r3, r2
 8004838:	f993 3000 	ldrsb.w	r3, [r3]
 800483c:	461a      	mov	r2, r3
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	fb02 f303 	mul.w	r3, r2, r3
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	613b      	str	r3, [r7, #16]

            ((int8_t *) result->data)[i] = (int8_t) ((acc >> output_shift) + z_result);
 800484a:	8afb      	ldrh	r3, [r7, #22]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	fa42 f303 	asr.w	r3, r2, r3
 8004852:	b2da      	uxtb	r2, r3
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	b2db      	uxtb	r3, r3
 8004858:	4413      	add	r3, r2
 800485a:	b2d9      	uxtb	r1, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004862:	4413      	add	r3, r2
 8004864:	b24a      	sxtb	r2, r1
 8004866:	701a      	strb	r2, [r3, #0]
        for(i = 0; i < aimath_tensor_elements(a); i++){
 8004868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486a:	3301      	adds	r3, #1
 800486c:	627b      	str	r3, [r7, #36]	@ 0x24
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f7fe ffe4 	bl	800383c <aimath_tensor_elements>
 8004874:	4602      	mov	r2, r0
 8004876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004878:	4293      	cmp	r3, r2
 800487a:	d3c9      	bcc.n	8004810 <aimath_q7_default_multiply+0xf8>
            acc = (int32_t) ((int8_t *) a->data)[i] * (int32_t) ((int8_t *) b->data)[i];

            ((int8_t *) result->data)[i] = (int8_t) ((acc >> output_shift) + z_result);
        }
	}
	return;
 800487c:	e069      	b.n	8004952 <aimath_q7_default_multiply+0x23a>
	else if(z_b != 0){
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d039      	beq.n	80048f8 <aimath_q7_default_multiply+0x1e0>
        for(i = 0; i < aimath_tensor_elements(a); i++){
 8004884:	2300      	movs	r3, #0
 8004886:	627b      	str	r3, [r7, #36]	@ 0x24
 8004888:	e02e      	b.n	80048e8 <aimath_q7_default_multiply+0x1d0>
            acc = (int32_t) ((int8_t *) a->data)[i] * (int32_t) ((int8_t *) b->data)[i];
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004890:	4413      	add	r3, r2
 8004892:	f993 3000 	ldrsb.w	r3, [r3]
 8004896:	4619      	mov	r1, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489e:	4413      	add	r3, r2
 80048a0:	f993 3000 	ldrsb.w	r3, [r3]
 80048a4:	fb01 f303 	mul.w	r3, r1, r3
 80048a8:	613b      	str	r3, [r7, #16]
            acc -= (int32_t) ((int8_t *) a->data)[i] * z_b;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	691a      	ldr	r2, [r3, #16]
 80048ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b0:	4413      	add	r3, r2
 80048b2:	f993 3000 	ldrsb.w	r3, [r3]
 80048b6:	461a      	mov	r2, r3
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	fb02 f303 	mul.w	r3, r2, r3
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	613b      	str	r3, [r7, #16]
            ((int8_t *) result->data)[i] = (int8_t) ((acc >> output_shift) + z_result);
 80048c4:	8afb      	ldrh	r3, [r7, #22]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	fa42 f303 	asr.w	r3, r2, r3
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	4413      	add	r3, r2
 80048d4:	b2d9      	uxtb	r1, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691a      	ldr	r2, [r3, #16]
 80048da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048dc:	4413      	add	r3, r2
 80048de:	b24a      	sxtb	r2, r1
 80048e0:	701a      	strb	r2, [r3, #0]
        for(i = 0; i < aimath_tensor_elements(a); i++){
 80048e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e4:	3301      	adds	r3, #1
 80048e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f7fe ffa7 	bl	800383c <aimath_tensor_elements>
 80048ee:	4602      	mov	r2, r0
 80048f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d3c9      	bcc.n	800488a <aimath_q7_default_multiply+0x172>
	return;
 80048f6:	e02c      	b.n	8004952 <aimath_q7_default_multiply+0x23a>
        for(i = 0; i < aimath_tensor_elements(a); i++){
 80048f8:	2300      	movs	r3, #0
 80048fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80048fc:	e021      	b.n	8004942 <aimath_q7_default_multiply+0x22a>
            acc = (int32_t) ((int8_t *) a->data)[i] * (int32_t) ((int8_t *) b->data)[i];
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	691a      	ldr	r2, [r3, #16]
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	4413      	add	r3, r2
 8004906:	f993 3000 	ldrsb.w	r3, [r3]
 800490a:	4619      	mov	r1, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004912:	4413      	add	r3, r2
 8004914:	f993 3000 	ldrsb.w	r3, [r3]
 8004918:	fb01 f303 	mul.w	r3, r1, r3
 800491c:	613b      	str	r3, [r7, #16]
            ((int8_t *) result->data)[i] = (int8_t) ((acc >> output_shift) + z_result);
 800491e:	8afb      	ldrh	r3, [r7, #22]
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	fa42 f303 	asr.w	r3, r2, r3
 8004926:	b2da      	uxtb	r2, r3
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	b2db      	uxtb	r3, r3
 800492c:	4413      	add	r3, r2
 800492e:	b2d9      	uxtb	r1, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004936:	4413      	add	r3, r2
 8004938:	b24a      	sxtb	r2, r1
 800493a:	701a      	strb	r2, [r3, #0]
        for(i = 0; i < aimath_tensor_elements(a); i++){
 800493c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493e:	3301      	adds	r3, #1
 8004940:	627b      	str	r3, [r7, #36]	@ 0x24
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f7fe ff7a 	bl	800383c <aimath_tensor_elements>
 8004948:	4602      	mov	r2, r0
 800494a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494c:	4293      	cmp	r3, r2
 800494e:	d3d6      	bcc.n	80048fe <aimath_q7_default_multiply+0x1e6>
	return;
 8004950:	bf00      	nop
}
 8004952:	3728      	adds	r7, #40	@ 0x28
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <aimath_q7_default_relu>:
	((aimath_q7_params_t *) result->tensor_params)->zero_point = x_zero_point;

	return;
}

void aimath_q7_default_relu(const aitensor_t *x, aitensor_t *result) {
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
    uint32_t i;

    uint16_t shift = ((aimath_q7_params_t *) x->tensor_params)->shift;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	817b      	strh	r3, [r7, #10]
    int8_t zero_point = ((aimath_q7_params_t *) x->tensor_params)->zero_point;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	789b      	ldrb	r3, [r3, #2]
 8004970:	727b      	strb	r3, [r7, #9]

    for(i = 0; i < aimath_tensor_elements(x); i++)
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	e013      	b.n	80049a0 <aimath_q7_default_relu+0x48>
	{
        ((int8_t *) result->data)[i] = ((int8_t *) x->data)[i] > zero_point ? ((int8_t *) x->data)[i] : zero_point;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4413      	add	r3, r2
 8004980:	f993 2000 	ldrsb.w	r2, [r3]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	6919      	ldr	r1, [r3, #16]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	440b      	add	r3, r1
 800498c:	f997 1009 	ldrsb.w	r1, [r7, #9]
 8004990:	428a      	cmp	r2, r1
 8004992:	bfb8      	it	lt
 8004994:	460a      	movlt	r2, r1
 8004996:	b252      	sxtb	r2, r2
 8004998:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < aimath_tensor_elements(x); i++)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	3301      	adds	r3, #1
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7fe ff4b 	bl	800383c <aimath_tensor_elements>
 80049a6:	4602      	mov	r2, r0
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d3e4      	bcc.n	8004978 <aimath_q7_default_relu+0x20>
	}

	((aimath_q7_params_t *) result->tensor_params)->shift = shift;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	897a      	ldrh	r2, [r7, #10]
 80049b4:	801a      	strh	r2, [r3, #0]
	((aimath_q7_params_t *) result->tensor_params)->zero_point = zero_point;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	7a7a      	ldrb	r2, [r7, #9]
 80049bc:	709a      	strb	r2, [r3, #2]

	return;
 80049be:	bf00      	nop
}
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <aimath_q7_default_d_relu>:

void aimath_q7_default_d_relu(const aitensor_t *x, aitensor_t *result)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	6039      	str	r1, [r7, #0]
	uint32_t i;
    int8_t zero_point = ((aimath_q7_params_t *) x->tensor_params)->zero_point;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	789b      	ldrb	r3, [r3, #2]
 80049d6:	72fb      	strb	r3, [r7, #11]

	for(i = 0; i < aimath_tensor_elements(x); i++)
 80049d8:	2300      	movs	r3, #0
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	e015      	b.n	8004a0a <aimath_q7_default_d_relu+0x44>
	{
		((int8_t *) result->data)[i] = ((int8_t *) x->data)[i] >= zero_point ? 1 : 0;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4413      	add	r3, r2
 80049e6:	f993 3000 	ldrsb.w	r3, [r3]
 80049ea:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	bfd4      	ite	le
 80049f2:	2301      	movle	r3, #1
 80049f4:	2300      	movgt	r3, #0
 80049f6:	b2d9      	uxtb	r1, r3
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	b24a      	sxtb	r2, r1
 8004a02:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < aimath_tensor_elements(x); i++)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3301      	adds	r3, #1
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fe ff16 	bl	800383c <aimath_tensor_elements>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d3e2      	bcc.n	80049de <aimath_q7_default_d_relu+0x18>
	}

	((aimath_q7_params_t *) result->tensor_params)->shift = 0;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	801a      	strh	r2, [r3, #0]
	((aimath_q7_params_t *) result->tensor_params)->zero_point = 0;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	709a      	strb	r2, [r3, #2]

	return;
 8004a28:	bf00      	nop
}
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <aimath_q7_default_softmax>:
	((aimath_q7_params_t *) result->tensor_params)->zero_point = 0;

	return;
}

void aimath_q7_default_softmax(const aitensor_t *x, aitensor_t *result) {
 8004a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a34:	b08f      	sub	sp, #60	@ 0x3c
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	6039      	str	r1, [r7, #0]
 8004a3c:	466b      	mov	r3, sp
 8004a3e:	461e      	mov	r6, r3
    int32_t i, j;
	int16_t borders[4] = {-16, -32, -48, -80}; //  {-1.0, -2.0, -3.0, -5.0}
 8004a40:	4aac      	ldr	r2, [pc, #688]	@ (8004cf4 <aimath_q7_default_softmax+0x2c4>)
 8004a42:	f107 0308 	add.w	r3, r7, #8
 8004a46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004a4a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t border_shift = 4;
 8004a4e:	2304      	movs	r3, #4
 8004a50:	843b      	strh	r3, [r7, #32]
	int8_t max;

	uint16_t x_shift = ((aimath_q7_params_t *) x->tensor_params)->shift;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	881b      	ldrh	r3, [r3, #0]
 8004a58:	83fb      	strh	r3, [r7, #30]
	int8_t x_zero_point = ((aimath_q7_params_t *) x->tensor_params)->zero_point;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	789b      	ldrb	r3, [r3, #2]
 8004a60:	777b      	strb	r3, [r7, #29]

	int32_t res;
	int32_t acc = 0;
 8004a62:	2300      	movs	r3, #0
 8004a64:	627b      	str	r3, [r7, #36]	@ 0x24
	int8_t e_x[aimath_tensor_elements(x)];
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7fe fee8 	bl	800383c <aimath_tensor_elements>
 8004a6c:	4601      	mov	r1, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	3b01      	subs	r3, #1
 8004a72:	61bb      	str	r3, [r7, #24]
 8004a74:	2300      	movs	r3, #0
 8004a76:	4688      	mov	r8, r1
 8004a78:	4699      	mov	r9, r3
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a8e:	2300      	movs	r3, #0
 8004a90:	460c      	mov	r4, r1
 8004a92:	461d      	mov	r5, r3
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	00eb      	lsls	r3, r5, #3
 8004a9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aa2:	00e2      	lsls	r2, r4, #3
 8004aa4:	1dcb      	adds	r3, r1, #7
 8004aa6:	08db      	lsrs	r3, r3, #3
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	ebad 0d03 	sub.w	sp, sp, r3
 8004aae:	466b      	mov	r3, sp
 8004ab0:	3300      	adds	r3, #0
 8004ab2:	617b      	str	r3, [r7, #20]
	int16_t x_data_point;

	// Multiplier for array index calculation
 	uint16_t multiplier = 1;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	847b      	strh	r3, [r7, #34]	@ 0x22
 	for(i = x->dim - 1; i >= 1; i--){
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	791b      	ldrb	r3, [r3, #4]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ac0:	e00c      	b.n	8004adc <aimath_q7_default_softmax+0xac>
        multiplier *= x->shape[i];
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689a      	ldr	r2, [r3, #8]
 8004ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	4413      	add	r3, r2
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004ad0:	fb12 f303 	smulbb	r3, r2, r3
 8004ad4:	847b      	strh	r3, [r7, #34]	@ 0x22
 	for(i = x->dim - 1; i >= 1; i--){
 8004ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	637b      	str	r3, [r7, #52]	@ 0x34
 8004adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	dcef      	bgt.n	8004ac2 <aimath_q7_default_softmax+0x92>
 	}

 	if(x_shift > border_shift){
 8004ae2:	8bfa      	ldrh	r2, [r7, #30]
 8004ae4:	8c3b      	ldrh	r3, [r7, #32]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d928      	bls.n	8004b3c <aimath_q7_default_softmax+0x10c>
		borders[0] <<= (x_shift - border_shift);
 8004aea:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004aee:	4619      	mov	r1, r3
 8004af0:	8bfa      	ldrh	r2, [r7, #30]
 8004af2:	8c3b      	ldrh	r3, [r7, #32]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	fa01 f303 	lsl.w	r3, r1, r3
 8004afa:	b21b      	sxth	r3, r3
 8004afc:	813b      	strh	r3, [r7, #8]
		borders[1] <<= (x_shift - border_shift);
 8004afe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004b02:	4619      	mov	r1, r3
 8004b04:	8bfa      	ldrh	r2, [r7, #30]
 8004b06:	8c3b      	ldrh	r3, [r7, #32]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0e:	b21b      	sxth	r3, r3
 8004b10:	817b      	strh	r3, [r7, #10]
		borders[2] <<= (x_shift - border_shift);
 8004b12:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004b16:	4619      	mov	r1, r3
 8004b18:	8bfa      	ldrh	r2, [r7, #30]
 8004b1a:	8c3b      	ldrh	r3, [r7, #32]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b22:	b21b      	sxth	r3, r3
 8004b24:	81bb      	strh	r3, [r7, #12]
		borders[3] <<= (x_shift - border_shift);
 8004b26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	8bfa      	ldrh	r2, [r7, #30]
 8004b2e:	8c3b      	ldrh	r3, [r7, #32]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	fa01 f303 	lsl.w	r3, r1, r3
 8004b36:	b21b      	sxth	r3, r3
 8004b38:	81fb      	strh	r3, [r7, #14]
 8004b3a:	e027      	b.n	8004b8c <aimath_q7_default_softmax+0x15c>
	}
	else{
        borders[0] >>= (border_shift - x_shift);
 8004b3c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004b40:	4619      	mov	r1, r3
 8004b42:	8c3a      	ldrh	r2, [r7, #32]
 8004b44:	8bfb      	ldrh	r3, [r7, #30]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	fa41 f303 	asr.w	r3, r1, r3
 8004b4c:	b21b      	sxth	r3, r3
 8004b4e:	813b      	strh	r3, [r7, #8]
		borders[1] >>= (border_shift - x_shift);
 8004b50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004b54:	4619      	mov	r1, r3
 8004b56:	8c3a      	ldrh	r2, [r7, #32]
 8004b58:	8bfb      	ldrh	r3, [r7, #30]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	fa41 f303 	asr.w	r3, r1, r3
 8004b60:	b21b      	sxth	r3, r3
 8004b62:	817b      	strh	r3, [r7, #10]
		borders[2] >>= (border_shift - x_shift);
 8004b64:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004b68:	4619      	mov	r1, r3
 8004b6a:	8c3a      	ldrh	r2, [r7, #32]
 8004b6c:	8bfb      	ldrh	r3, [r7, #30]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	fa41 f303 	asr.w	r3, r1, r3
 8004b74:	b21b      	sxth	r3, r3
 8004b76:	81bb      	strh	r3, [r7, #12]
		borders[3] >>= (border_shift - x_shift);
 8004b78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	8c3a      	ldrh	r2, [r7, #32]
 8004b80:	8bfb      	ldrh	r3, [r7, #30]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	fa41 f303 	asr.w	r3, r1, r3
 8004b88:	b21b      	sxth	r3, r3
 8004b8a:	81fb      	strh	r3, [r7, #14]
	}

    for(i = 0; i < x->shape[0]; i++){
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b90:	e0d8      	b.n	8004d44 <aimath_q7_default_softmax+0x314>
        // calc max value for numeric stability
        max = ((int8_t *) x->data)[i * multiplier];
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004b98:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004b9a:	fb01 f202 	mul.w	r2, r1, r2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        for (j = 1; j < multiplier; j++) {
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004baa:	e01d      	b.n	8004be8 <aimath_q7_default_softmax+0x1b8>
            if (((int8_t *) x->data)[i * multiplier + j] > max) {
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004bb2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004bb4:	fb02 f101 	mul.w	r1, r2, r1
 8004bb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bba:	440a      	add	r2, r1
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f993 3000 	ldrsb.w	r3, [r3]
 8004bc2:	f997 202f 	ldrsb.w	r2, [r7, #47]	@ 0x2f
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	da0b      	bge.n	8004be2 <aimath_q7_default_softmax+0x1b2>
                max = ((int8_t *) x->data)[i * multiplier + j];
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004bd0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004bd2:	fb02 f101 	mul.w	r1, r2, r1
 8004bd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bd8:	440a      	add	r2, r1
 8004bda:	4413      	add	r3, r2
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        for (j = 1; j < multiplier; j++) {
 8004be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be4:	3301      	adds	r3, #1
 8004be6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004be8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bec:	429a      	cmp	r2, r3
 8004bee:	dbdd      	blt.n	8004bac <aimath_q7_default_softmax+0x17c>
            }
        }
        x_zero_point = max;
 8004bf0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004bf4:	777b      	strb	r3, [r7, #29]

        // calc exp functions
        acc = 0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	627b      	str	r3, [r7, #36]	@ 0x24
        for(j = 0; j < multiplier; j++)
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bfe:	e071      	b.n	8004ce4 <aimath_q7_default_softmax+0x2b4>
        {
            x_data_point = (int16_t) ((int8_t *) x->data)[i * multiplier + j] - (int16_t) x_zero_point;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004c06:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004c08:	fb02 f101 	mul.w	r1, r2, r1
 8004c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c0e:	440a      	add	r2, r1
 8004c10:	4413      	add	r3, r2
 8004c12:	f993 3000 	ldrsb.w	r3, [r3]
 8004c16:	461a      	mov	r2, r3
 8004c18:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004c1c:	b21b      	sxth	r3, r3
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	827b      	strh	r3, [r7, #18]

            if (x_data_point > borders[0]) {
 8004c22:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004c26:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	dd0c      	ble.n	8004c48 <aimath_q7_default_softmax+0x218>
                res = ((161 * x_data_point) >> x_shift) + 127;
 8004c2e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	015b      	lsls	r3, r3, #5
 8004c3a:	441a      	add	r2, r3
 8004c3c:	8bfb      	ldrh	r3, [r7, #30]
 8004c3e:	fa42 f303 	asr.w	r3, r2, r3
 8004c42:	337f      	adds	r3, #127	@ 0x7f
 8004c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c46:	e03b      	b.n	8004cc0 <aimath_q7_default_softmax+0x290>
            }
            else if (x_data_point > borders[1]) {
 8004c48:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004c4c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	dd0c      	ble.n	8004c6e <aimath_q7_default_softmax+0x23e>
                res = ((59 * x_data_point) >> x_shift) + 26;
 8004c54:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	1a9b      	subs	r3, r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	1a9a      	subs	r2, r3, r2
 8004c62:	8bfb      	ldrh	r3, [r7, #30]
 8004c64:	fa42 f303 	asr.w	r3, r2, r3
 8004c68:	331a      	adds	r3, #26
 8004c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c6c:	e028      	b.n	8004cc0 <aimath_q7_default_softmax+0x290>
            }
            else if (x_data_point > borders[2]) {
 8004c6e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004c72:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	dd0c      	ble.n	8004c94 <aimath_q7_default_softmax+0x264>
                res = ((23 * x_data_point) >> x_shift) - 46;
 8004c7a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	4413      	add	r3, r2
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	1a9a      	subs	r2, r3, r2
 8004c88:	8bfb      	ldrh	r3, [r7, #30]
 8004c8a:	fa42 f303 	asr.w	r3, r2, r3
 8004c8e:	3b2e      	subs	r3, #46	@ 0x2e
 8004c90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c92:	e015      	b.n	8004cc0 <aimath_q7_default_softmax+0x290>
            }
            else if (x_data_point > borders[3]) {
 8004c94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c98:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	dd0c      	ble.n	8004cba <aimath_q7_default_softmax+0x28a>
                res = ((6 * x_data_point) >> x_shift) - 96;
 8004ca0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	4413      	add	r3, r2
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	461a      	mov	r2, r3
 8004cae:	8bfb      	ldrh	r3, [r7, #30]
 8004cb0:	fa42 f303 	asr.w	r3, r2, r3
 8004cb4:	3b60      	subs	r3, #96	@ 0x60
 8004cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cb8:	e002      	b.n	8004cc0 <aimath_q7_default_softmax+0x290>
            }
            else {
                res = -128;
 8004cba:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8004cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

            acc += (res + 128);
 8004cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc2:	3380      	adds	r3, #128	@ 0x80
 8004cc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cc6:	4413      	add	r3, r2
 8004cc8:	627b      	str	r3, [r7, #36]	@ 0x24
            e_x[i * multiplier + j] = (int8_t) res;
 8004cca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004ccc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004cce:	fb03 f202 	mul.w	r2, r3, r2
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd4:	4413      	add	r3, r2
 8004cd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cd8:	b251      	sxtb	r1, r2
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	54d1      	strb	r1, [r2, r3]
        for(j = 0; j < multiplier; j++)
 8004cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ce4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004ce6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	db89      	blt.n	8004c00 <aimath_q7_default_softmax+0x1d0>
        }

        //calc softmax
        for(j = 0; j < multiplier; j++)
 8004cec:	2300      	movs	r3, #0
 8004cee:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cf0:	e021      	b.n	8004d36 <aimath_q7_default_softmax+0x306>
 8004cf2:	bf00      	nop
 8004cf4:	0800c024 	.word	0x0800c024
        {
            res = ((((int32_t) e_x[i * multiplier + j] + 128) << 8) / (acc + 1)) - 128;
 8004cf8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004cfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004cfc:	fb03 f202 	mul.w	r2, r3, r2
 8004d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d02:	4413      	add	r3, r2
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	56d3      	ldrsb	r3, [r2, r3]
 8004d08:	3380      	adds	r3, #128	@ 0x80
 8004d0a:	021a      	lsls	r2, r3, #8
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0e:	3301      	adds	r3, #1
 8004d10:	fb92 f3f3 	sdiv	r3, r2, r3
 8004d14:	3b80      	subs	r3, #128	@ 0x80
 8004d16:	62bb      	str	r3, [r7, #40]	@ 0x28
            ((int8_t *) result->data)[i * multiplier + j] = (int8_t) res;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004d1e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004d20:	fb02 f101 	mul.w	r1, r2, r1
 8004d24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d26:	440a      	add	r2, r1
 8004d28:	4413      	add	r3, r2
 8004d2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d2c:	b252      	sxtb	r2, r2
 8004d2e:	701a      	strb	r2, [r3, #0]
        for(j = 0; j < multiplier; j++)
 8004d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d32:	3301      	adds	r3, #1
 8004d34:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d36:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004d38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	dbdc      	blt.n	8004cf8 <aimath_q7_default_softmax+0x2c8>
    for(i = 0; i < x->shape[0]; i++){
 8004d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d40:	3301      	adds	r3, #1
 8004d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	f6ff af1f 	blt.w	8004b92 <aimath_q7_default_softmax+0x162>
        }
 	}

 	((aimath_q7_params_t *) result->tensor_params)->shift = 8;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	2208      	movs	r2, #8
 8004d5a:	801a      	strh	r2, [r3, #0]
	((aimath_q7_params_t *) result->tensor_params)->zero_point = -128;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	2280      	movs	r2, #128	@ 0x80
 8004d62:	709a      	strb	r2, [r3, #2]

	return;
 8004d64:	bf00      	nop
 8004d66:	46b5      	mov	sp, r6
}
 8004d68:	373c      	adds	r7, #60	@ 0x3c
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d74:	4b0e      	ldr	r3, [pc, #56]	@ (8004db0 <HAL_Init+0x40>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a0d      	ldr	r2, [pc, #52]	@ (8004db0 <HAL_Init+0x40>)
 8004d7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d80:	4b0b      	ldr	r3, [pc, #44]	@ (8004db0 <HAL_Init+0x40>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a0a      	ldr	r2, [pc, #40]	@ (8004db0 <HAL_Init+0x40>)
 8004d86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d8c:	4b08      	ldr	r3, [pc, #32]	@ (8004db0 <HAL_Init+0x40>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a07      	ldr	r2, [pc, #28]	@ (8004db0 <HAL_Init+0x40>)
 8004d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d98:	2003      	movs	r0, #3
 8004d9a:	f000 f94f 	bl	800503c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d9e:	2000      	movs	r0, #0
 8004da0:	f000 f808 	bl	8004db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004da4:	f7fd fb30 	bl	8002408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	40023c00 	.word	0x40023c00

08004db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004dbc:	4b12      	ldr	r3, [pc, #72]	@ (8004e08 <HAL_InitTick+0x54>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	4b12      	ldr	r3, [pc, #72]	@ (8004e0c <HAL_InitTick+0x58>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8004dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 f967 	bl	80050a6 <HAL_SYSTICK_Config>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e00e      	b.n	8004e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b0f      	cmp	r3, #15
 8004de6:	d80a      	bhi.n	8004dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004de8:	2200      	movs	r2, #0
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	f04f 30ff 	mov.w	r0, #4294967295
 8004df0:	f000 f92f 	bl	8005052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004df4:	4a06      	ldr	r2, [pc, #24]	@ (8004e10 <HAL_InitTick+0x5c>)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e000      	b.n	8004e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	20000540 	.word	0x20000540
 8004e0c:	20000578 	.word	0x20000578
 8004e10:	20000574 	.word	0x20000574

08004e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e18:	4b06      	ldr	r3, [pc, #24]	@ (8004e34 <HAL_IncTick+0x20>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	4b06      	ldr	r3, [pc, #24]	@ (8004e38 <HAL_IncTick+0x24>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4413      	add	r3, r2
 8004e24:	4a04      	ldr	r2, [pc, #16]	@ (8004e38 <HAL_IncTick+0x24>)
 8004e26:	6013      	str	r3, [r2, #0]
}
 8004e28:	bf00      	nop
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	20000578 	.word	0x20000578
 8004e38:	200009c8 	.word	0x200009c8

08004e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8004e40:	4b03      	ldr	r3, [pc, #12]	@ (8004e50 <HAL_GetTick+0x14>)
 8004e42:	681b      	ldr	r3, [r3, #0]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	200009c8 	.word	0x200009c8

08004e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e5c:	f7ff ffee 	bl	8004e3c <HAL_GetTick>
 8004e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6c:	d005      	beq.n	8004e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e98 <HAL_Delay+0x44>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	461a      	mov	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4413      	add	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004e7a:	bf00      	nop
 8004e7c:	f7ff ffde 	bl	8004e3c <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d8f7      	bhi.n	8004e7c <HAL_Delay+0x28>
  {
  }
}
 8004e8c:	bf00      	nop
 8004e8e:	bf00      	nop
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000578 	.word	0x20000578

08004e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004eac:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004eb8:	4013      	ands	r3, r2
 8004eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ec4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ece:	4a04      	ldr	r2, [pc, #16]	@ (8004ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	60d3      	str	r3, [r2, #12]
}
 8004ed4:	bf00      	nop
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr
 8004ee0:	e000ed00 	.word	0xe000ed00

08004ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ee8:	4b04      	ldr	r3, [pc, #16]	@ (8004efc <__NVIC_GetPriorityGrouping+0x18>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	0a1b      	lsrs	r3, r3, #8
 8004eee:	f003 0307 	and.w	r3, r3, #7
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	e000ed00 	.word	0xe000ed00

08004f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	4603      	mov	r3, r0
 8004f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	db0b      	blt.n	8004f2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	f003 021f 	and.w	r2, r3, #31
 8004f18:	4907      	ldr	r1, [pc, #28]	@ (8004f38 <__NVIC_EnableIRQ+0x38>)
 8004f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f1e:	095b      	lsrs	r3, r3, #5
 8004f20:	2001      	movs	r0, #1
 8004f22:	fa00 f202 	lsl.w	r2, r0, r2
 8004f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	e000e100 	.word	0xe000e100

08004f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	4603      	mov	r3, r0
 8004f44:	6039      	str	r1, [r7, #0]
 8004f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	db0a      	blt.n	8004f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	490c      	ldr	r1, [pc, #48]	@ (8004f88 <__NVIC_SetPriority+0x4c>)
 8004f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f5a:	0112      	lsls	r2, r2, #4
 8004f5c:	b2d2      	uxtb	r2, r2
 8004f5e:	440b      	add	r3, r1
 8004f60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f64:	e00a      	b.n	8004f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	4908      	ldr	r1, [pc, #32]	@ (8004f8c <__NVIC_SetPriority+0x50>)
 8004f6c:	79fb      	ldrb	r3, [r7, #7]
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	3b04      	subs	r3, #4
 8004f74:	0112      	lsls	r2, r2, #4
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	440b      	add	r3, r1
 8004f7a:	761a      	strb	r2, [r3, #24]
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	e000e100 	.word	0xe000e100
 8004f8c:	e000ed00 	.word	0xe000ed00

08004f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b089      	sub	sp, #36	@ 0x24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	f1c3 0307 	rsb	r3, r3, #7
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	bf28      	it	cs
 8004fae:	2304      	movcs	r3, #4
 8004fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	2b06      	cmp	r3, #6
 8004fb8:	d902      	bls.n	8004fc0 <NVIC_EncodePriority+0x30>
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	3b03      	subs	r3, #3
 8004fbe:	e000      	b.n	8004fc2 <NVIC_EncodePriority+0x32>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	43da      	mvns	r2, r3
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	401a      	ands	r2, r3
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe2:	43d9      	mvns	r1, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fe8:	4313      	orrs	r3, r2
         );
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3724      	adds	r7, #36	@ 0x24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
	...

08004ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3b01      	subs	r3, #1
 8005004:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005008:	d301      	bcc.n	800500e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800500a:	2301      	movs	r3, #1
 800500c:	e00f      	b.n	800502e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800500e:	4a0a      	ldr	r2, [pc, #40]	@ (8005038 <SysTick_Config+0x40>)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3b01      	subs	r3, #1
 8005014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005016:	210f      	movs	r1, #15
 8005018:	f04f 30ff 	mov.w	r0, #4294967295
 800501c:	f7ff ff8e 	bl	8004f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005020:	4b05      	ldr	r3, [pc, #20]	@ (8005038 <SysTick_Config+0x40>)
 8005022:	2200      	movs	r2, #0
 8005024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005026:	4b04      	ldr	r3, [pc, #16]	@ (8005038 <SysTick_Config+0x40>)
 8005028:	2207      	movs	r2, #7
 800502a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	e000e010 	.word	0xe000e010

0800503c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f7ff ff29 	bl	8004e9c <__NVIC_SetPriorityGrouping>
}
 800504a:	bf00      	nop
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005052:	b580      	push	{r7, lr}
 8005054:	b086      	sub	sp, #24
 8005056:	af00      	add	r7, sp, #0
 8005058:	4603      	mov	r3, r0
 800505a:	60b9      	str	r1, [r7, #8]
 800505c:	607a      	str	r2, [r7, #4]
 800505e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005060:	2300      	movs	r3, #0
 8005062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005064:	f7ff ff3e 	bl	8004ee4 <__NVIC_GetPriorityGrouping>
 8005068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	68b9      	ldr	r1, [r7, #8]
 800506e:	6978      	ldr	r0, [r7, #20]
 8005070:	f7ff ff8e 	bl	8004f90 <NVIC_EncodePriority>
 8005074:	4602      	mov	r2, r0
 8005076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800507a:	4611      	mov	r1, r2
 800507c:	4618      	mov	r0, r3
 800507e:	f7ff ff5d 	bl	8004f3c <__NVIC_SetPriority>
}
 8005082:	bf00      	nop
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b082      	sub	sp, #8
 800508e:	af00      	add	r7, sp, #0
 8005090:	4603      	mov	r3, r0
 8005092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff ff31 	bl	8004f00 <__NVIC_EnableIRQ>
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7ff ffa2 	bl	8004ff8 <SysTick_Config>
 80050b4:	4603      	mov	r3, r0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b084      	sub	sp, #16
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80050cc:	f7ff feb6 	bl	8004e3c <HAL_GetTick>
 80050d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d008      	beq.n	80050f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2280      	movs	r2, #128	@ 0x80
 80050e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e052      	b.n	8005196 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0216 	bic.w	r2, r2, #22
 80050fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	695a      	ldr	r2, [r3, #20]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800510e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005114:	2b00      	cmp	r3, #0
 8005116:	d103      	bne.n	8005120 <HAL_DMA_Abort+0x62>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800511c:	2b00      	cmp	r3, #0
 800511e:	d007      	beq.n	8005130 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0208 	bic.w	r2, r2, #8
 800512e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0201 	bic.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005140:	e013      	b.n	800516a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005142:	f7ff fe7b 	bl	8004e3c <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b05      	cmp	r3, #5
 800514e:	d90c      	bls.n	800516a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2220      	movs	r2, #32
 8005154:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2203      	movs	r2, #3
 800515a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e015      	b.n	8005196 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e4      	bne.n	8005142 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800517c:	223f      	movs	r2, #63	@ 0x3f
 800517e:	409a      	lsls	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d004      	beq.n	80051bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2280      	movs	r2, #128	@ 0x80
 80051b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e00c      	b.n	80051d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2205      	movs	r2, #5
 80051c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0201 	bic.w	r2, r2, #1
 80051d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
	...

080051e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b089      	sub	sp, #36	@ 0x24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051fa:	2300      	movs	r3, #0
 80051fc:	61fb      	str	r3, [r7, #28]
 80051fe:	e159      	b.n	80054b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005200:	2201      	movs	r2, #1
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	4013      	ands	r3, r2
 8005212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	429a      	cmp	r2, r3
 800521a:	f040 8148 	bne.w	80054ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	2b01      	cmp	r3, #1
 8005228:	d005      	beq.n	8005236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005232:	2b02      	cmp	r3, #2
 8005234:	d130      	bne.n	8005298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	2203      	movs	r2, #3
 8005242:	fa02 f303 	lsl.w	r3, r2, r3
 8005246:	43db      	mvns	r3, r3
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	4013      	ands	r3, r2
 800524c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	fa02 f303 	lsl.w	r3, r2, r3
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	4313      	orrs	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800526c:	2201      	movs	r2, #1
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	fa02 f303 	lsl.w	r3, r2, r3
 8005274:	43db      	mvns	r3, r3
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	4013      	ands	r3, r2
 800527a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	091b      	lsrs	r3, r3, #4
 8005282:	f003 0201 	and.w	r2, r3, #1
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	fa02 f303 	lsl.w	r3, r2, r3
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	4313      	orrs	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f003 0303 	and.w	r3, r3, #3
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d017      	beq.n	80052d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	2203      	movs	r2, #3
 80052b0:	fa02 f303 	lsl.w	r3, r2, r3
 80052b4:	43db      	mvns	r3, r3
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	4013      	ands	r3, r2
 80052ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	005b      	lsls	r3, r3, #1
 80052c4:	fa02 f303 	lsl.w	r3, r2, r3
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f003 0303 	and.w	r3, r3, #3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d123      	bne.n	8005328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	08da      	lsrs	r2, r3, #3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	3208      	adds	r2, #8
 80052e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	220f      	movs	r2, #15
 80052f8:	fa02 f303 	lsl.w	r3, r2, r3
 80052fc:	43db      	mvns	r3, r3
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	4013      	ands	r3, r2
 8005302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	fa02 f303 	lsl.w	r3, r2, r3
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	4313      	orrs	r3, r2
 8005318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	08da      	lsrs	r2, r3, #3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3208      	adds	r2, #8
 8005322:	69b9      	ldr	r1, [r7, #24]
 8005324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	2203      	movs	r2, #3
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	43db      	mvns	r3, r3
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	4013      	ands	r3, r2
 800533e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f003 0203 	and.w	r2, r3, #3
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	4313      	orrs	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 80a2 	beq.w	80054ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800536a:	2300      	movs	r3, #0
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	4b57      	ldr	r3, [pc, #348]	@ (80054cc <HAL_GPIO_Init+0x2e8>)
 8005370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005372:	4a56      	ldr	r2, [pc, #344]	@ (80054cc <HAL_GPIO_Init+0x2e8>)
 8005374:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005378:	6453      	str	r3, [r2, #68]	@ 0x44
 800537a:	4b54      	ldr	r3, [pc, #336]	@ (80054cc <HAL_GPIO_Init+0x2e8>)
 800537c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800537e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005382:	60fb      	str	r3, [r7, #12]
 8005384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005386:	4a52      	ldr	r2, [pc, #328]	@ (80054d0 <HAL_GPIO_Init+0x2ec>)
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	089b      	lsrs	r3, r3, #2
 800538c:	3302      	adds	r3, #2
 800538e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	220f      	movs	r2, #15
 800539e:	fa02 f303 	lsl.w	r3, r2, r3
 80053a2:	43db      	mvns	r3, r3
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	4013      	ands	r3, r2
 80053a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a49      	ldr	r2, [pc, #292]	@ (80054d4 <HAL_GPIO_Init+0x2f0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d019      	beq.n	80053e6 <HAL_GPIO_Init+0x202>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a48      	ldr	r2, [pc, #288]	@ (80054d8 <HAL_GPIO_Init+0x2f4>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d013      	beq.n	80053e2 <HAL_GPIO_Init+0x1fe>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a47      	ldr	r2, [pc, #284]	@ (80054dc <HAL_GPIO_Init+0x2f8>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00d      	beq.n	80053de <HAL_GPIO_Init+0x1fa>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a46      	ldr	r2, [pc, #280]	@ (80054e0 <HAL_GPIO_Init+0x2fc>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d007      	beq.n	80053da <HAL_GPIO_Init+0x1f6>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a45      	ldr	r2, [pc, #276]	@ (80054e4 <HAL_GPIO_Init+0x300>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d101      	bne.n	80053d6 <HAL_GPIO_Init+0x1f2>
 80053d2:	2304      	movs	r3, #4
 80053d4:	e008      	b.n	80053e8 <HAL_GPIO_Init+0x204>
 80053d6:	2307      	movs	r3, #7
 80053d8:	e006      	b.n	80053e8 <HAL_GPIO_Init+0x204>
 80053da:	2303      	movs	r3, #3
 80053dc:	e004      	b.n	80053e8 <HAL_GPIO_Init+0x204>
 80053de:	2302      	movs	r3, #2
 80053e0:	e002      	b.n	80053e8 <HAL_GPIO_Init+0x204>
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <HAL_GPIO_Init+0x204>
 80053e6:	2300      	movs	r3, #0
 80053e8:	69fa      	ldr	r2, [r7, #28]
 80053ea:	f002 0203 	and.w	r2, r2, #3
 80053ee:	0092      	lsls	r2, r2, #2
 80053f0:	4093      	lsls	r3, r2
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053f8:	4935      	ldr	r1, [pc, #212]	@ (80054d0 <HAL_GPIO_Init+0x2ec>)
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	089b      	lsrs	r3, r3, #2
 80053fe:	3302      	adds	r3, #2
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005406:	4b38      	ldr	r3, [pc, #224]	@ (80054e8 <HAL_GPIO_Init+0x304>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	43db      	mvns	r3, r3
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	4013      	ands	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800542a:	4a2f      	ldr	r2, [pc, #188]	@ (80054e8 <HAL_GPIO_Init+0x304>)
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005430:	4b2d      	ldr	r3, [pc, #180]	@ (80054e8 <HAL_GPIO_Init+0x304>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	43db      	mvns	r3, r3
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	4013      	ands	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	4313      	orrs	r3, r2
 8005452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005454:	4a24      	ldr	r2, [pc, #144]	@ (80054e8 <HAL_GPIO_Init+0x304>)
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800545a:	4b23      	ldr	r3, [pc, #140]	@ (80054e8 <HAL_GPIO_Init+0x304>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	43db      	mvns	r3, r3
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	4013      	ands	r3, r2
 8005468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800547e:	4a1a      	ldr	r2, [pc, #104]	@ (80054e8 <HAL_GPIO_Init+0x304>)
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005484:	4b18      	ldr	r3, [pc, #96]	@ (80054e8 <HAL_GPIO_Init+0x304>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	43db      	mvns	r3, r3
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	4013      	ands	r3, r2
 8005492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054a8:	4a0f      	ldr	r2, [pc, #60]	@ (80054e8 <HAL_GPIO_Init+0x304>)
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	3301      	adds	r3, #1
 80054b2:	61fb      	str	r3, [r7, #28]
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	2b0f      	cmp	r3, #15
 80054b8:	f67f aea2 	bls.w	8005200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80054bc:	bf00      	nop
 80054be:	bf00      	nop
 80054c0:	3724      	adds	r7, #36	@ 0x24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40023800 	.word	0x40023800
 80054d0:	40013800 	.word	0x40013800
 80054d4:	40020000 	.word	0x40020000
 80054d8:	40020400 	.word	0x40020400
 80054dc:	40020800 	.word	0x40020800
 80054e0:	40020c00 	.word	0x40020c00
 80054e4:	40021000 	.word	0x40021000
 80054e8:	40013c00 	.word	0x40013c00

080054ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	460b      	mov	r3, r1
 80054f6:	807b      	strh	r3, [r7, #2]
 80054f8:	4613      	mov	r3, r2
 80054fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054fc:	787b      	ldrb	r3, [r7, #1]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005502:	887a      	ldrh	r2, [r7, #2]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005508:	e003      	b.n	8005512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800550a:	887b      	ldrh	r3, [r7, #2]
 800550c:	041a      	lsls	r2, r3, #16
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	619a      	str	r2, [r3, #24]
}
 8005512:	bf00      	nop
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
	...

08005520 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e267      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d075      	beq.n	800562a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800553e:	4b88      	ldr	r3, [pc, #544]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f003 030c 	and.w	r3, r3, #12
 8005546:	2b04      	cmp	r3, #4
 8005548:	d00c      	beq.n	8005564 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800554a:	4b85      	ldr	r3, [pc, #532]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005552:	2b08      	cmp	r3, #8
 8005554:	d112      	bne.n	800557c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005556:	4b82      	ldr	r3, [pc, #520]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800555e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005562:	d10b      	bne.n	800557c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005564:	4b7e      	ldr	r3, [pc, #504]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d05b      	beq.n	8005628 <HAL_RCC_OscConfig+0x108>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d157      	bne.n	8005628 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e242      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005584:	d106      	bne.n	8005594 <HAL_RCC_OscConfig+0x74>
 8005586:	4b76      	ldr	r3, [pc, #472]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a75      	ldr	r2, [pc, #468]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 800558c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	e01d      	b.n	80055d0 <HAL_RCC_OscConfig+0xb0>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800559c:	d10c      	bne.n	80055b8 <HAL_RCC_OscConfig+0x98>
 800559e:	4b70      	ldr	r3, [pc, #448]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a6f      	ldr	r2, [pc, #444]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 80055a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	4b6d      	ldr	r3, [pc, #436]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a6c      	ldr	r2, [pc, #432]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 80055b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	e00b      	b.n	80055d0 <HAL_RCC_OscConfig+0xb0>
 80055b8:	4b69      	ldr	r3, [pc, #420]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a68      	ldr	r2, [pc, #416]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 80055be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	4b66      	ldr	r3, [pc, #408]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a65      	ldr	r2, [pc, #404]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 80055ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d013      	beq.n	8005600 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d8:	f7ff fc30 	bl	8004e3c <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055e0:	f7ff fc2c 	bl	8004e3c <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b64      	cmp	r3, #100	@ 0x64
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e207      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055f2:	4b5b      	ldr	r3, [pc, #364]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f0      	beq.n	80055e0 <HAL_RCC_OscConfig+0xc0>
 80055fe:	e014      	b.n	800562a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005600:	f7ff fc1c 	bl	8004e3c <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005608:	f7ff fc18 	bl	8004e3c <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b64      	cmp	r3, #100	@ 0x64
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e1f3      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800561a:	4b51      	ldr	r3, [pc, #324]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1f0      	bne.n	8005608 <HAL_RCC_OscConfig+0xe8>
 8005626:	e000      	b.n	800562a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d063      	beq.n	80056fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005636:	4b4a      	ldr	r3, [pc, #296]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 030c 	and.w	r3, r3, #12
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00b      	beq.n	800565a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005642:	4b47      	ldr	r3, [pc, #284]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800564a:	2b08      	cmp	r3, #8
 800564c:	d11c      	bne.n	8005688 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800564e:	4b44      	ldr	r3, [pc, #272]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d116      	bne.n	8005688 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800565a:	4b41      	ldr	r3, [pc, #260]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d005      	beq.n	8005672 <HAL_RCC_OscConfig+0x152>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d001      	beq.n	8005672 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e1c7      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005672:	4b3b      	ldr	r3, [pc, #236]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	4937      	ldr	r1, [pc, #220]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 8005682:	4313      	orrs	r3, r2
 8005684:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005686:	e03a      	b.n	80056fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d020      	beq.n	80056d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005690:	4b34      	ldr	r3, [pc, #208]	@ (8005764 <HAL_RCC_OscConfig+0x244>)
 8005692:	2201      	movs	r2, #1
 8005694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005696:	f7ff fbd1 	bl	8004e3c <HAL_GetTick>
 800569a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800569c:	e008      	b.n	80056b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800569e:	f7ff fbcd 	bl	8004e3c <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e1a8      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b0:	4b2b      	ldr	r3, [pc, #172]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0f0      	beq.n	800569e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056bc:	4b28      	ldr	r3, [pc, #160]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	4925      	ldr	r1, [pc, #148]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	600b      	str	r3, [r1, #0]
 80056d0:	e015      	b.n	80056fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056d2:	4b24      	ldr	r3, [pc, #144]	@ (8005764 <HAL_RCC_OscConfig+0x244>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d8:	f7ff fbb0 	bl	8004e3c <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056e0:	f7ff fbac 	bl	8004e3c <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e187      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f0      	bne.n	80056e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	2b00      	cmp	r3, #0
 8005708:	d036      	beq.n	8005778 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d016      	beq.n	8005740 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005712:	4b15      	ldr	r3, [pc, #84]	@ (8005768 <HAL_RCC_OscConfig+0x248>)
 8005714:	2201      	movs	r2, #1
 8005716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005718:	f7ff fb90 	bl	8004e3c <HAL_GetTick>
 800571c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005720:	f7ff fb8c 	bl	8004e3c <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e167      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005732:	4b0b      	ldr	r3, [pc, #44]	@ (8005760 <HAL_RCC_OscConfig+0x240>)
 8005734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0f0      	beq.n	8005720 <HAL_RCC_OscConfig+0x200>
 800573e:	e01b      	b.n	8005778 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005740:	4b09      	ldr	r3, [pc, #36]	@ (8005768 <HAL_RCC_OscConfig+0x248>)
 8005742:	2200      	movs	r2, #0
 8005744:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005746:	f7ff fb79 	bl	8004e3c <HAL_GetTick>
 800574a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800574c:	e00e      	b.n	800576c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800574e:	f7ff fb75 	bl	8004e3c <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d907      	bls.n	800576c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e150      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
 8005760:	40023800 	.word	0x40023800
 8005764:	42470000 	.word	0x42470000
 8005768:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800576c:	4b88      	ldr	r3, [pc, #544]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 800576e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1ea      	bne.n	800574e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 8097 	beq.w	80058b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005786:	2300      	movs	r3, #0
 8005788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800578a:	4b81      	ldr	r3, [pc, #516]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 800578c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10f      	bne.n	80057b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005796:	2300      	movs	r3, #0
 8005798:	60bb      	str	r3, [r7, #8]
 800579a:	4b7d      	ldr	r3, [pc, #500]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 800579c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579e:	4a7c      	ldr	r2, [pc, #496]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 80057a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80057a6:	4b7a      	ldr	r3, [pc, #488]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 80057a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ae:	60bb      	str	r3, [r7, #8]
 80057b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057b2:	2301      	movs	r3, #1
 80057b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057b6:	4b77      	ldr	r3, [pc, #476]	@ (8005994 <HAL_RCC_OscConfig+0x474>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d118      	bne.n	80057f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057c2:	4b74      	ldr	r3, [pc, #464]	@ (8005994 <HAL_RCC_OscConfig+0x474>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a73      	ldr	r2, [pc, #460]	@ (8005994 <HAL_RCC_OscConfig+0x474>)
 80057c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057ce:	f7ff fb35 	bl	8004e3c <HAL_GetTick>
 80057d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d4:	e008      	b.n	80057e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057d6:	f7ff fb31 	bl	8004e3c <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e10c      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e8:	4b6a      	ldr	r3, [pc, #424]	@ (8005994 <HAL_RCC_OscConfig+0x474>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0f0      	beq.n	80057d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d106      	bne.n	800580a <HAL_RCC_OscConfig+0x2ea>
 80057fc:	4b64      	ldr	r3, [pc, #400]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 80057fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005800:	4a63      	ldr	r2, [pc, #396]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 8005802:	f043 0301 	orr.w	r3, r3, #1
 8005806:	6713      	str	r3, [r2, #112]	@ 0x70
 8005808:	e01c      	b.n	8005844 <HAL_RCC_OscConfig+0x324>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	2b05      	cmp	r3, #5
 8005810:	d10c      	bne.n	800582c <HAL_RCC_OscConfig+0x30c>
 8005812:	4b5f      	ldr	r3, [pc, #380]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 8005814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005816:	4a5e      	ldr	r2, [pc, #376]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 8005818:	f043 0304 	orr.w	r3, r3, #4
 800581c:	6713      	str	r3, [r2, #112]	@ 0x70
 800581e:	4b5c      	ldr	r3, [pc, #368]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 8005820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005822:	4a5b      	ldr	r2, [pc, #364]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 8005824:	f043 0301 	orr.w	r3, r3, #1
 8005828:	6713      	str	r3, [r2, #112]	@ 0x70
 800582a:	e00b      	b.n	8005844 <HAL_RCC_OscConfig+0x324>
 800582c:	4b58      	ldr	r3, [pc, #352]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 800582e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005830:	4a57      	ldr	r2, [pc, #348]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 8005832:	f023 0301 	bic.w	r3, r3, #1
 8005836:	6713      	str	r3, [r2, #112]	@ 0x70
 8005838:	4b55      	ldr	r3, [pc, #340]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 800583a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800583c:	4a54      	ldr	r2, [pc, #336]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 800583e:	f023 0304 	bic.w	r3, r3, #4
 8005842:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d015      	beq.n	8005878 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800584c:	f7ff faf6 	bl	8004e3c <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005852:	e00a      	b.n	800586a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005854:	f7ff faf2 	bl	8004e3c <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005862:	4293      	cmp	r3, r2
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e0cb      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800586a:	4b49      	ldr	r3, [pc, #292]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 800586c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0ee      	beq.n	8005854 <HAL_RCC_OscConfig+0x334>
 8005876:	e014      	b.n	80058a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005878:	f7ff fae0 	bl	8004e3c <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800587e:	e00a      	b.n	8005896 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005880:	f7ff fadc 	bl	8004e3c <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800588e:	4293      	cmp	r3, r2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e0b5      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005896:	4b3e      	ldr	r3, [pc, #248]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 8005898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1ee      	bne.n	8005880 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058a2:	7dfb      	ldrb	r3, [r7, #23]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d105      	bne.n	80058b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058a8:	4b39      	ldr	r3, [pc, #228]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 80058aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ac:	4a38      	ldr	r2, [pc, #224]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 80058ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 80a1 	beq.w	8005a00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058be:	4b34      	ldr	r3, [pc, #208]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 030c 	and.w	r3, r3, #12
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d05c      	beq.n	8005984 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d141      	bne.n	8005956 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058d2:	4b31      	ldr	r3, [pc, #196]	@ (8005998 <HAL_RCC_OscConfig+0x478>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d8:	f7ff fab0 	bl	8004e3c <HAL_GetTick>
 80058dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e0:	f7ff faac 	bl	8004e3c <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e087      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058f2:	4b27      	ldr	r3, [pc, #156]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1f0      	bne.n	80058e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69da      	ldr	r2, [r3, #28]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590c:	019b      	lsls	r3, r3, #6
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005914:	085b      	lsrs	r3, r3, #1
 8005916:	3b01      	subs	r3, #1
 8005918:	041b      	lsls	r3, r3, #16
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005920:	061b      	lsls	r3, r3, #24
 8005922:	491b      	ldr	r1, [pc, #108]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 8005924:	4313      	orrs	r3, r2
 8005926:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005928:	4b1b      	ldr	r3, [pc, #108]	@ (8005998 <HAL_RCC_OscConfig+0x478>)
 800592a:	2201      	movs	r2, #1
 800592c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800592e:	f7ff fa85 	bl	8004e3c <HAL_GetTick>
 8005932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005934:	e008      	b.n	8005948 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005936:	f7ff fa81 	bl	8004e3c <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	2b02      	cmp	r3, #2
 8005942:	d901      	bls.n	8005948 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e05c      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005948:	4b11      	ldr	r3, [pc, #68]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0f0      	beq.n	8005936 <HAL_RCC_OscConfig+0x416>
 8005954:	e054      	b.n	8005a00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005956:	4b10      	ldr	r3, [pc, #64]	@ (8005998 <HAL_RCC_OscConfig+0x478>)
 8005958:	2200      	movs	r2, #0
 800595a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800595c:	f7ff fa6e 	bl	8004e3c <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005964:	f7ff fa6a 	bl	8004e3c <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e045      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005976:	4b06      	ldr	r3, [pc, #24]	@ (8005990 <HAL_RCC_OscConfig+0x470>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1f0      	bne.n	8005964 <HAL_RCC_OscConfig+0x444>
 8005982:	e03d      	b.n	8005a00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d107      	bne.n	800599c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e038      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
 8005990:	40023800 	.word	0x40023800
 8005994:	40007000 	.word	0x40007000
 8005998:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800599c:	4b1b      	ldr	r3, [pc, #108]	@ (8005a0c <HAL_RCC_OscConfig+0x4ec>)
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d028      	beq.n	80059fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d121      	bne.n	80059fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d11a      	bne.n	80059fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80059cc:	4013      	ands	r3, r2
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80059d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d111      	bne.n	80059fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e2:	085b      	lsrs	r3, r3, #1
 80059e4:	3b01      	subs	r3, #1
 80059e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d107      	bne.n	80059fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d001      	beq.n	8005a00 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e000      	b.n	8005a02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3718      	adds	r7, #24
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	40023800 	.word	0x40023800

08005a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e0cc      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a24:	4b68      	ldr	r3, [pc, #416]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d90c      	bls.n	8005a4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a32:	4b65      	ldr	r3, [pc, #404]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a3a:	4b63      	ldr	r3, [pc, #396]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d001      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e0b8      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d020      	beq.n	8005a9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d005      	beq.n	8005a70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a64:	4b59      	ldr	r3, [pc, #356]	@ (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	4a58      	ldr	r2, [pc, #352]	@ (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005a6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005a6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0308 	and.w	r3, r3, #8
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d005      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a7c:	4b53      	ldr	r3, [pc, #332]	@ (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	4a52      	ldr	r2, [pc, #328]	@ (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005a82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005a86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a88:	4b50      	ldr	r3, [pc, #320]	@ (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	494d      	ldr	r1, [pc, #308]	@ (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d044      	beq.n	8005b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d107      	bne.n	8005abe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aae:	4b47      	ldr	r3, [pc, #284]	@ (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d119      	bne.n	8005aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e07f      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d003      	beq.n	8005ace <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	d107      	bne.n	8005ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ace:	4b3f      	ldr	r3, [pc, #252]	@ (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d109      	bne.n	8005aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e06f      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ade:	4b3b      	ldr	r3, [pc, #236]	@ (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e067      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005aee:	4b37      	ldr	r3, [pc, #220]	@ (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f023 0203 	bic.w	r2, r3, #3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	4934      	ldr	r1, [pc, #208]	@ (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b00:	f7ff f99c 	bl	8004e3c <HAL_GetTick>
 8005b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b06:	e00a      	b.n	8005b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b08:	f7ff f998 	bl	8004e3c <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e04f      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b1e:	4b2b      	ldr	r3, [pc, #172]	@ (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 020c 	and.w	r2, r3, #12
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d1eb      	bne.n	8005b08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b30:	4b25      	ldr	r3, [pc, #148]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d20c      	bcs.n	8005b58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b3e:	4b22      	ldr	r3, [pc, #136]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	b2d2      	uxtb	r2, r2
 8005b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b46:	4b20      	ldr	r3, [pc, #128]	@ (8005bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d001      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e032      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d008      	beq.n	8005b76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b64:	4b19      	ldr	r3, [pc, #100]	@ (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	4916      	ldr	r1, [pc, #88]	@ (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d009      	beq.n	8005b96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b82:	4b12      	ldr	r3, [pc, #72]	@ (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	490e      	ldr	r1, [pc, #56]	@ (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b96:	f000 f821 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	091b      	lsrs	r3, r3, #4
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	490a      	ldr	r1, [pc, #40]	@ (8005bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8005ba8:	5ccb      	ldrb	r3, [r1, r3]
 8005baa:	fa22 f303 	lsr.w	r3, r2, r3
 8005bae:	4a09      	ldr	r2, [pc, #36]	@ (8005bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005bb2:	4b09      	ldr	r3, [pc, #36]	@ (8005bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7ff f8fc 	bl	8004db4 <HAL_InitTick>

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	40023c00 	.word	0x40023c00
 8005bcc:	40023800 	.word	0x40023800
 8005bd0:	0800c748 	.word	0x0800c748
 8005bd4:	20000540 	.word	0x20000540
 8005bd8:	20000574 	.word	0x20000574

08005bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005be0:	b094      	sub	sp, #80	@ 0x50
 8005be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bf4:	4b79      	ldr	r3, [pc, #484]	@ (8005ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f003 030c 	and.w	r3, r3, #12
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d00d      	beq.n	8005c1c <HAL_RCC_GetSysClockFreq+0x40>
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	f200 80e1 	bhi.w	8005dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <HAL_RCC_GetSysClockFreq+0x34>
 8005c0a:	2b04      	cmp	r3, #4
 8005c0c:	d003      	beq.n	8005c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c0e:	e0db      	b.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c10:	4b73      	ldr	r3, [pc, #460]	@ (8005de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c14:	e0db      	b.n	8005dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c16:	4b73      	ldr	r3, [pc, #460]	@ (8005de4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005c18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c1a:	e0d8      	b.n	8005dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c1c:	4b6f      	ldr	r3, [pc, #444]	@ (8005ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c24:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c26:	4b6d      	ldr	r3, [pc, #436]	@ (8005ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d063      	beq.n	8005cfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c32:	4b6a      	ldr	r3, [pc, #424]	@ (8005ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	099b      	lsrs	r3, r3, #6
 8005c38:	2200      	movs	r2, #0
 8005c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c44:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c46:	2300      	movs	r3, #0
 8005c48:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005c4e:	4622      	mov	r2, r4
 8005c50:	462b      	mov	r3, r5
 8005c52:	f04f 0000 	mov.w	r0, #0
 8005c56:	f04f 0100 	mov.w	r1, #0
 8005c5a:	0159      	lsls	r1, r3, #5
 8005c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c60:	0150      	lsls	r0, r2, #5
 8005c62:	4602      	mov	r2, r0
 8005c64:	460b      	mov	r3, r1
 8005c66:	4621      	mov	r1, r4
 8005c68:	1a51      	subs	r1, r2, r1
 8005c6a:	6139      	str	r1, [r7, #16]
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	f04f 0200 	mov.w	r2, #0
 8005c78:	f04f 0300 	mov.w	r3, #0
 8005c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c80:	4659      	mov	r1, fp
 8005c82:	018b      	lsls	r3, r1, #6
 8005c84:	4651      	mov	r1, sl
 8005c86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c8a:	4651      	mov	r1, sl
 8005c8c:	018a      	lsls	r2, r1, #6
 8005c8e:	4651      	mov	r1, sl
 8005c90:	ebb2 0801 	subs.w	r8, r2, r1
 8005c94:	4659      	mov	r1, fp
 8005c96:	eb63 0901 	sbc.w	r9, r3, r1
 8005c9a:	f04f 0200 	mov.w	r2, #0
 8005c9e:	f04f 0300 	mov.w	r3, #0
 8005ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cae:	4690      	mov	r8, r2
 8005cb0:	4699      	mov	r9, r3
 8005cb2:	4623      	mov	r3, r4
 8005cb4:	eb18 0303 	adds.w	r3, r8, r3
 8005cb8:	60bb      	str	r3, [r7, #8]
 8005cba:	462b      	mov	r3, r5
 8005cbc:	eb49 0303 	adc.w	r3, r9, r3
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	f04f 0200 	mov.w	r2, #0
 8005cc6:	f04f 0300 	mov.w	r3, #0
 8005cca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005cce:	4629      	mov	r1, r5
 8005cd0:	024b      	lsls	r3, r1, #9
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005cd8:	4621      	mov	r1, r4
 8005cda:	024a      	lsls	r2, r1, #9
 8005cdc:	4610      	mov	r0, r2
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ce6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ce8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005cec:	f7fb f8e2 	bl	8000eb4 <__aeabi_uldivmod>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cf8:	e058      	b.n	8005dac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cfa:	4b38      	ldr	r3, [pc, #224]	@ (8005ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	099b      	lsrs	r3, r3, #6
 8005d00:	2200      	movs	r2, #0
 8005d02:	4618      	mov	r0, r3
 8005d04:	4611      	mov	r1, r2
 8005d06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d0a:	623b      	str	r3, [r7, #32]
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d14:	4642      	mov	r2, r8
 8005d16:	464b      	mov	r3, r9
 8005d18:	f04f 0000 	mov.w	r0, #0
 8005d1c:	f04f 0100 	mov.w	r1, #0
 8005d20:	0159      	lsls	r1, r3, #5
 8005d22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d26:	0150      	lsls	r0, r2, #5
 8005d28:	4602      	mov	r2, r0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	4641      	mov	r1, r8
 8005d2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d32:	4649      	mov	r1, r9
 8005d34:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d38:	f04f 0200 	mov.w	r2, #0
 8005d3c:	f04f 0300 	mov.w	r3, #0
 8005d40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d4c:	ebb2 040a 	subs.w	r4, r2, sl
 8005d50:	eb63 050b 	sbc.w	r5, r3, fp
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	00eb      	lsls	r3, r5, #3
 8005d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d62:	00e2      	lsls	r2, r4, #3
 8005d64:	4614      	mov	r4, r2
 8005d66:	461d      	mov	r5, r3
 8005d68:	4643      	mov	r3, r8
 8005d6a:	18e3      	adds	r3, r4, r3
 8005d6c:	603b      	str	r3, [r7, #0]
 8005d6e:	464b      	mov	r3, r9
 8005d70:	eb45 0303 	adc.w	r3, r5, r3
 8005d74:	607b      	str	r3, [r7, #4]
 8005d76:	f04f 0200 	mov.w	r2, #0
 8005d7a:	f04f 0300 	mov.w	r3, #0
 8005d7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d82:	4629      	mov	r1, r5
 8005d84:	028b      	lsls	r3, r1, #10
 8005d86:	4621      	mov	r1, r4
 8005d88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	028a      	lsls	r2, r1, #10
 8005d90:	4610      	mov	r0, r2
 8005d92:	4619      	mov	r1, r3
 8005d94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d96:	2200      	movs	r2, #0
 8005d98:	61bb      	str	r3, [r7, #24]
 8005d9a:	61fa      	str	r2, [r7, #28]
 8005d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005da0:	f7fb f888 	bl	8000eb4 <__aeabi_uldivmod>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4613      	mov	r3, r2
 8005daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005dac:	4b0b      	ldr	r3, [pc, #44]	@ (8005ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	0c1b      	lsrs	r3, r3, #16
 8005db2:	f003 0303 	and.w	r3, r3, #3
 8005db6:	3301      	adds	r3, #1
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005dbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005dbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005dc6:	e002      	b.n	8005dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005dc8:	4b05      	ldr	r3, [pc, #20]	@ (8005de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005dca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3750      	adds	r7, #80	@ 0x50
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dda:	bf00      	nop
 8005ddc:	40023800 	.word	0x40023800
 8005de0:	00f42400 	.word	0x00f42400
 8005de4:	007a1200 	.word	0x007a1200

08005de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dec:	4b03      	ldr	r3, [pc, #12]	@ (8005dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8005dee:	681b      	ldr	r3, [r3, #0]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	20000540 	.word	0x20000540

08005e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e04:	f7ff fff0 	bl	8005de8 <HAL_RCC_GetHCLKFreq>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	4b05      	ldr	r3, [pc, #20]	@ (8005e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	0a9b      	lsrs	r3, r3, #10
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	4903      	ldr	r1, [pc, #12]	@ (8005e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e16:	5ccb      	ldrb	r3, [r1, r3]
 8005e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	40023800 	.word	0x40023800
 8005e24:	0800c758 	.word	0x0800c758

08005e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e2c:	f7ff ffdc 	bl	8005de8 <HAL_RCC_GetHCLKFreq>
 8005e30:	4602      	mov	r2, r0
 8005e32:	4b05      	ldr	r3, [pc, #20]	@ (8005e48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	0b5b      	lsrs	r3, r3, #13
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	4903      	ldr	r1, [pc, #12]	@ (8005e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e3e:	5ccb      	ldrb	r3, [r1, r3]
 8005e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	40023800 	.word	0x40023800
 8005e4c:	0800c758 	.word	0x0800c758

08005e50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e07b      	b.n	8005f5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d108      	bne.n	8005e7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e72:	d009      	beq.n	8005e88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	61da      	str	r2, [r3, #28]
 8005e7a:	e005      	b.n	8005e88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fc fa48 	bl	8002338 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ebe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005ed0:	431a      	orrs	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005eda:	431a      	orrs	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f0c:	ea42 0103 	orr.w	r1, r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f14:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	0c1b      	lsrs	r3, r3, #16
 8005f26:	f003 0104 	and.w	r1, r3, #4
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2e:	f003 0210 	and.w	r2, r3, #16
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	69da      	ldr	r2, [r3, #28]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b088      	sub	sp, #32
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	603b      	str	r3, [r7, #0]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f72:	f7fe ff63 	bl	8004e3c <HAL_GetTick>
 8005f76:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005f78:	88fb      	ldrh	r3, [r7, #6]
 8005f7a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d001      	beq.n	8005f8c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005f88:	2302      	movs	r3, #2
 8005f8a:	e12a      	b.n	80061e2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <HAL_SPI_Transmit+0x36>
 8005f92:	88fb      	ldrh	r3, [r7, #6]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e122      	b.n	80061e2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d101      	bne.n	8005faa <HAL_SPI_Transmit+0x48>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	e11b      	b.n	80061e2 <HAL_SPI_Transmit+0x280>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2203      	movs	r2, #3
 8005fb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	88fa      	ldrh	r2, [r7, #6]
 8005fca:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	88fa      	ldrh	r2, [r7, #6]
 8005fd0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ff8:	d10f      	bne.n	800601a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006008:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006018:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006024:	2b40      	cmp	r3, #64	@ 0x40
 8006026:	d007      	beq.n	8006038 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006036:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006040:	d152      	bne.n	80060e8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <HAL_SPI_Transmit+0xee>
 800604a:	8b7b      	ldrh	r3, [r7, #26]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d145      	bne.n	80060dc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006054:	881a      	ldrh	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006060:	1c9a      	adds	r2, r3, #2
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800606a:	b29b      	uxth	r3, r3
 800606c:	3b01      	subs	r3, #1
 800606e:	b29a      	uxth	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006074:	e032      	b.n	80060dc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b02      	cmp	r3, #2
 8006082:	d112      	bne.n	80060aa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006088:	881a      	ldrh	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006094:	1c9a      	adds	r2, r3, #2
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800609e:	b29b      	uxth	r3, r3
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80060a8:	e018      	b.n	80060dc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060aa:	f7fe fec7 	bl	8004e3c <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d803      	bhi.n	80060c2 <HAL_SPI_Transmit+0x160>
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c0:	d102      	bne.n	80060c8 <HAL_SPI_Transmit+0x166>
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d109      	bne.n	80060dc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e082      	b.n	80061e2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1c7      	bne.n	8006076 <HAL_SPI_Transmit+0x114>
 80060e6:	e053      	b.n	8006190 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <HAL_SPI_Transmit+0x194>
 80060f0:	8b7b      	ldrh	r3, [r7, #26]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d147      	bne.n	8006186 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	330c      	adds	r3, #12
 8006100:	7812      	ldrb	r2, [r2, #0]
 8006102:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006112:	b29b      	uxth	r3, r3
 8006114:	3b01      	subs	r3, #1
 8006116:	b29a      	uxth	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800611c:	e033      	b.n	8006186 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b02      	cmp	r3, #2
 800612a:	d113      	bne.n	8006154 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	330c      	adds	r3, #12
 8006136:	7812      	ldrb	r2, [r2, #0]
 8006138:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006148:	b29b      	uxth	r3, r3
 800614a:	3b01      	subs	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006152:	e018      	b.n	8006186 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006154:	f7fe fe72 	bl	8004e3c <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	429a      	cmp	r2, r3
 8006162:	d803      	bhi.n	800616c <HAL_SPI_Transmit+0x20a>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616a:	d102      	bne.n	8006172 <HAL_SPI_Transmit+0x210>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d109      	bne.n	8006186 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e02d      	b.n	80061e2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800618a:	b29b      	uxth	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1c6      	bne.n	800611e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	6839      	ldr	r1, [r7, #0]
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 f8b1 	bl	80062fc <SPI_EndRxTxTransaction>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d002      	beq.n	80061a6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2220      	movs	r2, #32
 80061a4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10a      	bne.n	80061c4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061ae:	2300      	movs	r3, #0
 80061b0:	617b      	str	r3, [r7, #20]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	617b      	str	r3, [r7, #20]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80061e0:	2300      	movs	r3, #0
  }
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3720      	adds	r7, #32
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
	...

080061ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b088      	sub	sp, #32
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	4613      	mov	r3, r2
 80061fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061fc:	f7fe fe1e 	bl	8004e3c <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006204:	1a9b      	subs	r3, r3, r2
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	4413      	add	r3, r2
 800620a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800620c:	f7fe fe16 	bl	8004e3c <HAL_GetTick>
 8006210:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006212:	4b39      	ldr	r3, [pc, #228]	@ (80062f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	015b      	lsls	r3, r3, #5
 8006218:	0d1b      	lsrs	r3, r3, #20
 800621a:	69fa      	ldr	r2, [r7, #28]
 800621c:	fb02 f303 	mul.w	r3, r2, r3
 8006220:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006222:	e054      	b.n	80062ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622a:	d050      	beq.n	80062ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800622c:	f7fe fe06 	bl	8004e3c <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	69fa      	ldr	r2, [r7, #28]
 8006238:	429a      	cmp	r2, r3
 800623a:	d902      	bls.n	8006242 <SPI_WaitFlagStateUntilTimeout+0x56>
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d13d      	bne.n	80062be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006250:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800625a:	d111      	bne.n	8006280 <SPI_WaitFlagStateUntilTimeout+0x94>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006264:	d004      	beq.n	8006270 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800626e:	d107      	bne.n	8006280 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800627e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006284:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006288:	d10f      	bne.n	80062aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e017      	b.n	80062ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689a      	ldr	r2, [r3, #8]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4013      	ands	r3, r2
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	429a      	cmp	r2, r3
 80062dc:	bf0c      	ite	eq
 80062de:	2301      	moveq	r3, #1
 80062e0:	2300      	movne	r3, #0
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	461a      	mov	r2, r3
 80062e6:	79fb      	ldrb	r3, [r7, #7]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d19b      	bne.n	8006224 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3720      	adds	r7, #32
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	20000540 	.word	0x20000540

080062fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b088      	sub	sp, #32
 8006300:	af02      	add	r7, sp, #8
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2201      	movs	r2, #1
 8006310:	2102      	movs	r1, #2
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f7ff ff6a 	bl	80061ec <SPI_WaitFlagStateUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d007      	beq.n	800632e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006322:	f043 0220 	orr.w	r2, r3, #32
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e032      	b.n	8006394 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800632e:	4b1b      	ldr	r3, [pc, #108]	@ (800639c <SPI_EndRxTxTransaction+0xa0>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a1b      	ldr	r2, [pc, #108]	@ (80063a0 <SPI_EndRxTxTransaction+0xa4>)
 8006334:	fba2 2303 	umull	r2, r3, r2, r3
 8006338:	0d5b      	lsrs	r3, r3, #21
 800633a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800633e:	fb02 f303 	mul.w	r3, r2, r3
 8006342:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800634c:	d112      	bne.n	8006374 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2200      	movs	r2, #0
 8006356:	2180      	movs	r1, #128	@ 0x80
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f7ff ff47 	bl	80061ec <SPI_WaitFlagStateUntilTimeout>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d016      	beq.n	8006392 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006368:	f043 0220 	orr.w	r2, r3, #32
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e00f      	b.n	8006394 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	3b01      	subs	r3, #1
 800637e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800638a:	2b80      	cmp	r3, #128	@ 0x80
 800638c:	d0f2      	beq.n	8006374 <SPI_EndRxTxTransaction+0x78>
 800638e:	e000      	b.n	8006392 <SPI_EndRxTxTransaction+0x96>
        break;
 8006390:	bf00      	nop
  }

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3718      	adds	r7, #24
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	20000540 	.word	0x20000540
 80063a0:	165e9f81 	.word	0x165e9f81

080063a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e042      	b.n	800643c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d106      	bne.n	80063d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fc f98c 	bl	80026e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2224      	movs	r2, #36	@ 0x24
 80063d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fdff 	bl	8006fec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	691a      	ldr	r2, [r3, #16]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	695a      	ldr	r2, [r3, #20]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800640c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68da      	ldr	r2, [r3, #12]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800641c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2220      	movs	r2, #32
 8006428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b08a      	sub	sp, #40	@ 0x28
 8006448:	af02      	add	r7, sp, #8
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	4613      	mov	r3, r2
 8006452:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b20      	cmp	r3, #32
 8006462:	d175      	bne.n	8006550 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <HAL_UART_Transmit+0x2c>
 800646a:	88fb      	ldrh	r3, [r7, #6]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e06e      	b.n	8006552 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2221      	movs	r2, #33	@ 0x21
 800647e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006482:	f7fe fcdb 	bl	8004e3c <HAL_GetTick>
 8006486:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	88fa      	ldrh	r2, [r7, #6]
 800648c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	88fa      	ldrh	r2, [r7, #6]
 8006492:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800649c:	d108      	bne.n	80064b0 <HAL_UART_Transmit+0x6c>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d104      	bne.n	80064b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80064a6:	2300      	movs	r3, #0
 80064a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	e003      	b.n	80064b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064b4:	2300      	movs	r3, #0
 80064b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064b8:	e02e      	b.n	8006518 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2200      	movs	r2, #0
 80064c2:	2180      	movs	r1, #128	@ 0x80
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 fb9b 	bl	8006c00 <UART_WaitOnFlagUntilTimeout>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e03a      	b.n	8006552 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10b      	bne.n	80064fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	3302      	adds	r3, #2
 80064f6:	61bb      	str	r3, [r7, #24]
 80064f8:	e007      	b.n	800650a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	781a      	ldrb	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	3301      	adds	r3, #1
 8006508:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800650e:	b29b      	uxth	r3, r3
 8006510:	3b01      	subs	r3, #1
 8006512:	b29a      	uxth	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800651c:	b29b      	uxth	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1cb      	bne.n	80064ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	2200      	movs	r2, #0
 800652a:	2140      	movs	r1, #64	@ 0x40
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 fb67 	bl	8006c00 <UART_WaitOnFlagUntilTimeout>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d005      	beq.n	8006544 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2220      	movs	r2, #32
 800653c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e006      	b.n	8006552 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2220      	movs	r2, #32
 8006548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	e000      	b.n	8006552 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006550:	2302      	movs	r3, #2
  }
}
 8006552:	4618      	mov	r0, r3
 8006554:	3720      	adds	r7, #32
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b08a      	sub	sp, #40	@ 0x28
 800655e:	af02      	add	r7, sp, #8
 8006560:	60f8      	str	r0, [r7, #12]
 8006562:	60b9      	str	r1, [r7, #8]
 8006564:	603b      	str	r3, [r7, #0]
 8006566:	4613      	mov	r3, r2
 8006568:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800656a:	2300      	movs	r3, #0
 800656c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b20      	cmp	r3, #32
 8006578:	f040 8081 	bne.w	800667e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <HAL_UART_Receive+0x2e>
 8006582:	88fb      	ldrh	r3, [r7, #6]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e079      	b.n	8006680 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2222      	movs	r2, #34	@ 0x22
 8006596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065a0:	f7fe fc4c 	bl	8004e3c <HAL_GetTick>
 80065a4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	88fa      	ldrh	r2, [r7, #6]
 80065aa:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	88fa      	ldrh	r2, [r7, #6]
 80065b0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ba:	d108      	bne.n	80065ce <HAL_UART_Receive+0x74>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d104      	bne.n	80065ce <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80065c4:	2300      	movs	r3, #0
 80065c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	61bb      	str	r3, [r7, #24]
 80065cc:	e003      	b.n	80065d6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065d2:	2300      	movs	r3, #0
 80065d4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80065d6:	e047      	b.n	8006668 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	2200      	movs	r2, #0
 80065e0:	2120      	movs	r1, #32
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 fb0c 	bl	8006c00 <UART_WaitOnFlagUntilTimeout>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d005      	beq.n	80065fa <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e042      	b.n	8006680 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10c      	bne.n	800661a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	b29b      	uxth	r3, r3
 8006608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660c:	b29a      	uxth	r2, r3
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	3302      	adds	r3, #2
 8006616:	61bb      	str	r3, [r7, #24]
 8006618:	e01f      	b.n	800665a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006622:	d007      	beq.n	8006634 <HAL_UART_Receive+0xda>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10a      	bne.n	8006642 <HAL_UART_Receive+0xe8>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d106      	bne.n	8006642 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	b2da      	uxtb	r2, r3
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	701a      	strb	r2, [r3, #0]
 8006640:	e008      	b.n	8006654 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	b2db      	uxtb	r3, r3
 800664a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800664e:	b2da      	uxtb	r2, r3
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	3301      	adds	r3, #1
 8006658:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800665e:	b29b      	uxth	r3, r3
 8006660:	3b01      	subs	r3, #1
 8006662:	b29a      	uxth	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800666c:	b29b      	uxth	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1b2      	bne.n	80065d8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2220      	movs	r2, #32
 8006676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	e000      	b.n	8006680 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800667e:	2302      	movs	r3, #2
  }
}
 8006680:	4618      	mov	r0, r3
 8006682:	3720      	adds	r7, #32
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b0ba      	sub	sp, #232	@ 0xe8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80066b4:	2300      	movs	r3, #0
 80066b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80066ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80066c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10f      	bne.n	80066ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d009      	beq.n	80066ee <HAL_UART_IRQHandler+0x66>
 80066da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fbc2 	bl	8006e70 <UART_Receive_IT>
      return;
 80066ec:	e25b      	b.n	8006ba6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80066ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 80de 	beq.w	80068b4 <HAL_UART_IRQHandler+0x22c>
 80066f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	d106      	bne.n	8006712 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006708:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 80d1 	beq.w	80068b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00b      	beq.n	8006736 <HAL_UART_IRQHandler+0xae>
 800671e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006726:	2b00      	cmp	r3, #0
 8006728:	d005      	beq.n	8006736 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800672e:	f043 0201 	orr.w	r2, r3, #1
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00b      	beq.n	800675a <HAL_UART_IRQHandler+0xd2>
 8006742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d005      	beq.n	800675a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006752:	f043 0202 	orr.w	r2, r3, #2
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800675a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00b      	beq.n	800677e <HAL_UART_IRQHandler+0xf6>
 8006766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b00      	cmp	r3, #0
 8006770:	d005      	beq.n	800677e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006776:	f043 0204 	orr.w	r2, r3, #4
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800677e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006782:	f003 0308 	and.w	r3, r3, #8
 8006786:	2b00      	cmp	r3, #0
 8006788:	d011      	beq.n	80067ae <HAL_UART_IRQHandler+0x126>
 800678a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800678e:	f003 0320 	and.w	r3, r3, #32
 8006792:	2b00      	cmp	r3, #0
 8006794:	d105      	bne.n	80067a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d005      	beq.n	80067ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a6:	f043 0208 	orr.w	r2, r3, #8
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 81f2 	beq.w	8006b9c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067bc:	f003 0320 	and.w	r3, r3, #32
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d008      	beq.n	80067d6 <HAL_UART_IRQHandler+0x14e>
 80067c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067c8:	f003 0320 	and.w	r3, r3, #32
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fb4d 	bl	8006e70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e0:	2b40      	cmp	r3, #64	@ 0x40
 80067e2:	bf0c      	ite	eq
 80067e4:	2301      	moveq	r3, #1
 80067e6:	2300      	movne	r3, #0
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067f2:	f003 0308 	and.w	r3, r3, #8
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d103      	bne.n	8006802 <HAL_UART_IRQHandler+0x17a>
 80067fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d04f      	beq.n	80068a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fa55 	bl	8006cb2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006812:	2b40      	cmp	r3, #64	@ 0x40
 8006814:	d141      	bne.n	800689a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3314      	adds	r3, #20
 800681c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006824:	e853 3f00 	ldrex	r3, [r3]
 8006828:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800682c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006830:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006834:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	3314      	adds	r3, #20
 800683e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006842:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006846:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800684e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006852:	e841 2300 	strex	r3, r2, [r1]
 8006856:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800685a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1d9      	bne.n	8006816 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006866:	2b00      	cmp	r3, #0
 8006868:	d013      	beq.n	8006892 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800686e:	4a7e      	ldr	r2, [pc, #504]	@ (8006a68 <HAL_UART_IRQHandler+0x3e0>)
 8006870:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006876:	4618      	mov	r0, r3
 8006878:	f7fe fc91 	bl	800519e <HAL_DMA_Abort_IT>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d016      	beq.n	80068b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800688c:	4610      	mov	r0, r2
 800688e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006890:	e00e      	b.n	80068b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f99e 	bl	8006bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006898:	e00a      	b.n	80068b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f99a 	bl	8006bd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a0:	e006      	b.n	80068b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f996 	bl	8006bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80068ae:	e175      	b.n	8006b9c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b0:	bf00      	nop
    return;
 80068b2:	e173      	b.n	8006b9c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	f040 814f 	bne.w	8006b5c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80068be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068c2:	f003 0310 	and.w	r3, r3, #16
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 8148 	beq.w	8006b5c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80068cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068d0:	f003 0310 	and.w	r3, r3, #16
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 8141 	beq.w	8006b5c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068da:	2300      	movs	r3, #0
 80068dc:	60bb      	str	r3, [r7, #8]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	60bb      	str	r3, [r7, #8]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	60bb      	str	r3, [r7, #8]
 80068ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068fa:	2b40      	cmp	r3, #64	@ 0x40
 80068fc:	f040 80b6 	bne.w	8006a6c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800690c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 8145 	beq.w	8006ba0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800691a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800691e:	429a      	cmp	r2, r3
 8006920:	f080 813e 	bcs.w	8006ba0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800692a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006936:	f000 8088 	beq.w	8006a4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	330c      	adds	r3, #12
 8006940:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006944:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006948:	e853 3f00 	ldrex	r3, [r3]
 800694c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006950:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006954:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006958:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	330c      	adds	r3, #12
 8006962:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006966:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800696a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006972:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800697e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1d9      	bne.n	800693a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3314      	adds	r3, #20
 800698c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006996:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006998:	f023 0301 	bic.w	r3, r3, #1
 800699c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3314      	adds	r3, #20
 80069a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80069aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80069ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80069b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80069b6:	e841 2300 	strex	r3, r2, [r1]
 80069ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80069bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1e1      	bne.n	8006986 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3314      	adds	r3, #20
 80069c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069cc:	e853 3f00 	ldrex	r3, [r3]
 80069d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80069d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3314      	adds	r3, #20
 80069e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80069e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80069e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80069ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80069f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e3      	bne.n	80069c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2220      	movs	r2, #32
 80069fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	330c      	adds	r3, #12
 8006a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a12:	e853 3f00 	ldrex	r3, [r3]
 8006a16:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a1a:	f023 0310 	bic.w	r3, r3, #16
 8006a1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	330c      	adds	r3, #12
 8006a28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006a2c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006a2e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a34:	e841 2300 	strex	r3, r2, [r1]
 8006a38:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e3      	bne.n	8006a08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fe fb3a 	bl	80050be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f8c1 	bl	8006be8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a66:	e09b      	b.n	8006ba0 <HAL_UART_IRQHandler+0x518>
 8006a68:	08006d79 	.word	0x08006d79
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 808e 	beq.w	8006ba4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006a88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 8089 	beq.w	8006ba4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	330c      	adds	r3, #12
 8006a98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006aa8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	330c      	adds	r3, #12
 8006ab2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006ab6:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ab8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006abc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006abe:	e841 2300 	strex	r3, r2, [r1]
 8006ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1e3      	bne.n	8006a92 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3314      	adds	r3, #20
 8006ad0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad4:	e853 3f00 	ldrex	r3, [r3]
 8006ad8:	623b      	str	r3, [r7, #32]
   return(result);
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	f023 0301 	bic.w	r3, r3, #1
 8006ae0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3314      	adds	r3, #20
 8006aea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006aee:	633a      	str	r2, [r7, #48]	@ 0x30
 8006af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006af6:	e841 2300 	strex	r3, r2, [r1]
 8006afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1e3      	bne.n	8006aca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2220      	movs	r2, #32
 8006b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	330c      	adds	r3, #12
 8006b16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 0310 	bic.w	r3, r3, #16
 8006b26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	330c      	adds	r3, #12
 8006b30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006b34:	61fa      	str	r2, [r7, #28]
 8006b36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b38:	69b9      	ldr	r1, [r7, #24]
 8006b3a:	69fa      	ldr	r2, [r7, #28]
 8006b3c:	e841 2300 	strex	r3, r2, [r1]
 8006b40:	617b      	str	r3, [r7, #20]
   return(result);
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e3      	bne.n	8006b10 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f847 	bl	8006be8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b5a:	e023      	b.n	8006ba4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d009      	beq.n	8006b7c <HAL_UART_IRQHandler+0x4f4>
 8006b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f913 	bl	8006da0 <UART_Transmit_IT>
    return;
 8006b7a:	e014      	b.n	8006ba6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00e      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x51e>
 8006b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d008      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f953 	bl	8006e40 <UART_EndTransmit_IT>
    return;
 8006b9a:	e004      	b.n	8006ba6 <HAL_UART_IRQHandler+0x51e>
    return;
 8006b9c:	bf00      	nop
 8006b9e:	e002      	b.n	8006ba6 <HAL_UART_IRQHandler+0x51e>
      return;
 8006ba0:	bf00      	nop
 8006ba2:	e000      	b.n	8006ba6 <HAL_UART_IRQHandler+0x51e>
      return;
 8006ba4:	bf00      	nop
  }
}
 8006ba6:	37e8      	adds	r7, #232	@ 0xe8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	603b      	str	r3, [r7, #0]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c10:	e03b      	b.n	8006c8a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c18:	d037      	beq.n	8006c8a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c1a:	f7fe f90f 	bl	8004e3c <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	6a3a      	ldr	r2, [r7, #32]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d302      	bcc.n	8006c30 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e03a      	b.n	8006caa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	f003 0304 	and.w	r3, r3, #4
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d023      	beq.n	8006c8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	2b80      	cmp	r3, #128	@ 0x80
 8006c46:	d020      	beq.n	8006c8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2b40      	cmp	r3, #64	@ 0x40
 8006c4c:	d01d      	beq.n	8006c8a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0308 	and.w	r3, r3, #8
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d116      	bne.n	8006c8a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	617b      	str	r3, [r7, #20]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	617b      	str	r3, [r7, #20]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	617b      	str	r3, [r7, #20]
 8006c70:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 f81d 	bl	8006cb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2208      	movs	r2, #8
 8006c7c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e00f      	b.n	8006caa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	4013      	ands	r3, r2
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	bf0c      	ite	eq
 8006c9a:	2301      	moveq	r3, #1
 8006c9c:	2300      	movne	r3, #0
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	79fb      	ldrb	r3, [r7, #7]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d0b4      	beq.n	8006c12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b095      	sub	sp, #84	@ 0x54
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	330c      	adds	r3, #12
 8006cc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ccc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	330c      	adds	r3, #12
 8006cd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006cda:	643a      	str	r2, [r7, #64]	@ 0x40
 8006cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ce0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1e5      	bne.n	8006cba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3314      	adds	r3, #20
 8006cf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	f023 0301 	bic.w	r3, r3, #1
 8006d04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3314      	adds	r3, #20
 8006d0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d16:	e841 2300 	strex	r3, r2, [r1]
 8006d1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e5      	bne.n	8006cee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d119      	bne.n	8006d5e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	330c      	adds	r3, #12
 8006d30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	e853 3f00 	ldrex	r3, [r3]
 8006d38:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	f023 0310 	bic.w	r3, r3, #16
 8006d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	330c      	adds	r3, #12
 8006d48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d4a:	61ba      	str	r2, [r7, #24]
 8006d4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4e:	6979      	ldr	r1, [r7, #20]
 8006d50:	69ba      	ldr	r2, [r7, #24]
 8006d52:	e841 2300 	strex	r3, r2, [r1]
 8006d56:	613b      	str	r3, [r7, #16]
   return(result);
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1e5      	bne.n	8006d2a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2220      	movs	r2, #32
 8006d62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006d6c:	bf00      	nop
 8006d6e:	3754      	adds	r7, #84	@ 0x54
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f7ff ff1e 	bl	8006bd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d98:	bf00      	nop
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b21      	cmp	r3, #33	@ 0x21
 8006db2:	d13e      	bne.n	8006e32 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dbc:	d114      	bne.n	8006de8 <UART_Transmit_IT+0x48>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d110      	bne.n	8006de8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dda:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	1c9a      	adds	r2, r3, #2
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	621a      	str	r2, [r3, #32]
 8006de6:	e008      	b.n	8006dfa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	1c59      	adds	r1, r3, #1
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	6211      	str	r1, [r2, #32]
 8006df2:	781a      	ldrb	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	3b01      	subs	r3, #1
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	4619      	mov	r1, r3
 8006e08:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10f      	bne.n	8006e2e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68da      	ldr	r2, [r3, #12]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68da      	ldr	r2, [r3, #12]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	e000      	b.n	8006e34 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e32:	2302      	movs	r3, #2
  }
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e56:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f7ff fea3 	bl	8006bac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b08c      	sub	sp, #48	@ 0x30
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b22      	cmp	r3, #34	@ 0x22
 8006e82:	f040 80ae 	bne.w	8006fe2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e8e:	d117      	bne.n	8006ec0 <UART_Receive_IT+0x50>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d113      	bne.n	8006ec0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb8:	1c9a      	adds	r2, r3, #2
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ebe:	e026      	b.n	8006f0e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ed2:	d007      	beq.n	8006ee4 <UART_Receive_IT+0x74>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10a      	bne.n	8006ef2 <UART_Receive_IT+0x82>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d106      	bne.n	8006ef2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eee:	701a      	strb	r2, [r3, #0]
 8006ef0:	e008      	b.n	8006f04 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f02:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f08:	1c5a      	adds	r2, r3, #1
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	3b01      	subs	r3, #1
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d15d      	bne.n	8006fde <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68da      	ldr	r2, [r3, #12]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f022 0220 	bic.w	r2, r2, #32
 8006f30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68da      	ldr	r2, [r3, #12]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	695a      	ldr	r2, [r3, #20]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f022 0201 	bic.w	r2, r2, #1
 8006f50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2220      	movs	r2, #32
 8006f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d135      	bne.n	8006fd4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	330c      	adds	r3, #12
 8006f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	e853 3f00 	ldrex	r3, [r3]
 8006f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	f023 0310 	bic.w	r3, r3, #16
 8006f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	330c      	adds	r3, #12
 8006f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f8e:	623a      	str	r2, [r7, #32]
 8006f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f92:	69f9      	ldr	r1, [r7, #28]
 8006f94:	6a3a      	ldr	r2, [r7, #32]
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e5      	bne.n	8006f6e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0310 	and.w	r3, r3, #16
 8006fac:	2b10      	cmp	r3, #16
 8006fae:	d10a      	bne.n	8006fc6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	60fb      	str	r3, [r7, #12]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7ff fe0b 	bl	8006be8 <HAL_UARTEx_RxEventCallback>
 8006fd2:	e002      	b.n	8006fda <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7ff fdf3 	bl	8006bc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	e002      	b.n	8006fe4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	e000      	b.n	8006fe4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006fe2:	2302      	movs	r3, #2
  }
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3730      	adds	r7, #48	@ 0x30
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ff0:	b0c0      	sub	sp, #256	@ 0x100
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007008:	68d9      	ldr	r1, [r3, #12]
 800700a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	ea40 0301 	orr.w	r3, r0, r1
 8007014:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800701a:	689a      	ldr	r2, [r3, #8]
 800701c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	431a      	orrs	r2, r3
 8007024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	431a      	orrs	r2, r3
 800702c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	4313      	orrs	r3, r2
 8007034:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007044:	f021 010c 	bic.w	r1, r1, #12
 8007048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007052:	430b      	orrs	r3, r1
 8007054:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007066:	6999      	ldr	r1, [r3, #24]
 8007068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	ea40 0301 	orr.w	r3, r0, r1
 8007072:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	4b8f      	ldr	r3, [pc, #572]	@ (80072b8 <UART_SetConfig+0x2cc>)
 800707c:	429a      	cmp	r2, r3
 800707e:	d005      	beq.n	800708c <UART_SetConfig+0xa0>
 8007080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4b8d      	ldr	r3, [pc, #564]	@ (80072bc <UART_SetConfig+0x2d0>)
 8007088:	429a      	cmp	r2, r3
 800708a:	d104      	bne.n	8007096 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800708c:	f7fe fecc 	bl	8005e28 <HAL_RCC_GetPCLK2Freq>
 8007090:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007094:	e003      	b.n	800709e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007096:	f7fe feb3 	bl	8005e00 <HAL_RCC_GetPCLK1Freq>
 800709a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800709e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070a8:	f040 810c 	bne.w	80072c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070b0:	2200      	movs	r2, #0
 80070b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80070b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80070ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80070be:	4622      	mov	r2, r4
 80070c0:	462b      	mov	r3, r5
 80070c2:	1891      	adds	r1, r2, r2
 80070c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80070c6:	415b      	adcs	r3, r3
 80070c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80070ce:	4621      	mov	r1, r4
 80070d0:	eb12 0801 	adds.w	r8, r2, r1
 80070d4:	4629      	mov	r1, r5
 80070d6:	eb43 0901 	adc.w	r9, r3, r1
 80070da:	f04f 0200 	mov.w	r2, #0
 80070de:	f04f 0300 	mov.w	r3, #0
 80070e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070ee:	4690      	mov	r8, r2
 80070f0:	4699      	mov	r9, r3
 80070f2:	4623      	mov	r3, r4
 80070f4:	eb18 0303 	adds.w	r3, r8, r3
 80070f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80070fc:	462b      	mov	r3, r5
 80070fe:	eb49 0303 	adc.w	r3, r9, r3
 8007102:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007112:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007116:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800711a:	460b      	mov	r3, r1
 800711c:	18db      	adds	r3, r3, r3
 800711e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007120:	4613      	mov	r3, r2
 8007122:	eb42 0303 	adc.w	r3, r2, r3
 8007126:	657b      	str	r3, [r7, #84]	@ 0x54
 8007128:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800712c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007130:	f7f9 fec0 	bl	8000eb4 <__aeabi_uldivmod>
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	4b61      	ldr	r3, [pc, #388]	@ (80072c0 <UART_SetConfig+0x2d4>)
 800713a:	fba3 2302 	umull	r2, r3, r3, r2
 800713e:	095b      	lsrs	r3, r3, #5
 8007140:	011c      	lsls	r4, r3, #4
 8007142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007146:	2200      	movs	r2, #0
 8007148:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800714c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007150:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007154:	4642      	mov	r2, r8
 8007156:	464b      	mov	r3, r9
 8007158:	1891      	adds	r1, r2, r2
 800715a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800715c:	415b      	adcs	r3, r3
 800715e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007160:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007164:	4641      	mov	r1, r8
 8007166:	eb12 0a01 	adds.w	sl, r2, r1
 800716a:	4649      	mov	r1, r9
 800716c:	eb43 0b01 	adc.w	fp, r3, r1
 8007170:	f04f 0200 	mov.w	r2, #0
 8007174:	f04f 0300 	mov.w	r3, #0
 8007178:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800717c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007180:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007184:	4692      	mov	sl, r2
 8007186:	469b      	mov	fp, r3
 8007188:	4643      	mov	r3, r8
 800718a:	eb1a 0303 	adds.w	r3, sl, r3
 800718e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007192:	464b      	mov	r3, r9
 8007194:	eb4b 0303 	adc.w	r3, fp, r3
 8007198:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800719c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80071a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80071ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80071b0:	460b      	mov	r3, r1
 80071b2:	18db      	adds	r3, r3, r3
 80071b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80071b6:	4613      	mov	r3, r2
 80071b8:	eb42 0303 	adc.w	r3, r2, r3
 80071bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80071be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80071c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80071c6:	f7f9 fe75 	bl	8000eb4 <__aeabi_uldivmod>
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	4611      	mov	r1, r2
 80071d0:	4b3b      	ldr	r3, [pc, #236]	@ (80072c0 <UART_SetConfig+0x2d4>)
 80071d2:	fba3 2301 	umull	r2, r3, r3, r1
 80071d6:	095b      	lsrs	r3, r3, #5
 80071d8:	2264      	movs	r2, #100	@ 0x64
 80071da:	fb02 f303 	mul.w	r3, r2, r3
 80071de:	1acb      	subs	r3, r1, r3
 80071e0:	00db      	lsls	r3, r3, #3
 80071e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80071e6:	4b36      	ldr	r3, [pc, #216]	@ (80072c0 <UART_SetConfig+0x2d4>)
 80071e8:	fba3 2302 	umull	r2, r3, r3, r2
 80071ec:	095b      	lsrs	r3, r3, #5
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80071f4:	441c      	add	r4, r3
 80071f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071fa:	2200      	movs	r2, #0
 80071fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007200:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007204:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007208:	4642      	mov	r2, r8
 800720a:	464b      	mov	r3, r9
 800720c:	1891      	adds	r1, r2, r2
 800720e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007210:	415b      	adcs	r3, r3
 8007212:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007214:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007218:	4641      	mov	r1, r8
 800721a:	1851      	adds	r1, r2, r1
 800721c:	6339      	str	r1, [r7, #48]	@ 0x30
 800721e:	4649      	mov	r1, r9
 8007220:	414b      	adcs	r3, r1
 8007222:	637b      	str	r3, [r7, #52]	@ 0x34
 8007224:	f04f 0200 	mov.w	r2, #0
 8007228:	f04f 0300 	mov.w	r3, #0
 800722c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007230:	4659      	mov	r1, fp
 8007232:	00cb      	lsls	r3, r1, #3
 8007234:	4651      	mov	r1, sl
 8007236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800723a:	4651      	mov	r1, sl
 800723c:	00ca      	lsls	r2, r1, #3
 800723e:	4610      	mov	r0, r2
 8007240:	4619      	mov	r1, r3
 8007242:	4603      	mov	r3, r0
 8007244:	4642      	mov	r2, r8
 8007246:	189b      	adds	r3, r3, r2
 8007248:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800724c:	464b      	mov	r3, r9
 800724e:	460a      	mov	r2, r1
 8007250:	eb42 0303 	adc.w	r3, r2, r3
 8007254:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007264:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007268:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800726c:	460b      	mov	r3, r1
 800726e:	18db      	adds	r3, r3, r3
 8007270:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007272:	4613      	mov	r3, r2
 8007274:	eb42 0303 	adc.w	r3, r2, r3
 8007278:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800727a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800727e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007282:	f7f9 fe17 	bl	8000eb4 <__aeabi_uldivmod>
 8007286:	4602      	mov	r2, r0
 8007288:	460b      	mov	r3, r1
 800728a:	4b0d      	ldr	r3, [pc, #52]	@ (80072c0 <UART_SetConfig+0x2d4>)
 800728c:	fba3 1302 	umull	r1, r3, r3, r2
 8007290:	095b      	lsrs	r3, r3, #5
 8007292:	2164      	movs	r1, #100	@ 0x64
 8007294:	fb01 f303 	mul.w	r3, r1, r3
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	3332      	adds	r3, #50	@ 0x32
 800729e:	4a08      	ldr	r2, [pc, #32]	@ (80072c0 <UART_SetConfig+0x2d4>)
 80072a0:	fba2 2303 	umull	r2, r3, r2, r3
 80072a4:	095b      	lsrs	r3, r3, #5
 80072a6:	f003 0207 	and.w	r2, r3, #7
 80072aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4422      	add	r2, r4
 80072b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072b4:	e106      	b.n	80074c4 <UART_SetConfig+0x4d8>
 80072b6:	bf00      	nop
 80072b8:	40011000 	.word	0x40011000
 80072bc:	40011400 	.word	0x40011400
 80072c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072c8:	2200      	movs	r2, #0
 80072ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80072ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80072d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80072d6:	4642      	mov	r2, r8
 80072d8:	464b      	mov	r3, r9
 80072da:	1891      	adds	r1, r2, r2
 80072dc:	6239      	str	r1, [r7, #32]
 80072de:	415b      	adcs	r3, r3
 80072e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80072e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072e6:	4641      	mov	r1, r8
 80072e8:	1854      	adds	r4, r2, r1
 80072ea:	4649      	mov	r1, r9
 80072ec:	eb43 0501 	adc.w	r5, r3, r1
 80072f0:	f04f 0200 	mov.w	r2, #0
 80072f4:	f04f 0300 	mov.w	r3, #0
 80072f8:	00eb      	lsls	r3, r5, #3
 80072fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072fe:	00e2      	lsls	r2, r4, #3
 8007300:	4614      	mov	r4, r2
 8007302:	461d      	mov	r5, r3
 8007304:	4643      	mov	r3, r8
 8007306:	18e3      	adds	r3, r4, r3
 8007308:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800730c:	464b      	mov	r3, r9
 800730e:	eb45 0303 	adc.w	r3, r5, r3
 8007312:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007322:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007326:	f04f 0200 	mov.w	r2, #0
 800732a:	f04f 0300 	mov.w	r3, #0
 800732e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007332:	4629      	mov	r1, r5
 8007334:	008b      	lsls	r3, r1, #2
 8007336:	4621      	mov	r1, r4
 8007338:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800733c:	4621      	mov	r1, r4
 800733e:	008a      	lsls	r2, r1, #2
 8007340:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007344:	f7f9 fdb6 	bl	8000eb4 <__aeabi_uldivmod>
 8007348:	4602      	mov	r2, r0
 800734a:	460b      	mov	r3, r1
 800734c:	4b60      	ldr	r3, [pc, #384]	@ (80074d0 <UART_SetConfig+0x4e4>)
 800734e:	fba3 2302 	umull	r2, r3, r3, r2
 8007352:	095b      	lsrs	r3, r3, #5
 8007354:	011c      	lsls	r4, r3, #4
 8007356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800735a:	2200      	movs	r2, #0
 800735c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007360:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007364:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007368:	4642      	mov	r2, r8
 800736a:	464b      	mov	r3, r9
 800736c:	1891      	adds	r1, r2, r2
 800736e:	61b9      	str	r1, [r7, #24]
 8007370:	415b      	adcs	r3, r3
 8007372:	61fb      	str	r3, [r7, #28]
 8007374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007378:	4641      	mov	r1, r8
 800737a:	1851      	adds	r1, r2, r1
 800737c:	6139      	str	r1, [r7, #16]
 800737e:	4649      	mov	r1, r9
 8007380:	414b      	adcs	r3, r1
 8007382:	617b      	str	r3, [r7, #20]
 8007384:	f04f 0200 	mov.w	r2, #0
 8007388:	f04f 0300 	mov.w	r3, #0
 800738c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007390:	4659      	mov	r1, fp
 8007392:	00cb      	lsls	r3, r1, #3
 8007394:	4651      	mov	r1, sl
 8007396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800739a:	4651      	mov	r1, sl
 800739c:	00ca      	lsls	r2, r1, #3
 800739e:	4610      	mov	r0, r2
 80073a0:	4619      	mov	r1, r3
 80073a2:	4603      	mov	r3, r0
 80073a4:	4642      	mov	r2, r8
 80073a6:	189b      	adds	r3, r3, r2
 80073a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80073ac:	464b      	mov	r3, r9
 80073ae:	460a      	mov	r2, r1
 80073b0:	eb42 0303 	adc.w	r3, r2, r3
 80073b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80073b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80073c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80073c4:	f04f 0200 	mov.w	r2, #0
 80073c8:	f04f 0300 	mov.w	r3, #0
 80073cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80073d0:	4649      	mov	r1, r9
 80073d2:	008b      	lsls	r3, r1, #2
 80073d4:	4641      	mov	r1, r8
 80073d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073da:	4641      	mov	r1, r8
 80073dc:	008a      	lsls	r2, r1, #2
 80073de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80073e2:	f7f9 fd67 	bl	8000eb4 <__aeabi_uldivmod>
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	4611      	mov	r1, r2
 80073ec:	4b38      	ldr	r3, [pc, #224]	@ (80074d0 <UART_SetConfig+0x4e4>)
 80073ee:	fba3 2301 	umull	r2, r3, r3, r1
 80073f2:	095b      	lsrs	r3, r3, #5
 80073f4:	2264      	movs	r2, #100	@ 0x64
 80073f6:	fb02 f303 	mul.w	r3, r2, r3
 80073fa:	1acb      	subs	r3, r1, r3
 80073fc:	011b      	lsls	r3, r3, #4
 80073fe:	3332      	adds	r3, #50	@ 0x32
 8007400:	4a33      	ldr	r2, [pc, #204]	@ (80074d0 <UART_SetConfig+0x4e4>)
 8007402:	fba2 2303 	umull	r2, r3, r2, r3
 8007406:	095b      	lsrs	r3, r3, #5
 8007408:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800740c:	441c      	add	r4, r3
 800740e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007412:	2200      	movs	r2, #0
 8007414:	673b      	str	r3, [r7, #112]	@ 0x70
 8007416:	677a      	str	r2, [r7, #116]	@ 0x74
 8007418:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800741c:	4642      	mov	r2, r8
 800741e:	464b      	mov	r3, r9
 8007420:	1891      	adds	r1, r2, r2
 8007422:	60b9      	str	r1, [r7, #8]
 8007424:	415b      	adcs	r3, r3
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800742c:	4641      	mov	r1, r8
 800742e:	1851      	adds	r1, r2, r1
 8007430:	6039      	str	r1, [r7, #0]
 8007432:	4649      	mov	r1, r9
 8007434:	414b      	adcs	r3, r1
 8007436:	607b      	str	r3, [r7, #4]
 8007438:	f04f 0200 	mov.w	r2, #0
 800743c:	f04f 0300 	mov.w	r3, #0
 8007440:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007444:	4659      	mov	r1, fp
 8007446:	00cb      	lsls	r3, r1, #3
 8007448:	4651      	mov	r1, sl
 800744a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800744e:	4651      	mov	r1, sl
 8007450:	00ca      	lsls	r2, r1, #3
 8007452:	4610      	mov	r0, r2
 8007454:	4619      	mov	r1, r3
 8007456:	4603      	mov	r3, r0
 8007458:	4642      	mov	r2, r8
 800745a:	189b      	adds	r3, r3, r2
 800745c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800745e:	464b      	mov	r3, r9
 8007460:	460a      	mov	r2, r1
 8007462:	eb42 0303 	adc.w	r3, r2, r3
 8007466:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	663b      	str	r3, [r7, #96]	@ 0x60
 8007472:	667a      	str	r2, [r7, #100]	@ 0x64
 8007474:	f04f 0200 	mov.w	r2, #0
 8007478:	f04f 0300 	mov.w	r3, #0
 800747c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007480:	4649      	mov	r1, r9
 8007482:	008b      	lsls	r3, r1, #2
 8007484:	4641      	mov	r1, r8
 8007486:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800748a:	4641      	mov	r1, r8
 800748c:	008a      	lsls	r2, r1, #2
 800748e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007492:	f7f9 fd0f 	bl	8000eb4 <__aeabi_uldivmod>
 8007496:	4602      	mov	r2, r0
 8007498:	460b      	mov	r3, r1
 800749a:	4b0d      	ldr	r3, [pc, #52]	@ (80074d0 <UART_SetConfig+0x4e4>)
 800749c:	fba3 1302 	umull	r1, r3, r3, r2
 80074a0:	095b      	lsrs	r3, r3, #5
 80074a2:	2164      	movs	r1, #100	@ 0x64
 80074a4:	fb01 f303 	mul.w	r3, r1, r3
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	011b      	lsls	r3, r3, #4
 80074ac:	3332      	adds	r3, #50	@ 0x32
 80074ae:	4a08      	ldr	r2, [pc, #32]	@ (80074d0 <UART_SetConfig+0x4e4>)
 80074b0:	fba2 2303 	umull	r2, r3, r2, r3
 80074b4:	095b      	lsrs	r3, r3, #5
 80074b6:	f003 020f 	and.w	r2, r3, #15
 80074ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4422      	add	r2, r4
 80074c2:	609a      	str	r2, [r3, #8]
}
 80074c4:	bf00      	nop
 80074c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80074ca:	46bd      	mov	sp, r7
 80074cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074d0:	51eb851f 	.word	0x51eb851f

080074d4 <malloc>:
 80074d4:	4b02      	ldr	r3, [pc, #8]	@ (80074e0 <malloc+0xc>)
 80074d6:	4601      	mov	r1, r0
 80074d8:	6818      	ldr	r0, [r3, #0]
 80074da:	f000 b825 	b.w	8007528 <_malloc_r>
 80074de:	bf00      	nop
 80074e0:	20000588 	.word	0x20000588

080074e4 <sbrk_aligned>:
 80074e4:	b570      	push	{r4, r5, r6, lr}
 80074e6:	4e0f      	ldr	r6, [pc, #60]	@ (8007524 <sbrk_aligned+0x40>)
 80074e8:	460c      	mov	r4, r1
 80074ea:	6831      	ldr	r1, [r6, #0]
 80074ec:	4605      	mov	r5, r0
 80074ee:	b911      	cbnz	r1, 80074f6 <sbrk_aligned+0x12>
 80074f0:	f001 f966 	bl	80087c0 <_sbrk_r>
 80074f4:	6030      	str	r0, [r6, #0]
 80074f6:	4621      	mov	r1, r4
 80074f8:	4628      	mov	r0, r5
 80074fa:	f001 f961 	bl	80087c0 <_sbrk_r>
 80074fe:	1c43      	adds	r3, r0, #1
 8007500:	d103      	bne.n	800750a <sbrk_aligned+0x26>
 8007502:	f04f 34ff 	mov.w	r4, #4294967295
 8007506:	4620      	mov	r0, r4
 8007508:	bd70      	pop	{r4, r5, r6, pc}
 800750a:	1cc4      	adds	r4, r0, #3
 800750c:	f024 0403 	bic.w	r4, r4, #3
 8007510:	42a0      	cmp	r0, r4
 8007512:	d0f8      	beq.n	8007506 <sbrk_aligned+0x22>
 8007514:	1a21      	subs	r1, r4, r0
 8007516:	4628      	mov	r0, r5
 8007518:	f001 f952 	bl	80087c0 <_sbrk_r>
 800751c:	3001      	adds	r0, #1
 800751e:	d1f2      	bne.n	8007506 <sbrk_aligned+0x22>
 8007520:	e7ef      	b.n	8007502 <sbrk_aligned+0x1e>
 8007522:	bf00      	nop
 8007524:	200009cc 	.word	0x200009cc

08007528 <_malloc_r>:
 8007528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800752c:	1ccd      	adds	r5, r1, #3
 800752e:	f025 0503 	bic.w	r5, r5, #3
 8007532:	3508      	adds	r5, #8
 8007534:	2d0c      	cmp	r5, #12
 8007536:	bf38      	it	cc
 8007538:	250c      	movcc	r5, #12
 800753a:	2d00      	cmp	r5, #0
 800753c:	4606      	mov	r6, r0
 800753e:	db01      	blt.n	8007544 <_malloc_r+0x1c>
 8007540:	42a9      	cmp	r1, r5
 8007542:	d904      	bls.n	800754e <_malloc_r+0x26>
 8007544:	230c      	movs	r3, #12
 8007546:	6033      	str	r3, [r6, #0]
 8007548:	2000      	movs	r0, #0
 800754a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800754e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007624 <_malloc_r+0xfc>
 8007552:	f000 f869 	bl	8007628 <__malloc_lock>
 8007556:	f8d8 3000 	ldr.w	r3, [r8]
 800755a:	461c      	mov	r4, r3
 800755c:	bb44      	cbnz	r4, 80075b0 <_malloc_r+0x88>
 800755e:	4629      	mov	r1, r5
 8007560:	4630      	mov	r0, r6
 8007562:	f7ff ffbf 	bl	80074e4 <sbrk_aligned>
 8007566:	1c43      	adds	r3, r0, #1
 8007568:	4604      	mov	r4, r0
 800756a:	d158      	bne.n	800761e <_malloc_r+0xf6>
 800756c:	f8d8 4000 	ldr.w	r4, [r8]
 8007570:	4627      	mov	r7, r4
 8007572:	2f00      	cmp	r7, #0
 8007574:	d143      	bne.n	80075fe <_malloc_r+0xd6>
 8007576:	2c00      	cmp	r4, #0
 8007578:	d04b      	beq.n	8007612 <_malloc_r+0xea>
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	4639      	mov	r1, r7
 800757e:	4630      	mov	r0, r6
 8007580:	eb04 0903 	add.w	r9, r4, r3
 8007584:	f001 f91c 	bl	80087c0 <_sbrk_r>
 8007588:	4581      	cmp	r9, r0
 800758a:	d142      	bne.n	8007612 <_malloc_r+0xea>
 800758c:	6821      	ldr	r1, [r4, #0]
 800758e:	1a6d      	subs	r5, r5, r1
 8007590:	4629      	mov	r1, r5
 8007592:	4630      	mov	r0, r6
 8007594:	f7ff ffa6 	bl	80074e4 <sbrk_aligned>
 8007598:	3001      	adds	r0, #1
 800759a:	d03a      	beq.n	8007612 <_malloc_r+0xea>
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	442b      	add	r3, r5
 80075a0:	6023      	str	r3, [r4, #0]
 80075a2:	f8d8 3000 	ldr.w	r3, [r8]
 80075a6:	685a      	ldr	r2, [r3, #4]
 80075a8:	bb62      	cbnz	r2, 8007604 <_malloc_r+0xdc>
 80075aa:	f8c8 7000 	str.w	r7, [r8]
 80075ae:	e00f      	b.n	80075d0 <_malloc_r+0xa8>
 80075b0:	6822      	ldr	r2, [r4, #0]
 80075b2:	1b52      	subs	r2, r2, r5
 80075b4:	d420      	bmi.n	80075f8 <_malloc_r+0xd0>
 80075b6:	2a0b      	cmp	r2, #11
 80075b8:	d917      	bls.n	80075ea <_malloc_r+0xc2>
 80075ba:	1961      	adds	r1, r4, r5
 80075bc:	42a3      	cmp	r3, r4
 80075be:	6025      	str	r5, [r4, #0]
 80075c0:	bf18      	it	ne
 80075c2:	6059      	strne	r1, [r3, #4]
 80075c4:	6863      	ldr	r3, [r4, #4]
 80075c6:	bf08      	it	eq
 80075c8:	f8c8 1000 	streq.w	r1, [r8]
 80075cc:	5162      	str	r2, [r4, r5]
 80075ce:	604b      	str	r3, [r1, #4]
 80075d0:	4630      	mov	r0, r6
 80075d2:	f000 f82f 	bl	8007634 <__malloc_unlock>
 80075d6:	f104 000b 	add.w	r0, r4, #11
 80075da:	1d23      	adds	r3, r4, #4
 80075dc:	f020 0007 	bic.w	r0, r0, #7
 80075e0:	1ac2      	subs	r2, r0, r3
 80075e2:	bf1c      	itt	ne
 80075e4:	1a1b      	subne	r3, r3, r0
 80075e6:	50a3      	strne	r3, [r4, r2]
 80075e8:	e7af      	b.n	800754a <_malloc_r+0x22>
 80075ea:	6862      	ldr	r2, [r4, #4]
 80075ec:	42a3      	cmp	r3, r4
 80075ee:	bf0c      	ite	eq
 80075f0:	f8c8 2000 	streq.w	r2, [r8]
 80075f4:	605a      	strne	r2, [r3, #4]
 80075f6:	e7eb      	b.n	80075d0 <_malloc_r+0xa8>
 80075f8:	4623      	mov	r3, r4
 80075fa:	6864      	ldr	r4, [r4, #4]
 80075fc:	e7ae      	b.n	800755c <_malloc_r+0x34>
 80075fe:	463c      	mov	r4, r7
 8007600:	687f      	ldr	r7, [r7, #4]
 8007602:	e7b6      	b.n	8007572 <_malloc_r+0x4a>
 8007604:	461a      	mov	r2, r3
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	42a3      	cmp	r3, r4
 800760a:	d1fb      	bne.n	8007604 <_malloc_r+0xdc>
 800760c:	2300      	movs	r3, #0
 800760e:	6053      	str	r3, [r2, #4]
 8007610:	e7de      	b.n	80075d0 <_malloc_r+0xa8>
 8007612:	230c      	movs	r3, #12
 8007614:	6033      	str	r3, [r6, #0]
 8007616:	4630      	mov	r0, r6
 8007618:	f000 f80c 	bl	8007634 <__malloc_unlock>
 800761c:	e794      	b.n	8007548 <_malloc_r+0x20>
 800761e:	6005      	str	r5, [r0, #0]
 8007620:	e7d6      	b.n	80075d0 <_malloc_r+0xa8>
 8007622:	bf00      	nop
 8007624:	200009d0 	.word	0x200009d0

08007628 <__malloc_lock>:
 8007628:	4801      	ldr	r0, [pc, #4]	@ (8007630 <__malloc_lock+0x8>)
 800762a:	f001 b91a 	b.w	8008862 <__retarget_lock_acquire_recursive>
 800762e:	bf00      	nop
 8007630:	20000b14 	.word	0x20000b14

08007634 <__malloc_unlock>:
 8007634:	4801      	ldr	r0, [pc, #4]	@ (800763c <__malloc_unlock+0x8>)
 8007636:	f001 b915 	b.w	8008864 <__retarget_lock_release_recursive>
 800763a:	bf00      	nop
 800763c:	20000b14 	.word	0x20000b14

08007640 <__cvt>:
 8007640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007644:	ec57 6b10 	vmov	r6, r7, d0
 8007648:	2f00      	cmp	r7, #0
 800764a:	460c      	mov	r4, r1
 800764c:	4619      	mov	r1, r3
 800764e:	463b      	mov	r3, r7
 8007650:	bfbb      	ittet	lt
 8007652:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007656:	461f      	movlt	r7, r3
 8007658:	2300      	movge	r3, #0
 800765a:	232d      	movlt	r3, #45	@ 0x2d
 800765c:	700b      	strb	r3, [r1, #0]
 800765e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007660:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007664:	4691      	mov	r9, r2
 8007666:	f023 0820 	bic.w	r8, r3, #32
 800766a:	bfbc      	itt	lt
 800766c:	4632      	movlt	r2, r6
 800766e:	4616      	movlt	r6, r2
 8007670:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007674:	d005      	beq.n	8007682 <__cvt+0x42>
 8007676:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800767a:	d100      	bne.n	800767e <__cvt+0x3e>
 800767c:	3401      	adds	r4, #1
 800767e:	2102      	movs	r1, #2
 8007680:	e000      	b.n	8007684 <__cvt+0x44>
 8007682:	2103      	movs	r1, #3
 8007684:	ab03      	add	r3, sp, #12
 8007686:	9301      	str	r3, [sp, #4]
 8007688:	ab02      	add	r3, sp, #8
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	ec47 6b10 	vmov	d0, r6, r7
 8007690:	4653      	mov	r3, sl
 8007692:	4622      	mov	r2, r4
 8007694:	f001 f9a4 	bl	80089e0 <_dtoa_r>
 8007698:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800769c:	4605      	mov	r5, r0
 800769e:	d119      	bne.n	80076d4 <__cvt+0x94>
 80076a0:	f019 0f01 	tst.w	r9, #1
 80076a4:	d00e      	beq.n	80076c4 <__cvt+0x84>
 80076a6:	eb00 0904 	add.w	r9, r0, r4
 80076aa:	2200      	movs	r2, #0
 80076ac:	2300      	movs	r3, #0
 80076ae:	4630      	mov	r0, r6
 80076b0:	4639      	mov	r1, r7
 80076b2:	f7f9 fa11 	bl	8000ad8 <__aeabi_dcmpeq>
 80076b6:	b108      	cbz	r0, 80076bc <__cvt+0x7c>
 80076b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80076bc:	2230      	movs	r2, #48	@ 0x30
 80076be:	9b03      	ldr	r3, [sp, #12]
 80076c0:	454b      	cmp	r3, r9
 80076c2:	d31e      	bcc.n	8007702 <__cvt+0xc2>
 80076c4:	9b03      	ldr	r3, [sp, #12]
 80076c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076c8:	1b5b      	subs	r3, r3, r5
 80076ca:	4628      	mov	r0, r5
 80076cc:	6013      	str	r3, [r2, #0]
 80076ce:	b004      	add	sp, #16
 80076d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80076d8:	eb00 0904 	add.w	r9, r0, r4
 80076dc:	d1e5      	bne.n	80076aa <__cvt+0x6a>
 80076de:	7803      	ldrb	r3, [r0, #0]
 80076e0:	2b30      	cmp	r3, #48	@ 0x30
 80076e2:	d10a      	bne.n	80076fa <__cvt+0xba>
 80076e4:	2200      	movs	r2, #0
 80076e6:	2300      	movs	r3, #0
 80076e8:	4630      	mov	r0, r6
 80076ea:	4639      	mov	r1, r7
 80076ec:	f7f9 f9f4 	bl	8000ad8 <__aeabi_dcmpeq>
 80076f0:	b918      	cbnz	r0, 80076fa <__cvt+0xba>
 80076f2:	f1c4 0401 	rsb	r4, r4, #1
 80076f6:	f8ca 4000 	str.w	r4, [sl]
 80076fa:	f8da 3000 	ldr.w	r3, [sl]
 80076fe:	4499      	add	r9, r3
 8007700:	e7d3      	b.n	80076aa <__cvt+0x6a>
 8007702:	1c59      	adds	r1, r3, #1
 8007704:	9103      	str	r1, [sp, #12]
 8007706:	701a      	strb	r2, [r3, #0]
 8007708:	e7d9      	b.n	80076be <__cvt+0x7e>

0800770a <__exponent>:
 800770a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800770c:	2900      	cmp	r1, #0
 800770e:	bfba      	itte	lt
 8007710:	4249      	neglt	r1, r1
 8007712:	232d      	movlt	r3, #45	@ 0x2d
 8007714:	232b      	movge	r3, #43	@ 0x2b
 8007716:	2909      	cmp	r1, #9
 8007718:	7002      	strb	r2, [r0, #0]
 800771a:	7043      	strb	r3, [r0, #1]
 800771c:	dd29      	ble.n	8007772 <__exponent+0x68>
 800771e:	f10d 0307 	add.w	r3, sp, #7
 8007722:	461d      	mov	r5, r3
 8007724:	270a      	movs	r7, #10
 8007726:	461a      	mov	r2, r3
 8007728:	fbb1 f6f7 	udiv	r6, r1, r7
 800772c:	fb07 1416 	mls	r4, r7, r6, r1
 8007730:	3430      	adds	r4, #48	@ 0x30
 8007732:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007736:	460c      	mov	r4, r1
 8007738:	2c63      	cmp	r4, #99	@ 0x63
 800773a:	f103 33ff 	add.w	r3, r3, #4294967295
 800773e:	4631      	mov	r1, r6
 8007740:	dcf1      	bgt.n	8007726 <__exponent+0x1c>
 8007742:	3130      	adds	r1, #48	@ 0x30
 8007744:	1e94      	subs	r4, r2, #2
 8007746:	f803 1c01 	strb.w	r1, [r3, #-1]
 800774a:	1c41      	adds	r1, r0, #1
 800774c:	4623      	mov	r3, r4
 800774e:	42ab      	cmp	r3, r5
 8007750:	d30a      	bcc.n	8007768 <__exponent+0x5e>
 8007752:	f10d 0309 	add.w	r3, sp, #9
 8007756:	1a9b      	subs	r3, r3, r2
 8007758:	42ac      	cmp	r4, r5
 800775a:	bf88      	it	hi
 800775c:	2300      	movhi	r3, #0
 800775e:	3302      	adds	r3, #2
 8007760:	4403      	add	r3, r0
 8007762:	1a18      	subs	r0, r3, r0
 8007764:	b003      	add	sp, #12
 8007766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007768:	f813 6b01 	ldrb.w	r6, [r3], #1
 800776c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007770:	e7ed      	b.n	800774e <__exponent+0x44>
 8007772:	2330      	movs	r3, #48	@ 0x30
 8007774:	3130      	adds	r1, #48	@ 0x30
 8007776:	7083      	strb	r3, [r0, #2]
 8007778:	70c1      	strb	r1, [r0, #3]
 800777a:	1d03      	adds	r3, r0, #4
 800777c:	e7f1      	b.n	8007762 <__exponent+0x58>
	...

08007780 <_printf_float>:
 8007780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007784:	b08d      	sub	sp, #52	@ 0x34
 8007786:	460c      	mov	r4, r1
 8007788:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800778c:	4616      	mov	r6, r2
 800778e:	461f      	mov	r7, r3
 8007790:	4605      	mov	r5, r0
 8007792:	f000 ffdd 	bl	8008750 <_localeconv_r>
 8007796:	6803      	ldr	r3, [r0, #0]
 8007798:	9304      	str	r3, [sp, #16]
 800779a:	4618      	mov	r0, r3
 800779c:	f7f8 fd70 	bl	8000280 <strlen>
 80077a0:	2300      	movs	r3, #0
 80077a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80077a4:	f8d8 3000 	ldr.w	r3, [r8]
 80077a8:	9005      	str	r0, [sp, #20]
 80077aa:	3307      	adds	r3, #7
 80077ac:	f023 0307 	bic.w	r3, r3, #7
 80077b0:	f103 0208 	add.w	r2, r3, #8
 80077b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80077b8:	f8d4 b000 	ldr.w	fp, [r4]
 80077bc:	f8c8 2000 	str.w	r2, [r8]
 80077c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80077c8:	9307      	str	r3, [sp, #28]
 80077ca:	f8cd 8018 	str.w	r8, [sp, #24]
 80077ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80077d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077d6:	4b9c      	ldr	r3, [pc, #624]	@ (8007a48 <_printf_float+0x2c8>)
 80077d8:	f04f 32ff 	mov.w	r2, #4294967295
 80077dc:	f7f9 f9ae 	bl	8000b3c <__aeabi_dcmpun>
 80077e0:	bb70      	cbnz	r0, 8007840 <_printf_float+0xc0>
 80077e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077e6:	4b98      	ldr	r3, [pc, #608]	@ (8007a48 <_printf_float+0x2c8>)
 80077e8:	f04f 32ff 	mov.w	r2, #4294967295
 80077ec:	f7f9 f988 	bl	8000b00 <__aeabi_dcmple>
 80077f0:	bb30      	cbnz	r0, 8007840 <_printf_float+0xc0>
 80077f2:	2200      	movs	r2, #0
 80077f4:	2300      	movs	r3, #0
 80077f6:	4640      	mov	r0, r8
 80077f8:	4649      	mov	r1, r9
 80077fa:	f7f9 f977 	bl	8000aec <__aeabi_dcmplt>
 80077fe:	b110      	cbz	r0, 8007806 <_printf_float+0x86>
 8007800:	232d      	movs	r3, #45	@ 0x2d
 8007802:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007806:	4a91      	ldr	r2, [pc, #580]	@ (8007a4c <_printf_float+0x2cc>)
 8007808:	4b91      	ldr	r3, [pc, #580]	@ (8007a50 <_printf_float+0x2d0>)
 800780a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800780e:	bf94      	ite	ls
 8007810:	4690      	movls	r8, r2
 8007812:	4698      	movhi	r8, r3
 8007814:	2303      	movs	r3, #3
 8007816:	6123      	str	r3, [r4, #16]
 8007818:	f02b 0304 	bic.w	r3, fp, #4
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	f04f 0900 	mov.w	r9, #0
 8007822:	9700      	str	r7, [sp, #0]
 8007824:	4633      	mov	r3, r6
 8007826:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007828:	4621      	mov	r1, r4
 800782a:	4628      	mov	r0, r5
 800782c:	f000 f9d2 	bl	8007bd4 <_printf_common>
 8007830:	3001      	adds	r0, #1
 8007832:	f040 808d 	bne.w	8007950 <_printf_float+0x1d0>
 8007836:	f04f 30ff 	mov.w	r0, #4294967295
 800783a:	b00d      	add	sp, #52	@ 0x34
 800783c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007840:	4642      	mov	r2, r8
 8007842:	464b      	mov	r3, r9
 8007844:	4640      	mov	r0, r8
 8007846:	4649      	mov	r1, r9
 8007848:	f7f9 f978 	bl	8000b3c <__aeabi_dcmpun>
 800784c:	b140      	cbz	r0, 8007860 <_printf_float+0xe0>
 800784e:	464b      	mov	r3, r9
 8007850:	2b00      	cmp	r3, #0
 8007852:	bfbc      	itt	lt
 8007854:	232d      	movlt	r3, #45	@ 0x2d
 8007856:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800785a:	4a7e      	ldr	r2, [pc, #504]	@ (8007a54 <_printf_float+0x2d4>)
 800785c:	4b7e      	ldr	r3, [pc, #504]	@ (8007a58 <_printf_float+0x2d8>)
 800785e:	e7d4      	b.n	800780a <_printf_float+0x8a>
 8007860:	6863      	ldr	r3, [r4, #4]
 8007862:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007866:	9206      	str	r2, [sp, #24]
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	d13b      	bne.n	80078e4 <_printf_float+0x164>
 800786c:	2306      	movs	r3, #6
 800786e:	6063      	str	r3, [r4, #4]
 8007870:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007874:	2300      	movs	r3, #0
 8007876:	6022      	str	r2, [r4, #0]
 8007878:	9303      	str	r3, [sp, #12]
 800787a:	ab0a      	add	r3, sp, #40	@ 0x28
 800787c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007880:	ab09      	add	r3, sp, #36	@ 0x24
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	6861      	ldr	r1, [r4, #4]
 8007886:	ec49 8b10 	vmov	d0, r8, r9
 800788a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800788e:	4628      	mov	r0, r5
 8007890:	f7ff fed6 	bl	8007640 <__cvt>
 8007894:	9b06      	ldr	r3, [sp, #24]
 8007896:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007898:	2b47      	cmp	r3, #71	@ 0x47
 800789a:	4680      	mov	r8, r0
 800789c:	d129      	bne.n	80078f2 <_printf_float+0x172>
 800789e:	1cc8      	adds	r0, r1, #3
 80078a0:	db02      	blt.n	80078a8 <_printf_float+0x128>
 80078a2:	6863      	ldr	r3, [r4, #4]
 80078a4:	4299      	cmp	r1, r3
 80078a6:	dd41      	ble.n	800792c <_printf_float+0x1ac>
 80078a8:	f1aa 0a02 	sub.w	sl, sl, #2
 80078ac:	fa5f fa8a 	uxtb.w	sl, sl
 80078b0:	3901      	subs	r1, #1
 80078b2:	4652      	mov	r2, sl
 80078b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80078b8:	9109      	str	r1, [sp, #36]	@ 0x24
 80078ba:	f7ff ff26 	bl	800770a <__exponent>
 80078be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80078c0:	1813      	adds	r3, r2, r0
 80078c2:	2a01      	cmp	r2, #1
 80078c4:	4681      	mov	r9, r0
 80078c6:	6123      	str	r3, [r4, #16]
 80078c8:	dc02      	bgt.n	80078d0 <_printf_float+0x150>
 80078ca:	6822      	ldr	r2, [r4, #0]
 80078cc:	07d2      	lsls	r2, r2, #31
 80078ce:	d501      	bpl.n	80078d4 <_printf_float+0x154>
 80078d0:	3301      	adds	r3, #1
 80078d2:	6123      	str	r3, [r4, #16]
 80078d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d0a2      	beq.n	8007822 <_printf_float+0xa2>
 80078dc:	232d      	movs	r3, #45	@ 0x2d
 80078de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078e2:	e79e      	b.n	8007822 <_printf_float+0xa2>
 80078e4:	9a06      	ldr	r2, [sp, #24]
 80078e6:	2a47      	cmp	r2, #71	@ 0x47
 80078e8:	d1c2      	bne.n	8007870 <_printf_float+0xf0>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1c0      	bne.n	8007870 <_printf_float+0xf0>
 80078ee:	2301      	movs	r3, #1
 80078f0:	e7bd      	b.n	800786e <_printf_float+0xee>
 80078f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80078f6:	d9db      	bls.n	80078b0 <_printf_float+0x130>
 80078f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80078fc:	d118      	bne.n	8007930 <_printf_float+0x1b0>
 80078fe:	2900      	cmp	r1, #0
 8007900:	6863      	ldr	r3, [r4, #4]
 8007902:	dd0b      	ble.n	800791c <_printf_float+0x19c>
 8007904:	6121      	str	r1, [r4, #16]
 8007906:	b913      	cbnz	r3, 800790e <_printf_float+0x18e>
 8007908:	6822      	ldr	r2, [r4, #0]
 800790a:	07d0      	lsls	r0, r2, #31
 800790c:	d502      	bpl.n	8007914 <_printf_float+0x194>
 800790e:	3301      	adds	r3, #1
 8007910:	440b      	add	r3, r1
 8007912:	6123      	str	r3, [r4, #16]
 8007914:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007916:	f04f 0900 	mov.w	r9, #0
 800791a:	e7db      	b.n	80078d4 <_printf_float+0x154>
 800791c:	b913      	cbnz	r3, 8007924 <_printf_float+0x1a4>
 800791e:	6822      	ldr	r2, [r4, #0]
 8007920:	07d2      	lsls	r2, r2, #31
 8007922:	d501      	bpl.n	8007928 <_printf_float+0x1a8>
 8007924:	3302      	adds	r3, #2
 8007926:	e7f4      	b.n	8007912 <_printf_float+0x192>
 8007928:	2301      	movs	r3, #1
 800792a:	e7f2      	b.n	8007912 <_printf_float+0x192>
 800792c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007930:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007932:	4299      	cmp	r1, r3
 8007934:	db05      	blt.n	8007942 <_printf_float+0x1c2>
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	6121      	str	r1, [r4, #16]
 800793a:	07d8      	lsls	r0, r3, #31
 800793c:	d5ea      	bpl.n	8007914 <_printf_float+0x194>
 800793e:	1c4b      	adds	r3, r1, #1
 8007940:	e7e7      	b.n	8007912 <_printf_float+0x192>
 8007942:	2900      	cmp	r1, #0
 8007944:	bfd4      	ite	le
 8007946:	f1c1 0202 	rsble	r2, r1, #2
 800794a:	2201      	movgt	r2, #1
 800794c:	4413      	add	r3, r2
 800794e:	e7e0      	b.n	8007912 <_printf_float+0x192>
 8007950:	6823      	ldr	r3, [r4, #0]
 8007952:	055a      	lsls	r2, r3, #21
 8007954:	d407      	bmi.n	8007966 <_printf_float+0x1e6>
 8007956:	6923      	ldr	r3, [r4, #16]
 8007958:	4642      	mov	r2, r8
 800795a:	4631      	mov	r1, r6
 800795c:	4628      	mov	r0, r5
 800795e:	47b8      	blx	r7
 8007960:	3001      	adds	r0, #1
 8007962:	d12b      	bne.n	80079bc <_printf_float+0x23c>
 8007964:	e767      	b.n	8007836 <_printf_float+0xb6>
 8007966:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800796a:	f240 80dd 	bls.w	8007b28 <_printf_float+0x3a8>
 800796e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007972:	2200      	movs	r2, #0
 8007974:	2300      	movs	r3, #0
 8007976:	f7f9 f8af 	bl	8000ad8 <__aeabi_dcmpeq>
 800797a:	2800      	cmp	r0, #0
 800797c:	d033      	beq.n	80079e6 <_printf_float+0x266>
 800797e:	4a37      	ldr	r2, [pc, #220]	@ (8007a5c <_printf_float+0x2dc>)
 8007980:	2301      	movs	r3, #1
 8007982:	4631      	mov	r1, r6
 8007984:	4628      	mov	r0, r5
 8007986:	47b8      	blx	r7
 8007988:	3001      	adds	r0, #1
 800798a:	f43f af54 	beq.w	8007836 <_printf_float+0xb6>
 800798e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007992:	4543      	cmp	r3, r8
 8007994:	db02      	blt.n	800799c <_printf_float+0x21c>
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	07d8      	lsls	r0, r3, #31
 800799a:	d50f      	bpl.n	80079bc <_printf_float+0x23c>
 800799c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079a0:	4631      	mov	r1, r6
 80079a2:	4628      	mov	r0, r5
 80079a4:	47b8      	blx	r7
 80079a6:	3001      	adds	r0, #1
 80079a8:	f43f af45 	beq.w	8007836 <_printf_float+0xb6>
 80079ac:	f04f 0900 	mov.w	r9, #0
 80079b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80079b4:	f104 0a1a 	add.w	sl, r4, #26
 80079b8:	45c8      	cmp	r8, r9
 80079ba:	dc09      	bgt.n	80079d0 <_printf_float+0x250>
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	079b      	lsls	r3, r3, #30
 80079c0:	f100 8103 	bmi.w	8007bca <_printf_float+0x44a>
 80079c4:	68e0      	ldr	r0, [r4, #12]
 80079c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079c8:	4298      	cmp	r0, r3
 80079ca:	bfb8      	it	lt
 80079cc:	4618      	movlt	r0, r3
 80079ce:	e734      	b.n	800783a <_printf_float+0xba>
 80079d0:	2301      	movs	r3, #1
 80079d2:	4652      	mov	r2, sl
 80079d4:	4631      	mov	r1, r6
 80079d6:	4628      	mov	r0, r5
 80079d8:	47b8      	blx	r7
 80079da:	3001      	adds	r0, #1
 80079dc:	f43f af2b 	beq.w	8007836 <_printf_float+0xb6>
 80079e0:	f109 0901 	add.w	r9, r9, #1
 80079e4:	e7e8      	b.n	80079b8 <_printf_float+0x238>
 80079e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	dc39      	bgt.n	8007a60 <_printf_float+0x2e0>
 80079ec:	4a1b      	ldr	r2, [pc, #108]	@ (8007a5c <_printf_float+0x2dc>)
 80079ee:	2301      	movs	r3, #1
 80079f0:	4631      	mov	r1, r6
 80079f2:	4628      	mov	r0, r5
 80079f4:	47b8      	blx	r7
 80079f6:	3001      	adds	r0, #1
 80079f8:	f43f af1d 	beq.w	8007836 <_printf_float+0xb6>
 80079fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007a00:	ea59 0303 	orrs.w	r3, r9, r3
 8007a04:	d102      	bne.n	8007a0c <_printf_float+0x28c>
 8007a06:	6823      	ldr	r3, [r4, #0]
 8007a08:	07d9      	lsls	r1, r3, #31
 8007a0a:	d5d7      	bpl.n	80079bc <_printf_float+0x23c>
 8007a0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a10:	4631      	mov	r1, r6
 8007a12:	4628      	mov	r0, r5
 8007a14:	47b8      	blx	r7
 8007a16:	3001      	adds	r0, #1
 8007a18:	f43f af0d 	beq.w	8007836 <_printf_float+0xb6>
 8007a1c:	f04f 0a00 	mov.w	sl, #0
 8007a20:	f104 0b1a 	add.w	fp, r4, #26
 8007a24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a26:	425b      	negs	r3, r3
 8007a28:	4553      	cmp	r3, sl
 8007a2a:	dc01      	bgt.n	8007a30 <_printf_float+0x2b0>
 8007a2c:	464b      	mov	r3, r9
 8007a2e:	e793      	b.n	8007958 <_printf_float+0x1d8>
 8007a30:	2301      	movs	r3, #1
 8007a32:	465a      	mov	r2, fp
 8007a34:	4631      	mov	r1, r6
 8007a36:	4628      	mov	r0, r5
 8007a38:	47b8      	blx	r7
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	f43f aefb 	beq.w	8007836 <_printf_float+0xb6>
 8007a40:	f10a 0a01 	add.w	sl, sl, #1
 8007a44:	e7ee      	b.n	8007a24 <_printf_float+0x2a4>
 8007a46:	bf00      	nop
 8007a48:	7fefffff 	.word	0x7fefffff
 8007a4c:	0800c996 	.word	0x0800c996
 8007a50:	0800c99a 	.word	0x0800c99a
 8007a54:	0800c99e 	.word	0x0800c99e
 8007a58:	0800c9a2 	.word	0x0800c9a2
 8007a5c:	0800c9a6 	.word	0x0800c9a6
 8007a60:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a62:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007a66:	4553      	cmp	r3, sl
 8007a68:	bfa8      	it	ge
 8007a6a:	4653      	movge	r3, sl
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	4699      	mov	r9, r3
 8007a70:	dc36      	bgt.n	8007ae0 <_printf_float+0x360>
 8007a72:	f04f 0b00 	mov.w	fp, #0
 8007a76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a7a:	f104 021a 	add.w	r2, r4, #26
 8007a7e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a80:	9306      	str	r3, [sp, #24]
 8007a82:	eba3 0309 	sub.w	r3, r3, r9
 8007a86:	455b      	cmp	r3, fp
 8007a88:	dc31      	bgt.n	8007aee <_printf_float+0x36e>
 8007a8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a8c:	459a      	cmp	sl, r3
 8007a8e:	dc3a      	bgt.n	8007b06 <_printf_float+0x386>
 8007a90:	6823      	ldr	r3, [r4, #0]
 8007a92:	07da      	lsls	r2, r3, #31
 8007a94:	d437      	bmi.n	8007b06 <_printf_float+0x386>
 8007a96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a98:	ebaa 0903 	sub.w	r9, sl, r3
 8007a9c:	9b06      	ldr	r3, [sp, #24]
 8007a9e:	ebaa 0303 	sub.w	r3, sl, r3
 8007aa2:	4599      	cmp	r9, r3
 8007aa4:	bfa8      	it	ge
 8007aa6:	4699      	movge	r9, r3
 8007aa8:	f1b9 0f00 	cmp.w	r9, #0
 8007aac:	dc33      	bgt.n	8007b16 <_printf_float+0x396>
 8007aae:	f04f 0800 	mov.w	r8, #0
 8007ab2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ab6:	f104 0b1a 	add.w	fp, r4, #26
 8007aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007abc:	ebaa 0303 	sub.w	r3, sl, r3
 8007ac0:	eba3 0309 	sub.w	r3, r3, r9
 8007ac4:	4543      	cmp	r3, r8
 8007ac6:	f77f af79 	ble.w	80079bc <_printf_float+0x23c>
 8007aca:	2301      	movs	r3, #1
 8007acc:	465a      	mov	r2, fp
 8007ace:	4631      	mov	r1, r6
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	47b8      	blx	r7
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	f43f aeae 	beq.w	8007836 <_printf_float+0xb6>
 8007ada:	f108 0801 	add.w	r8, r8, #1
 8007ade:	e7ec      	b.n	8007aba <_printf_float+0x33a>
 8007ae0:	4642      	mov	r2, r8
 8007ae2:	4631      	mov	r1, r6
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	47b8      	blx	r7
 8007ae8:	3001      	adds	r0, #1
 8007aea:	d1c2      	bne.n	8007a72 <_printf_float+0x2f2>
 8007aec:	e6a3      	b.n	8007836 <_printf_float+0xb6>
 8007aee:	2301      	movs	r3, #1
 8007af0:	4631      	mov	r1, r6
 8007af2:	4628      	mov	r0, r5
 8007af4:	9206      	str	r2, [sp, #24]
 8007af6:	47b8      	blx	r7
 8007af8:	3001      	adds	r0, #1
 8007afa:	f43f ae9c 	beq.w	8007836 <_printf_float+0xb6>
 8007afe:	9a06      	ldr	r2, [sp, #24]
 8007b00:	f10b 0b01 	add.w	fp, fp, #1
 8007b04:	e7bb      	b.n	8007a7e <_printf_float+0x2fe>
 8007b06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b0a:	4631      	mov	r1, r6
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	47b8      	blx	r7
 8007b10:	3001      	adds	r0, #1
 8007b12:	d1c0      	bne.n	8007a96 <_printf_float+0x316>
 8007b14:	e68f      	b.n	8007836 <_printf_float+0xb6>
 8007b16:	9a06      	ldr	r2, [sp, #24]
 8007b18:	464b      	mov	r3, r9
 8007b1a:	4442      	add	r2, r8
 8007b1c:	4631      	mov	r1, r6
 8007b1e:	4628      	mov	r0, r5
 8007b20:	47b8      	blx	r7
 8007b22:	3001      	adds	r0, #1
 8007b24:	d1c3      	bne.n	8007aae <_printf_float+0x32e>
 8007b26:	e686      	b.n	8007836 <_printf_float+0xb6>
 8007b28:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b2c:	f1ba 0f01 	cmp.w	sl, #1
 8007b30:	dc01      	bgt.n	8007b36 <_printf_float+0x3b6>
 8007b32:	07db      	lsls	r3, r3, #31
 8007b34:	d536      	bpl.n	8007ba4 <_printf_float+0x424>
 8007b36:	2301      	movs	r3, #1
 8007b38:	4642      	mov	r2, r8
 8007b3a:	4631      	mov	r1, r6
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	47b8      	blx	r7
 8007b40:	3001      	adds	r0, #1
 8007b42:	f43f ae78 	beq.w	8007836 <_printf_float+0xb6>
 8007b46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	47b8      	blx	r7
 8007b50:	3001      	adds	r0, #1
 8007b52:	f43f ae70 	beq.w	8007836 <_printf_float+0xb6>
 8007b56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b62:	f7f8 ffb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b66:	b9c0      	cbnz	r0, 8007b9a <_printf_float+0x41a>
 8007b68:	4653      	mov	r3, sl
 8007b6a:	f108 0201 	add.w	r2, r8, #1
 8007b6e:	4631      	mov	r1, r6
 8007b70:	4628      	mov	r0, r5
 8007b72:	47b8      	blx	r7
 8007b74:	3001      	adds	r0, #1
 8007b76:	d10c      	bne.n	8007b92 <_printf_float+0x412>
 8007b78:	e65d      	b.n	8007836 <_printf_float+0xb6>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	465a      	mov	r2, fp
 8007b7e:	4631      	mov	r1, r6
 8007b80:	4628      	mov	r0, r5
 8007b82:	47b8      	blx	r7
 8007b84:	3001      	adds	r0, #1
 8007b86:	f43f ae56 	beq.w	8007836 <_printf_float+0xb6>
 8007b8a:	f108 0801 	add.w	r8, r8, #1
 8007b8e:	45d0      	cmp	r8, sl
 8007b90:	dbf3      	blt.n	8007b7a <_printf_float+0x3fa>
 8007b92:	464b      	mov	r3, r9
 8007b94:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007b98:	e6df      	b.n	800795a <_printf_float+0x1da>
 8007b9a:	f04f 0800 	mov.w	r8, #0
 8007b9e:	f104 0b1a 	add.w	fp, r4, #26
 8007ba2:	e7f4      	b.n	8007b8e <_printf_float+0x40e>
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	4642      	mov	r2, r8
 8007ba8:	e7e1      	b.n	8007b6e <_printf_float+0x3ee>
 8007baa:	2301      	movs	r3, #1
 8007bac:	464a      	mov	r2, r9
 8007bae:	4631      	mov	r1, r6
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	47b8      	blx	r7
 8007bb4:	3001      	adds	r0, #1
 8007bb6:	f43f ae3e 	beq.w	8007836 <_printf_float+0xb6>
 8007bba:	f108 0801 	add.w	r8, r8, #1
 8007bbe:	68e3      	ldr	r3, [r4, #12]
 8007bc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007bc2:	1a5b      	subs	r3, r3, r1
 8007bc4:	4543      	cmp	r3, r8
 8007bc6:	dcf0      	bgt.n	8007baa <_printf_float+0x42a>
 8007bc8:	e6fc      	b.n	80079c4 <_printf_float+0x244>
 8007bca:	f04f 0800 	mov.w	r8, #0
 8007bce:	f104 0919 	add.w	r9, r4, #25
 8007bd2:	e7f4      	b.n	8007bbe <_printf_float+0x43e>

08007bd4 <_printf_common>:
 8007bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd8:	4616      	mov	r6, r2
 8007bda:	4698      	mov	r8, r3
 8007bdc:	688a      	ldr	r2, [r1, #8]
 8007bde:	690b      	ldr	r3, [r1, #16]
 8007be0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007be4:	4293      	cmp	r3, r2
 8007be6:	bfb8      	it	lt
 8007be8:	4613      	movlt	r3, r2
 8007bea:	6033      	str	r3, [r6, #0]
 8007bec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007bf0:	4607      	mov	r7, r0
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	b10a      	cbz	r2, 8007bfa <_printf_common+0x26>
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	6033      	str	r3, [r6, #0]
 8007bfa:	6823      	ldr	r3, [r4, #0]
 8007bfc:	0699      	lsls	r1, r3, #26
 8007bfe:	bf42      	ittt	mi
 8007c00:	6833      	ldrmi	r3, [r6, #0]
 8007c02:	3302      	addmi	r3, #2
 8007c04:	6033      	strmi	r3, [r6, #0]
 8007c06:	6825      	ldr	r5, [r4, #0]
 8007c08:	f015 0506 	ands.w	r5, r5, #6
 8007c0c:	d106      	bne.n	8007c1c <_printf_common+0x48>
 8007c0e:	f104 0a19 	add.w	sl, r4, #25
 8007c12:	68e3      	ldr	r3, [r4, #12]
 8007c14:	6832      	ldr	r2, [r6, #0]
 8007c16:	1a9b      	subs	r3, r3, r2
 8007c18:	42ab      	cmp	r3, r5
 8007c1a:	dc26      	bgt.n	8007c6a <_printf_common+0x96>
 8007c1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c20:	6822      	ldr	r2, [r4, #0]
 8007c22:	3b00      	subs	r3, #0
 8007c24:	bf18      	it	ne
 8007c26:	2301      	movne	r3, #1
 8007c28:	0692      	lsls	r2, r2, #26
 8007c2a:	d42b      	bmi.n	8007c84 <_printf_common+0xb0>
 8007c2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c30:	4641      	mov	r1, r8
 8007c32:	4638      	mov	r0, r7
 8007c34:	47c8      	blx	r9
 8007c36:	3001      	adds	r0, #1
 8007c38:	d01e      	beq.n	8007c78 <_printf_common+0xa4>
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	6922      	ldr	r2, [r4, #16]
 8007c3e:	f003 0306 	and.w	r3, r3, #6
 8007c42:	2b04      	cmp	r3, #4
 8007c44:	bf02      	ittt	eq
 8007c46:	68e5      	ldreq	r5, [r4, #12]
 8007c48:	6833      	ldreq	r3, [r6, #0]
 8007c4a:	1aed      	subeq	r5, r5, r3
 8007c4c:	68a3      	ldr	r3, [r4, #8]
 8007c4e:	bf0c      	ite	eq
 8007c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c54:	2500      	movne	r5, #0
 8007c56:	4293      	cmp	r3, r2
 8007c58:	bfc4      	itt	gt
 8007c5a:	1a9b      	subgt	r3, r3, r2
 8007c5c:	18ed      	addgt	r5, r5, r3
 8007c5e:	2600      	movs	r6, #0
 8007c60:	341a      	adds	r4, #26
 8007c62:	42b5      	cmp	r5, r6
 8007c64:	d11a      	bne.n	8007c9c <_printf_common+0xc8>
 8007c66:	2000      	movs	r0, #0
 8007c68:	e008      	b.n	8007c7c <_printf_common+0xa8>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	4652      	mov	r2, sl
 8007c6e:	4641      	mov	r1, r8
 8007c70:	4638      	mov	r0, r7
 8007c72:	47c8      	blx	r9
 8007c74:	3001      	adds	r0, #1
 8007c76:	d103      	bne.n	8007c80 <_printf_common+0xac>
 8007c78:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c80:	3501      	adds	r5, #1
 8007c82:	e7c6      	b.n	8007c12 <_printf_common+0x3e>
 8007c84:	18e1      	adds	r1, r4, r3
 8007c86:	1c5a      	adds	r2, r3, #1
 8007c88:	2030      	movs	r0, #48	@ 0x30
 8007c8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c8e:	4422      	add	r2, r4
 8007c90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c98:	3302      	adds	r3, #2
 8007c9a:	e7c7      	b.n	8007c2c <_printf_common+0x58>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	4622      	mov	r2, r4
 8007ca0:	4641      	mov	r1, r8
 8007ca2:	4638      	mov	r0, r7
 8007ca4:	47c8      	blx	r9
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	d0e6      	beq.n	8007c78 <_printf_common+0xa4>
 8007caa:	3601      	adds	r6, #1
 8007cac:	e7d9      	b.n	8007c62 <_printf_common+0x8e>
	...

08007cb0 <_printf_i>:
 8007cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cb4:	7e0f      	ldrb	r7, [r1, #24]
 8007cb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007cb8:	2f78      	cmp	r7, #120	@ 0x78
 8007cba:	4691      	mov	r9, r2
 8007cbc:	4680      	mov	r8, r0
 8007cbe:	460c      	mov	r4, r1
 8007cc0:	469a      	mov	sl, r3
 8007cc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007cc6:	d807      	bhi.n	8007cd8 <_printf_i+0x28>
 8007cc8:	2f62      	cmp	r7, #98	@ 0x62
 8007cca:	d80a      	bhi.n	8007ce2 <_printf_i+0x32>
 8007ccc:	2f00      	cmp	r7, #0
 8007cce:	f000 80d2 	beq.w	8007e76 <_printf_i+0x1c6>
 8007cd2:	2f58      	cmp	r7, #88	@ 0x58
 8007cd4:	f000 80b9 	beq.w	8007e4a <_printf_i+0x19a>
 8007cd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cdc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ce0:	e03a      	b.n	8007d58 <_printf_i+0xa8>
 8007ce2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ce6:	2b15      	cmp	r3, #21
 8007ce8:	d8f6      	bhi.n	8007cd8 <_printf_i+0x28>
 8007cea:	a101      	add	r1, pc, #4	@ (adr r1, 8007cf0 <_printf_i+0x40>)
 8007cec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cf0:	08007d49 	.word	0x08007d49
 8007cf4:	08007d5d 	.word	0x08007d5d
 8007cf8:	08007cd9 	.word	0x08007cd9
 8007cfc:	08007cd9 	.word	0x08007cd9
 8007d00:	08007cd9 	.word	0x08007cd9
 8007d04:	08007cd9 	.word	0x08007cd9
 8007d08:	08007d5d 	.word	0x08007d5d
 8007d0c:	08007cd9 	.word	0x08007cd9
 8007d10:	08007cd9 	.word	0x08007cd9
 8007d14:	08007cd9 	.word	0x08007cd9
 8007d18:	08007cd9 	.word	0x08007cd9
 8007d1c:	08007e5d 	.word	0x08007e5d
 8007d20:	08007d87 	.word	0x08007d87
 8007d24:	08007e17 	.word	0x08007e17
 8007d28:	08007cd9 	.word	0x08007cd9
 8007d2c:	08007cd9 	.word	0x08007cd9
 8007d30:	08007e7f 	.word	0x08007e7f
 8007d34:	08007cd9 	.word	0x08007cd9
 8007d38:	08007d87 	.word	0x08007d87
 8007d3c:	08007cd9 	.word	0x08007cd9
 8007d40:	08007cd9 	.word	0x08007cd9
 8007d44:	08007e1f 	.word	0x08007e1f
 8007d48:	6833      	ldr	r3, [r6, #0]
 8007d4a:	1d1a      	adds	r2, r3, #4
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	6032      	str	r2, [r6, #0]
 8007d50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e09d      	b.n	8007e98 <_printf_i+0x1e8>
 8007d5c:	6833      	ldr	r3, [r6, #0]
 8007d5e:	6820      	ldr	r0, [r4, #0]
 8007d60:	1d19      	adds	r1, r3, #4
 8007d62:	6031      	str	r1, [r6, #0]
 8007d64:	0606      	lsls	r6, r0, #24
 8007d66:	d501      	bpl.n	8007d6c <_printf_i+0xbc>
 8007d68:	681d      	ldr	r5, [r3, #0]
 8007d6a:	e003      	b.n	8007d74 <_printf_i+0xc4>
 8007d6c:	0645      	lsls	r5, r0, #25
 8007d6e:	d5fb      	bpl.n	8007d68 <_printf_i+0xb8>
 8007d70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d74:	2d00      	cmp	r5, #0
 8007d76:	da03      	bge.n	8007d80 <_printf_i+0xd0>
 8007d78:	232d      	movs	r3, #45	@ 0x2d
 8007d7a:	426d      	negs	r5, r5
 8007d7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d80:	4859      	ldr	r0, [pc, #356]	@ (8007ee8 <_printf_i+0x238>)
 8007d82:	230a      	movs	r3, #10
 8007d84:	e011      	b.n	8007daa <_printf_i+0xfa>
 8007d86:	6821      	ldr	r1, [r4, #0]
 8007d88:	6833      	ldr	r3, [r6, #0]
 8007d8a:	0608      	lsls	r0, r1, #24
 8007d8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d90:	d402      	bmi.n	8007d98 <_printf_i+0xe8>
 8007d92:	0649      	lsls	r1, r1, #25
 8007d94:	bf48      	it	mi
 8007d96:	b2ad      	uxthmi	r5, r5
 8007d98:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d9a:	4853      	ldr	r0, [pc, #332]	@ (8007ee8 <_printf_i+0x238>)
 8007d9c:	6033      	str	r3, [r6, #0]
 8007d9e:	bf14      	ite	ne
 8007da0:	230a      	movne	r3, #10
 8007da2:	2308      	moveq	r3, #8
 8007da4:	2100      	movs	r1, #0
 8007da6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007daa:	6866      	ldr	r6, [r4, #4]
 8007dac:	60a6      	str	r6, [r4, #8]
 8007dae:	2e00      	cmp	r6, #0
 8007db0:	bfa2      	ittt	ge
 8007db2:	6821      	ldrge	r1, [r4, #0]
 8007db4:	f021 0104 	bicge.w	r1, r1, #4
 8007db8:	6021      	strge	r1, [r4, #0]
 8007dba:	b90d      	cbnz	r5, 8007dc0 <_printf_i+0x110>
 8007dbc:	2e00      	cmp	r6, #0
 8007dbe:	d04b      	beq.n	8007e58 <_printf_i+0x1a8>
 8007dc0:	4616      	mov	r6, r2
 8007dc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007dc6:	fb03 5711 	mls	r7, r3, r1, r5
 8007dca:	5dc7      	ldrb	r7, [r0, r7]
 8007dcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007dd0:	462f      	mov	r7, r5
 8007dd2:	42bb      	cmp	r3, r7
 8007dd4:	460d      	mov	r5, r1
 8007dd6:	d9f4      	bls.n	8007dc2 <_printf_i+0x112>
 8007dd8:	2b08      	cmp	r3, #8
 8007dda:	d10b      	bne.n	8007df4 <_printf_i+0x144>
 8007ddc:	6823      	ldr	r3, [r4, #0]
 8007dde:	07df      	lsls	r7, r3, #31
 8007de0:	d508      	bpl.n	8007df4 <_printf_i+0x144>
 8007de2:	6923      	ldr	r3, [r4, #16]
 8007de4:	6861      	ldr	r1, [r4, #4]
 8007de6:	4299      	cmp	r1, r3
 8007de8:	bfde      	ittt	le
 8007dea:	2330      	movle	r3, #48	@ 0x30
 8007dec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007df0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007df4:	1b92      	subs	r2, r2, r6
 8007df6:	6122      	str	r2, [r4, #16]
 8007df8:	f8cd a000 	str.w	sl, [sp]
 8007dfc:	464b      	mov	r3, r9
 8007dfe:	aa03      	add	r2, sp, #12
 8007e00:	4621      	mov	r1, r4
 8007e02:	4640      	mov	r0, r8
 8007e04:	f7ff fee6 	bl	8007bd4 <_printf_common>
 8007e08:	3001      	adds	r0, #1
 8007e0a:	d14a      	bne.n	8007ea2 <_printf_i+0x1f2>
 8007e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e10:	b004      	add	sp, #16
 8007e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e16:	6823      	ldr	r3, [r4, #0]
 8007e18:	f043 0320 	orr.w	r3, r3, #32
 8007e1c:	6023      	str	r3, [r4, #0]
 8007e1e:	4833      	ldr	r0, [pc, #204]	@ (8007eec <_printf_i+0x23c>)
 8007e20:	2778      	movs	r7, #120	@ 0x78
 8007e22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	6831      	ldr	r1, [r6, #0]
 8007e2a:	061f      	lsls	r7, r3, #24
 8007e2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e30:	d402      	bmi.n	8007e38 <_printf_i+0x188>
 8007e32:	065f      	lsls	r7, r3, #25
 8007e34:	bf48      	it	mi
 8007e36:	b2ad      	uxthmi	r5, r5
 8007e38:	6031      	str	r1, [r6, #0]
 8007e3a:	07d9      	lsls	r1, r3, #31
 8007e3c:	bf44      	itt	mi
 8007e3e:	f043 0320 	orrmi.w	r3, r3, #32
 8007e42:	6023      	strmi	r3, [r4, #0]
 8007e44:	b11d      	cbz	r5, 8007e4e <_printf_i+0x19e>
 8007e46:	2310      	movs	r3, #16
 8007e48:	e7ac      	b.n	8007da4 <_printf_i+0xf4>
 8007e4a:	4827      	ldr	r0, [pc, #156]	@ (8007ee8 <_printf_i+0x238>)
 8007e4c:	e7e9      	b.n	8007e22 <_printf_i+0x172>
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	f023 0320 	bic.w	r3, r3, #32
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	e7f6      	b.n	8007e46 <_printf_i+0x196>
 8007e58:	4616      	mov	r6, r2
 8007e5a:	e7bd      	b.n	8007dd8 <_printf_i+0x128>
 8007e5c:	6833      	ldr	r3, [r6, #0]
 8007e5e:	6825      	ldr	r5, [r4, #0]
 8007e60:	6961      	ldr	r1, [r4, #20]
 8007e62:	1d18      	adds	r0, r3, #4
 8007e64:	6030      	str	r0, [r6, #0]
 8007e66:	062e      	lsls	r6, r5, #24
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	d501      	bpl.n	8007e70 <_printf_i+0x1c0>
 8007e6c:	6019      	str	r1, [r3, #0]
 8007e6e:	e002      	b.n	8007e76 <_printf_i+0x1c6>
 8007e70:	0668      	lsls	r0, r5, #25
 8007e72:	d5fb      	bpl.n	8007e6c <_printf_i+0x1bc>
 8007e74:	8019      	strh	r1, [r3, #0]
 8007e76:	2300      	movs	r3, #0
 8007e78:	6123      	str	r3, [r4, #16]
 8007e7a:	4616      	mov	r6, r2
 8007e7c:	e7bc      	b.n	8007df8 <_printf_i+0x148>
 8007e7e:	6833      	ldr	r3, [r6, #0]
 8007e80:	1d1a      	adds	r2, r3, #4
 8007e82:	6032      	str	r2, [r6, #0]
 8007e84:	681e      	ldr	r6, [r3, #0]
 8007e86:	6862      	ldr	r2, [r4, #4]
 8007e88:	2100      	movs	r1, #0
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	f7f8 f9a8 	bl	80001e0 <memchr>
 8007e90:	b108      	cbz	r0, 8007e96 <_printf_i+0x1e6>
 8007e92:	1b80      	subs	r0, r0, r6
 8007e94:	6060      	str	r0, [r4, #4]
 8007e96:	6863      	ldr	r3, [r4, #4]
 8007e98:	6123      	str	r3, [r4, #16]
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ea0:	e7aa      	b.n	8007df8 <_printf_i+0x148>
 8007ea2:	6923      	ldr	r3, [r4, #16]
 8007ea4:	4632      	mov	r2, r6
 8007ea6:	4649      	mov	r1, r9
 8007ea8:	4640      	mov	r0, r8
 8007eaa:	47d0      	blx	sl
 8007eac:	3001      	adds	r0, #1
 8007eae:	d0ad      	beq.n	8007e0c <_printf_i+0x15c>
 8007eb0:	6823      	ldr	r3, [r4, #0]
 8007eb2:	079b      	lsls	r3, r3, #30
 8007eb4:	d413      	bmi.n	8007ede <_printf_i+0x22e>
 8007eb6:	68e0      	ldr	r0, [r4, #12]
 8007eb8:	9b03      	ldr	r3, [sp, #12]
 8007eba:	4298      	cmp	r0, r3
 8007ebc:	bfb8      	it	lt
 8007ebe:	4618      	movlt	r0, r3
 8007ec0:	e7a6      	b.n	8007e10 <_printf_i+0x160>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	4632      	mov	r2, r6
 8007ec6:	4649      	mov	r1, r9
 8007ec8:	4640      	mov	r0, r8
 8007eca:	47d0      	blx	sl
 8007ecc:	3001      	adds	r0, #1
 8007ece:	d09d      	beq.n	8007e0c <_printf_i+0x15c>
 8007ed0:	3501      	adds	r5, #1
 8007ed2:	68e3      	ldr	r3, [r4, #12]
 8007ed4:	9903      	ldr	r1, [sp, #12]
 8007ed6:	1a5b      	subs	r3, r3, r1
 8007ed8:	42ab      	cmp	r3, r5
 8007eda:	dcf2      	bgt.n	8007ec2 <_printf_i+0x212>
 8007edc:	e7eb      	b.n	8007eb6 <_printf_i+0x206>
 8007ede:	2500      	movs	r5, #0
 8007ee0:	f104 0619 	add.w	r6, r4, #25
 8007ee4:	e7f5      	b.n	8007ed2 <_printf_i+0x222>
 8007ee6:	bf00      	nop
 8007ee8:	0800c9a8 	.word	0x0800c9a8
 8007eec:	0800c9b9 	.word	0x0800c9b9

08007ef0 <_scanf_float>:
 8007ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef4:	b087      	sub	sp, #28
 8007ef6:	4617      	mov	r7, r2
 8007ef8:	9303      	str	r3, [sp, #12]
 8007efa:	688b      	ldr	r3, [r1, #8]
 8007efc:	1e5a      	subs	r2, r3, #1
 8007efe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007f02:	bf81      	itttt	hi
 8007f04:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007f08:	eb03 0b05 	addhi.w	fp, r3, r5
 8007f0c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007f10:	608b      	strhi	r3, [r1, #8]
 8007f12:	680b      	ldr	r3, [r1, #0]
 8007f14:	460a      	mov	r2, r1
 8007f16:	f04f 0500 	mov.w	r5, #0
 8007f1a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007f1e:	f842 3b1c 	str.w	r3, [r2], #28
 8007f22:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007f26:	4680      	mov	r8, r0
 8007f28:	460c      	mov	r4, r1
 8007f2a:	bf98      	it	ls
 8007f2c:	f04f 0b00 	movls.w	fp, #0
 8007f30:	9201      	str	r2, [sp, #4]
 8007f32:	4616      	mov	r6, r2
 8007f34:	46aa      	mov	sl, r5
 8007f36:	46a9      	mov	r9, r5
 8007f38:	9502      	str	r5, [sp, #8]
 8007f3a:	68a2      	ldr	r2, [r4, #8]
 8007f3c:	b152      	cbz	r2, 8007f54 <_scanf_float+0x64>
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	2b4e      	cmp	r3, #78	@ 0x4e
 8007f44:	d864      	bhi.n	8008010 <_scanf_float+0x120>
 8007f46:	2b40      	cmp	r3, #64	@ 0x40
 8007f48:	d83c      	bhi.n	8007fc4 <_scanf_float+0xd4>
 8007f4a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007f4e:	b2c8      	uxtb	r0, r1
 8007f50:	280e      	cmp	r0, #14
 8007f52:	d93a      	bls.n	8007fca <_scanf_float+0xda>
 8007f54:	f1b9 0f00 	cmp.w	r9, #0
 8007f58:	d003      	beq.n	8007f62 <_scanf_float+0x72>
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f66:	f1ba 0f01 	cmp.w	sl, #1
 8007f6a:	f200 8117 	bhi.w	800819c <_scanf_float+0x2ac>
 8007f6e:	9b01      	ldr	r3, [sp, #4]
 8007f70:	429e      	cmp	r6, r3
 8007f72:	f200 8108 	bhi.w	8008186 <_scanf_float+0x296>
 8007f76:	2001      	movs	r0, #1
 8007f78:	b007      	add	sp, #28
 8007f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007f82:	2a0d      	cmp	r2, #13
 8007f84:	d8e6      	bhi.n	8007f54 <_scanf_float+0x64>
 8007f86:	a101      	add	r1, pc, #4	@ (adr r1, 8007f8c <_scanf_float+0x9c>)
 8007f88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007f8c:	080080d3 	.word	0x080080d3
 8007f90:	08007f55 	.word	0x08007f55
 8007f94:	08007f55 	.word	0x08007f55
 8007f98:	08007f55 	.word	0x08007f55
 8007f9c:	08008133 	.word	0x08008133
 8007fa0:	0800810b 	.word	0x0800810b
 8007fa4:	08007f55 	.word	0x08007f55
 8007fa8:	08007f55 	.word	0x08007f55
 8007fac:	080080e1 	.word	0x080080e1
 8007fb0:	08007f55 	.word	0x08007f55
 8007fb4:	08007f55 	.word	0x08007f55
 8007fb8:	08007f55 	.word	0x08007f55
 8007fbc:	08007f55 	.word	0x08007f55
 8007fc0:	08008099 	.word	0x08008099
 8007fc4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007fc8:	e7db      	b.n	8007f82 <_scanf_float+0x92>
 8007fca:	290e      	cmp	r1, #14
 8007fcc:	d8c2      	bhi.n	8007f54 <_scanf_float+0x64>
 8007fce:	a001      	add	r0, pc, #4	@ (adr r0, 8007fd4 <_scanf_float+0xe4>)
 8007fd0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007fd4:	08008089 	.word	0x08008089
 8007fd8:	08007f55 	.word	0x08007f55
 8007fdc:	08008089 	.word	0x08008089
 8007fe0:	0800811f 	.word	0x0800811f
 8007fe4:	08007f55 	.word	0x08007f55
 8007fe8:	08008031 	.word	0x08008031
 8007fec:	0800806f 	.word	0x0800806f
 8007ff0:	0800806f 	.word	0x0800806f
 8007ff4:	0800806f 	.word	0x0800806f
 8007ff8:	0800806f 	.word	0x0800806f
 8007ffc:	0800806f 	.word	0x0800806f
 8008000:	0800806f 	.word	0x0800806f
 8008004:	0800806f 	.word	0x0800806f
 8008008:	0800806f 	.word	0x0800806f
 800800c:	0800806f 	.word	0x0800806f
 8008010:	2b6e      	cmp	r3, #110	@ 0x6e
 8008012:	d809      	bhi.n	8008028 <_scanf_float+0x138>
 8008014:	2b60      	cmp	r3, #96	@ 0x60
 8008016:	d8b2      	bhi.n	8007f7e <_scanf_float+0x8e>
 8008018:	2b54      	cmp	r3, #84	@ 0x54
 800801a:	d07b      	beq.n	8008114 <_scanf_float+0x224>
 800801c:	2b59      	cmp	r3, #89	@ 0x59
 800801e:	d199      	bne.n	8007f54 <_scanf_float+0x64>
 8008020:	2d07      	cmp	r5, #7
 8008022:	d197      	bne.n	8007f54 <_scanf_float+0x64>
 8008024:	2508      	movs	r5, #8
 8008026:	e02c      	b.n	8008082 <_scanf_float+0x192>
 8008028:	2b74      	cmp	r3, #116	@ 0x74
 800802a:	d073      	beq.n	8008114 <_scanf_float+0x224>
 800802c:	2b79      	cmp	r3, #121	@ 0x79
 800802e:	e7f6      	b.n	800801e <_scanf_float+0x12e>
 8008030:	6821      	ldr	r1, [r4, #0]
 8008032:	05c8      	lsls	r0, r1, #23
 8008034:	d51b      	bpl.n	800806e <_scanf_float+0x17e>
 8008036:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800803a:	6021      	str	r1, [r4, #0]
 800803c:	f109 0901 	add.w	r9, r9, #1
 8008040:	f1bb 0f00 	cmp.w	fp, #0
 8008044:	d003      	beq.n	800804e <_scanf_float+0x15e>
 8008046:	3201      	adds	r2, #1
 8008048:	f10b 3bff 	add.w	fp, fp, #4294967295
 800804c:	60a2      	str	r2, [r4, #8]
 800804e:	68a3      	ldr	r3, [r4, #8]
 8008050:	3b01      	subs	r3, #1
 8008052:	60a3      	str	r3, [r4, #8]
 8008054:	6923      	ldr	r3, [r4, #16]
 8008056:	3301      	adds	r3, #1
 8008058:	6123      	str	r3, [r4, #16]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	3b01      	subs	r3, #1
 800805e:	2b00      	cmp	r3, #0
 8008060:	607b      	str	r3, [r7, #4]
 8008062:	f340 8087 	ble.w	8008174 <_scanf_float+0x284>
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	3301      	adds	r3, #1
 800806a:	603b      	str	r3, [r7, #0]
 800806c:	e765      	b.n	8007f3a <_scanf_float+0x4a>
 800806e:	eb1a 0105 	adds.w	r1, sl, r5
 8008072:	f47f af6f 	bne.w	8007f54 <_scanf_float+0x64>
 8008076:	6822      	ldr	r2, [r4, #0]
 8008078:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800807c:	6022      	str	r2, [r4, #0]
 800807e:	460d      	mov	r5, r1
 8008080:	468a      	mov	sl, r1
 8008082:	f806 3b01 	strb.w	r3, [r6], #1
 8008086:	e7e2      	b.n	800804e <_scanf_float+0x15e>
 8008088:	6822      	ldr	r2, [r4, #0]
 800808a:	0610      	lsls	r0, r2, #24
 800808c:	f57f af62 	bpl.w	8007f54 <_scanf_float+0x64>
 8008090:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008094:	6022      	str	r2, [r4, #0]
 8008096:	e7f4      	b.n	8008082 <_scanf_float+0x192>
 8008098:	f1ba 0f00 	cmp.w	sl, #0
 800809c:	d10e      	bne.n	80080bc <_scanf_float+0x1cc>
 800809e:	f1b9 0f00 	cmp.w	r9, #0
 80080a2:	d10e      	bne.n	80080c2 <_scanf_float+0x1d2>
 80080a4:	6822      	ldr	r2, [r4, #0]
 80080a6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80080aa:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80080ae:	d108      	bne.n	80080c2 <_scanf_float+0x1d2>
 80080b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80080b4:	6022      	str	r2, [r4, #0]
 80080b6:	f04f 0a01 	mov.w	sl, #1
 80080ba:	e7e2      	b.n	8008082 <_scanf_float+0x192>
 80080bc:	f1ba 0f02 	cmp.w	sl, #2
 80080c0:	d055      	beq.n	800816e <_scanf_float+0x27e>
 80080c2:	2d01      	cmp	r5, #1
 80080c4:	d002      	beq.n	80080cc <_scanf_float+0x1dc>
 80080c6:	2d04      	cmp	r5, #4
 80080c8:	f47f af44 	bne.w	8007f54 <_scanf_float+0x64>
 80080cc:	3501      	adds	r5, #1
 80080ce:	b2ed      	uxtb	r5, r5
 80080d0:	e7d7      	b.n	8008082 <_scanf_float+0x192>
 80080d2:	f1ba 0f01 	cmp.w	sl, #1
 80080d6:	f47f af3d 	bne.w	8007f54 <_scanf_float+0x64>
 80080da:	f04f 0a02 	mov.w	sl, #2
 80080de:	e7d0      	b.n	8008082 <_scanf_float+0x192>
 80080e0:	b97d      	cbnz	r5, 8008102 <_scanf_float+0x212>
 80080e2:	f1b9 0f00 	cmp.w	r9, #0
 80080e6:	f47f af38 	bne.w	8007f5a <_scanf_float+0x6a>
 80080ea:	6822      	ldr	r2, [r4, #0]
 80080ec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80080f0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80080f4:	f040 8108 	bne.w	8008308 <_scanf_float+0x418>
 80080f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80080fc:	6022      	str	r2, [r4, #0]
 80080fe:	2501      	movs	r5, #1
 8008100:	e7bf      	b.n	8008082 <_scanf_float+0x192>
 8008102:	2d03      	cmp	r5, #3
 8008104:	d0e2      	beq.n	80080cc <_scanf_float+0x1dc>
 8008106:	2d05      	cmp	r5, #5
 8008108:	e7de      	b.n	80080c8 <_scanf_float+0x1d8>
 800810a:	2d02      	cmp	r5, #2
 800810c:	f47f af22 	bne.w	8007f54 <_scanf_float+0x64>
 8008110:	2503      	movs	r5, #3
 8008112:	e7b6      	b.n	8008082 <_scanf_float+0x192>
 8008114:	2d06      	cmp	r5, #6
 8008116:	f47f af1d 	bne.w	8007f54 <_scanf_float+0x64>
 800811a:	2507      	movs	r5, #7
 800811c:	e7b1      	b.n	8008082 <_scanf_float+0x192>
 800811e:	6822      	ldr	r2, [r4, #0]
 8008120:	0591      	lsls	r1, r2, #22
 8008122:	f57f af17 	bpl.w	8007f54 <_scanf_float+0x64>
 8008126:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800812a:	6022      	str	r2, [r4, #0]
 800812c:	f8cd 9008 	str.w	r9, [sp, #8]
 8008130:	e7a7      	b.n	8008082 <_scanf_float+0x192>
 8008132:	6822      	ldr	r2, [r4, #0]
 8008134:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008138:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800813c:	d006      	beq.n	800814c <_scanf_float+0x25c>
 800813e:	0550      	lsls	r0, r2, #21
 8008140:	f57f af08 	bpl.w	8007f54 <_scanf_float+0x64>
 8008144:	f1b9 0f00 	cmp.w	r9, #0
 8008148:	f000 80de 	beq.w	8008308 <_scanf_float+0x418>
 800814c:	0591      	lsls	r1, r2, #22
 800814e:	bf58      	it	pl
 8008150:	9902      	ldrpl	r1, [sp, #8]
 8008152:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008156:	bf58      	it	pl
 8008158:	eba9 0101 	subpl.w	r1, r9, r1
 800815c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008160:	bf58      	it	pl
 8008162:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008166:	6022      	str	r2, [r4, #0]
 8008168:	f04f 0900 	mov.w	r9, #0
 800816c:	e789      	b.n	8008082 <_scanf_float+0x192>
 800816e:	f04f 0a03 	mov.w	sl, #3
 8008172:	e786      	b.n	8008082 <_scanf_float+0x192>
 8008174:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008178:	4639      	mov	r1, r7
 800817a:	4640      	mov	r0, r8
 800817c:	4798      	blx	r3
 800817e:	2800      	cmp	r0, #0
 8008180:	f43f aedb 	beq.w	8007f3a <_scanf_float+0x4a>
 8008184:	e6e6      	b.n	8007f54 <_scanf_float+0x64>
 8008186:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800818a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800818e:	463a      	mov	r2, r7
 8008190:	4640      	mov	r0, r8
 8008192:	4798      	blx	r3
 8008194:	6923      	ldr	r3, [r4, #16]
 8008196:	3b01      	subs	r3, #1
 8008198:	6123      	str	r3, [r4, #16]
 800819a:	e6e8      	b.n	8007f6e <_scanf_float+0x7e>
 800819c:	1e6b      	subs	r3, r5, #1
 800819e:	2b06      	cmp	r3, #6
 80081a0:	d824      	bhi.n	80081ec <_scanf_float+0x2fc>
 80081a2:	2d02      	cmp	r5, #2
 80081a4:	d836      	bhi.n	8008214 <_scanf_float+0x324>
 80081a6:	9b01      	ldr	r3, [sp, #4]
 80081a8:	429e      	cmp	r6, r3
 80081aa:	f67f aee4 	bls.w	8007f76 <_scanf_float+0x86>
 80081ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80081b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80081b6:	463a      	mov	r2, r7
 80081b8:	4640      	mov	r0, r8
 80081ba:	4798      	blx	r3
 80081bc:	6923      	ldr	r3, [r4, #16]
 80081be:	3b01      	subs	r3, #1
 80081c0:	6123      	str	r3, [r4, #16]
 80081c2:	e7f0      	b.n	80081a6 <_scanf_float+0x2b6>
 80081c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80081c8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80081cc:	463a      	mov	r2, r7
 80081ce:	4640      	mov	r0, r8
 80081d0:	4798      	blx	r3
 80081d2:	6923      	ldr	r3, [r4, #16]
 80081d4:	3b01      	subs	r3, #1
 80081d6:	6123      	str	r3, [r4, #16]
 80081d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081dc:	fa5f fa8a 	uxtb.w	sl, sl
 80081e0:	f1ba 0f02 	cmp.w	sl, #2
 80081e4:	d1ee      	bne.n	80081c4 <_scanf_float+0x2d4>
 80081e6:	3d03      	subs	r5, #3
 80081e8:	b2ed      	uxtb	r5, r5
 80081ea:	1b76      	subs	r6, r6, r5
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	05da      	lsls	r2, r3, #23
 80081f0:	d530      	bpl.n	8008254 <_scanf_float+0x364>
 80081f2:	055b      	lsls	r3, r3, #21
 80081f4:	d511      	bpl.n	800821a <_scanf_float+0x32a>
 80081f6:	9b01      	ldr	r3, [sp, #4]
 80081f8:	429e      	cmp	r6, r3
 80081fa:	f67f aebc 	bls.w	8007f76 <_scanf_float+0x86>
 80081fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008202:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008206:	463a      	mov	r2, r7
 8008208:	4640      	mov	r0, r8
 800820a:	4798      	blx	r3
 800820c:	6923      	ldr	r3, [r4, #16]
 800820e:	3b01      	subs	r3, #1
 8008210:	6123      	str	r3, [r4, #16]
 8008212:	e7f0      	b.n	80081f6 <_scanf_float+0x306>
 8008214:	46aa      	mov	sl, r5
 8008216:	46b3      	mov	fp, r6
 8008218:	e7de      	b.n	80081d8 <_scanf_float+0x2e8>
 800821a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800821e:	6923      	ldr	r3, [r4, #16]
 8008220:	2965      	cmp	r1, #101	@ 0x65
 8008222:	f103 33ff 	add.w	r3, r3, #4294967295
 8008226:	f106 35ff 	add.w	r5, r6, #4294967295
 800822a:	6123      	str	r3, [r4, #16]
 800822c:	d00c      	beq.n	8008248 <_scanf_float+0x358>
 800822e:	2945      	cmp	r1, #69	@ 0x45
 8008230:	d00a      	beq.n	8008248 <_scanf_float+0x358>
 8008232:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008236:	463a      	mov	r2, r7
 8008238:	4640      	mov	r0, r8
 800823a:	4798      	blx	r3
 800823c:	6923      	ldr	r3, [r4, #16]
 800823e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008242:	3b01      	subs	r3, #1
 8008244:	1eb5      	subs	r5, r6, #2
 8008246:	6123      	str	r3, [r4, #16]
 8008248:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800824c:	463a      	mov	r2, r7
 800824e:	4640      	mov	r0, r8
 8008250:	4798      	blx	r3
 8008252:	462e      	mov	r6, r5
 8008254:	6822      	ldr	r2, [r4, #0]
 8008256:	f012 0210 	ands.w	r2, r2, #16
 800825a:	d001      	beq.n	8008260 <_scanf_float+0x370>
 800825c:	2000      	movs	r0, #0
 800825e:	e68b      	b.n	8007f78 <_scanf_float+0x88>
 8008260:	7032      	strb	r2, [r6, #0]
 8008262:	6823      	ldr	r3, [r4, #0]
 8008264:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800826c:	d11c      	bne.n	80082a8 <_scanf_float+0x3b8>
 800826e:	9b02      	ldr	r3, [sp, #8]
 8008270:	454b      	cmp	r3, r9
 8008272:	eba3 0209 	sub.w	r2, r3, r9
 8008276:	d123      	bne.n	80082c0 <_scanf_float+0x3d0>
 8008278:	9901      	ldr	r1, [sp, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	4640      	mov	r0, r8
 800827e:	f002 fc73 	bl	800ab68 <_strtod_r>
 8008282:	9b03      	ldr	r3, [sp, #12]
 8008284:	6821      	ldr	r1, [r4, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f011 0f02 	tst.w	r1, #2
 800828c:	ec57 6b10 	vmov	r6, r7, d0
 8008290:	f103 0204 	add.w	r2, r3, #4
 8008294:	d01f      	beq.n	80082d6 <_scanf_float+0x3e6>
 8008296:	9903      	ldr	r1, [sp, #12]
 8008298:	600a      	str	r2, [r1, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	e9c3 6700 	strd	r6, r7, [r3]
 80082a0:	68e3      	ldr	r3, [r4, #12]
 80082a2:	3301      	adds	r3, #1
 80082a4:	60e3      	str	r3, [r4, #12]
 80082a6:	e7d9      	b.n	800825c <_scanf_float+0x36c>
 80082a8:	9b04      	ldr	r3, [sp, #16]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d0e4      	beq.n	8008278 <_scanf_float+0x388>
 80082ae:	9905      	ldr	r1, [sp, #20]
 80082b0:	230a      	movs	r3, #10
 80082b2:	3101      	adds	r1, #1
 80082b4:	4640      	mov	r0, r8
 80082b6:	f002 fcd7 	bl	800ac68 <_strtol_r>
 80082ba:	9b04      	ldr	r3, [sp, #16]
 80082bc:	9e05      	ldr	r6, [sp, #20]
 80082be:	1ac2      	subs	r2, r0, r3
 80082c0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80082c4:	429e      	cmp	r6, r3
 80082c6:	bf28      	it	cs
 80082c8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80082cc:	4910      	ldr	r1, [pc, #64]	@ (8008310 <_scanf_float+0x420>)
 80082ce:	4630      	mov	r0, r6
 80082d0:	f000 f92a 	bl	8008528 <siprintf>
 80082d4:	e7d0      	b.n	8008278 <_scanf_float+0x388>
 80082d6:	f011 0f04 	tst.w	r1, #4
 80082da:	9903      	ldr	r1, [sp, #12]
 80082dc:	600a      	str	r2, [r1, #0]
 80082de:	d1dc      	bne.n	800829a <_scanf_float+0x3aa>
 80082e0:	681d      	ldr	r5, [r3, #0]
 80082e2:	4632      	mov	r2, r6
 80082e4:	463b      	mov	r3, r7
 80082e6:	4630      	mov	r0, r6
 80082e8:	4639      	mov	r1, r7
 80082ea:	f7f8 fc27 	bl	8000b3c <__aeabi_dcmpun>
 80082ee:	b128      	cbz	r0, 80082fc <_scanf_float+0x40c>
 80082f0:	4808      	ldr	r0, [pc, #32]	@ (8008314 <_scanf_float+0x424>)
 80082f2:	f000 fac7 	bl	8008884 <nanf>
 80082f6:	ed85 0a00 	vstr	s0, [r5]
 80082fa:	e7d1      	b.n	80082a0 <_scanf_float+0x3b0>
 80082fc:	4630      	mov	r0, r6
 80082fe:	4639      	mov	r1, r7
 8008300:	f7f8 fc7a 	bl	8000bf8 <__aeabi_d2f>
 8008304:	6028      	str	r0, [r5, #0]
 8008306:	e7cb      	b.n	80082a0 <_scanf_float+0x3b0>
 8008308:	f04f 0900 	mov.w	r9, #0
 800830c:	e629      	b.n	8007f62 <_scanf_float+0x72>
 800830e:	bf00      	nop
 8008310:	0800c9ca 	.word	0x0800c9ca
 8008314:	0800ca0a 	.word	0x0800ca0a

08008318 <std>:
 8008318:	2300      	movs	r3, #0
 800831a:	b510      	push	{r4, lr}
 800831c:	4604      	mov	r4, r0
 800831e:	e9c0 3300 	strd	r3, r3, [r0]
 8008322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008326:	6083      	str	r3, [r0, #8]
 8008328:	8181      	strh	r1, [r0, #12]
 800832a:	6643      	str	r3, [r0, #100]	@ 0x64
 800832c:	81c2      	strh	r2, [r0, #14]
 800832e:	6183      	str	r3, [r0, #24]
 8008330:	4619      	mov	r1, r3
 8008332:	2208      	movs	r2, #8
 8008334:	305c      	adds	r0, #92	@ 0x5c
 8008336:	f000 f9ef 	bl	8008718 <memset>
 800833a:	4b0d      	ldr	r3, [pc, #52]	@ (8008370 <std+0x58>)
 800833c:	6263      	str	r3, [r4, #36]	@ 0x24
 800833e:	4b0d      	ldr	r3, [pc, #52]	@ (8008374 <std+0x5c>)
 8008340:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008342:	4b0d      	ldr	r3, [pc, #52]	@ (8008378 <std+0x60>)
 8008344:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008346:	4b0d      	ldr	r3, [pc, #52]	@ (800837c <std+0x64>)
 8008348:	6323      	str	r3, [r4, #48]	@ 0x30
 800834a:	4b0d      	ldr	r3, [pc, #52]	@ (8008380 <std+0x68>)
 800834c:	6224      	str	r4, [r4, #32]
 800834e:	429c      	cmp	r4, r3
 8008350:	d006      	beq.n	8008360 <std+0x48>
 8008352:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008356:	4294      	cmp	r4, r2
 8008358:	d002      	beq.n	8008360 <std+0x48>
 800835a:	33d0      	adds	r3, #208	@ 0xd0
 800835c:	429c      	cmp	r4, r3
 800835e:	d105      	bne.n	800836c <std+0x54>
 8008360:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008368:	f000 ba7a 	b.w	8008860 <__retarget_lock_init_recursive>
 800836c:	bd10      	pop	{r4, pc}
 800836e:	bf00      	nop
 8008370:	08008569 	.word	0x08008569
 8008374:	0800858b 	.word	0x0800858b
 8008378:	080085c3 	.word	0x080085c3
 800837c:	080085e7 	.word	0x080085e7
 8008380:	200009d4 	.word	0x200009d4

08008384 <stdio_exit_handler>:
 8008384:	4a02      	ldr	r2, [pc, #8]	@ (8008390 <stdio_exit_handler+0xc>)
 8008386:	4903      	ldr	r1, [pc, #12]	@ (8008394 <stdio_exit_handler+0x10>)
 8008388:	4803      	ldr	r0, [pc, #12]	@ (8008398 <stdio_exit_handler+0x14>)
 800838a:	f000 b869 	b.w	8008460 <_fwalk_sglue>
 800838e:	bf00      	nop
 8008390:	2000057c 	.word	0x2000057c
 8008394:	0800b2a9 	.word	0x0800b2a9
 8008398:	2000058c 	.word	0x2000058c

0800839c <cleanup_stdio>:
 800839c:	6841      	ldr	r1, [r0, #4]
 800839e:	4b0c      	ldr	r3, [pc, #48]	@ (80083d0 <cleanup_stdio+0x34>)
 80083a0:	4299      	cmp	r1, r3
 80083a2:	b510      	push	{r4, lr}
 80083a4:	4604      	mov	r4, r0
 80083a6:	d001      	beq.n	80083ac <cleanup_stdio+0x10>
 80083a8:	f002 ff7e 	bl	800b2a8 <_fflush_r>
 80083ac:	68a1      	ldr	r1, [r4, #8]
 80083ae:	4b09      	ldr	r3, [pc, #36]	@ (80083d4 <cleanup_stdio+0x38>)
 80083b0:	4299      	cmp	r1, r3
 80083b2:	d002      	beq.n	80083ba <cleanup_stdio+0x1e>
 80083b4:	4620      	mov	r0, r4
 80083b6:	f002 ff77 	bl	800b2a8 <_fflush_r>
 80083ba:	68e1      	ldr	r1, [r4, #12]
 80083bc:	4b06      	ldr	r3, [pc, #24]	@ (80083d8 <cleanup_stdio+0x3c>)
 80083be:	4299      	cmp	r1, r3
 80083c0:	d004      	beq.n	80083cc <cleanup_stdio+0x30>
 80083c2:	4620      	mov	r0, r4
 80083c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083c8:	f002 bf6e 	b.w	800b2a8 <_fflush_r>
 80083cc:	bd10      	pop	{r4, pc}
 80083ce:	bf00      	nop
 80083d0:	200009d4 	.word	0x200009d4
 80083d4:	20000a3c 	.word	0x20000a3c
 80083d8:	20000aa4 	.word	0x20000aa4

080083dc <global_stdio_init.part.0>:
 80083dc:	b510      	push	{r4, lr}
 80083de:	4b0b      	ldr	r3, [pc, #44]	@ (800840c <global_stdio_init.part.0+0x30>)
 80083e0:	4c0b      	ldr	r4, [pc, #44]	@ (8008410 <global_stdio_init.part.0+0x34>)
 80083e2:	4a0c      	ldr	r2, [pc, #48]	@ (8008414 <global_stdio_init.part.0+0x38>)
 80083e4:	601a      	str	r2, [r3, #0]
 80083e6:	4620      	mov	r0, r4
 80083e8:	2200      	movs	r2, #0
 80083ea:	2104      	movs	r1, #4
 80083ec:	f7ff ff94 	bl	8008318 <std>
 80083f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80083f4:	2201      	movs	r2, #1
 80083f6:	2109      	movs	r1, #9
 80083f8:	f7ff ff8e 	bl	8008318 <std>
 80083fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008400:	2202      	movs	r2, #2
 8008402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008406:	2112      	movs	r1, #18
 8008408:	f7ff bf86 	b.w	8008318 <std>
 800840c:	20000b0c 	.word	0x20000b0c
 8008410:	200009d4 	.word	0x200009d4
 8008414:	08008385 	.word	0x08008385

08008418 <__sfp_lock_acquire>:
 8008418:	4801      	ldr	r0, [pc, #4]	@ (8008420 <__sfp_lock_acquire+0x8>)
 800841a:	f000 ba22 	b.w	8008862 <__retarget_lock_acquire_recursive>
 800841e:	bf00      	nop
 8008420:	20000b15 	.word	0x20000b15

08008424 <__sfp_lock_release>:
 8008424:	4801      	ldr	r0, [pc, #4]	@ (800842c <__sfp_lock_release+0x8>)
 8008426:	f000 ba1d 	b.w	8008864 <__retarget_lock_release_recursive>
 800842a:	bf00      	nop
 800842c:	20000b15 	.word	0x20000b15

08008430 <__sinit>:
 8008430:	b510      	push	{r4, lr}
 8008432:	4604      	mov	r4, r0
 8008434:	f7ff fff0 	bl	8008418 <__sfp_lock_acquire>
 8008438:	6a23      	ldr	r3, [r4, #32]
 800843a:	b11b      	cbz	r3, 8008444 <__sinit+0x14>
 800843c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008440:	f7ff bff0 	b.w	8008424 <__sfp_lock_release>
 8008444:	4b04      	ldr	r3, [pc, #16]	@ (8008458 <__sinit+0x28>)
 8008446:	6223      	str	r3, [r4, #32]
 8008448:	4b04      	ldr	r3, [pc, #16]	@ (800845c <__sinit+0x2c>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1f5      	bne.n	800843c <__sinit+0xc>
 8008450:	f7ff ffc4 	bl	80083dc <global_stdio_init.part.0>
 8008454:	e7f2      	b.n	800843c <__sinit+0xc>
 8008456:	bf00      	nop
 8008458:	0800839d 	.word	0x0800839d
 800845c:	20000b0c 	.word	0x20000b0c

08008460 <_fwalk_sglue>:
 8008460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008464:	4607      	mov	r7, r0
 8008466:	4688      	mov	r8, r1
 8008468:	4614      	mov	r4, r2
 800846a:	2600      	movs	r6, #0
 800846c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008470:	f1b9 0901 	subs.w	r9, r9, #1
 8008474:	d505      	bpl.n	8008482 <_fwalk_sglue+0x22>
 8008476:	6824      	ldr	r4, [r4, #0]
 8008478:	2c00      	cmp	r4, #0
 800847a:	d1f7      	bne.n	800846c <_fwalk_sglue+0xc>
 800847c:	4630      	mov	r0, r6
 800847e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008482:	89ab      	ldrh	r3, [r5, #12]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d907      	bls.n	8008498 <_fwalk_sglue+0x38>
 8008488:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800848c:	3301      	adds	r3, #1
 800848e:	d003      	beq.n	8008498 <_fwalk_sglue+0x38>
 8008490:	4629      	mov	r1, r5
 8008492:	4638      	mov	r0, r7
 8008494:	47c0      	blx	r8
 8008496:	4306      	orrs	r6, r0
 8008498:	3568      	adds	r5, #104	@ 0x68
 800849a:	e7e9      	b.n	8008470 <_fwalk_sglue+0x10>

0800849c <iprintf>:
 800849c:	b40f      	push	{r0, r1, r2, r3}
 800849e:	b507      	push	{r0, r1, r2, lr}
 80084a0:	4906      	ldr	r1, [pc, #24]	@ (80084bc <iprintf+0x20>)
 80084a2:	ab04      	add	r3, sp, #16
 80084a4:	6808      	ldr	r0, [r1, #0]
 80084a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80084aa:	6881      	ldr	r1, [r0, #8]
 80084ac:	9301      	str	r3, [sp, #4]
 80084ae:	f002 fd5f 	bl	800af70 <_vfiprintf_r>
 80084b2:	b003      	add	sp, #12
 80084b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80084b8:	b004      	add	sp, #16
 80084ba:	4770      	bx	lr
 80084bc:	20000588 	.word	0x20000588

080084c0 <sniprintf>:
 80084c0:	b40c      	push	{r2, r3}
 80084c2:	b530      	push	{r4, r5, lr}
 80084c4:	4b17      	ldr	r3, [pc, #92]	@ (8008524 <sniprintf+0x64>)
 80084c6:	1e0c      	subs	r4, r1, #0
 80084c8:	681d      	ldr	r5, [r3, #0]
 80084ca:	b09d      	sub	sp, #116	@ 0x74
 80084cc:	da08      	bge.n	80084e0 <sniprintf+0x20>
 80084ce:	238b      	movs	r3, #139	@ 0x8b
 80084d0:	602b      	str	r3, [r5, #0]
 80084d2:	f04f 30ff 	mov.w	r0, #4294967295
 80084d6:	b01d      	add	sp, #116	@ 0x74
 80084d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084dc:	b002      	add	sp, #8
 80084de:	4770      	bx	lr
 80084e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80084e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80084e8:	bf14      	ite	ne
 80084ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80084ee:	4623      	moveq	r3, r4
 80084f0:	9304      	str	r3, [sp, #16]
 80084f2:	9307      	str	r3, [sp, #28]
 80084f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80084f8:	9002      	str	r0, [sp, #8]
 80084fa:	9006      	str	r0, [sp, #24]
 80084fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008500:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008502:	ab21      	add	r3, sp, #132	@ 0x84
 8008504:	a902      	add	r1, sp, #8
 8008506:	4628      	mov	r0, r5
 8008508:	9301      	str	r3, [sp, #4]
 800850a:	f002 fc0b 	bl	800ad24 <_svfiprintf_r>
 800850e:	1c43      	adds	r3, r0, #1
 8008510:	bfbc      	itt	lt
 8008512:	238b      	movlt	r3, #139	@ 0x8b
 8008514:	602b      	strlt	r3, [r5, #0]
 8008516:	2c00      	cmp	r4, #0
 8008518:	d0dd      	beq.n	80084d6 <sniprintf+0x16>
 800851a:	9b02      	ldr	r3, [sp, #8]
 800851c:	2200      	movs	r2, #0
 800851e:	701a      	strb	r2, [r3, #0]
 8008520:	e7d9      	b.n	80084d6 <sniprintf+0x16>
 8008522:	bf00      	nop
 8008524:	20000588 	.word	0x20000588

08008528 <siprintf>:
 8008528:	b40e      	push	{r1, r2, r3}
 800852a:	b500      	push	{lr}
 800852c:	b09c      	sub	sp, #112	@ 0x70
 800852e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008530:	9002      	str	r0, [sp, #8]
 8008532:	9006      	str	r0, [sp, #24]
 8008534:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008538:	4809      	ldr	r0, [pc, #36]	@ (8008560 <siprintf+0x38>)
 800853a:	9107      	str	r1, [sp, #28]
 800853c:	9104      	str	r1, [sp, #16]
 800853e:	4909      	ldr	r1, [pc, #36]	@ (8008564 <siprintf+0x3c>)
 8008540:	f853 2b04 	ldr.w	r2, [r3], #4
 8008544:	9105      	str	r1, [sp, #20]
 8008546:	6800      	ldr	r0, [r0, #0]
 8008548:	9301      	str	r3, [sp, #4]
 800854a:	a902      	add	r1, sp, #8
 800854c:	f002 fbea 	bl	800ad24 <_svfiprintf_r>
 8008550:	9b02      	ldr	r3, [sp, #8]
 8008552:	2200      	movs	r2, #0
 8008554:	701a      	strb	r2, [r3, #0]
 8008556:	b01c      	add	sp, #112	@ 0x70
 8008558:	f85d eb04 	ldr.w	lr, [sp], #4
 800855c:	b003      	add	sp, #12
 800855e:	4770      	bx	lr
 8008560:	20000588 	.word	0x20000588
 8008564:	ffff0208 	.word	0xffff0208

08008568 <__sread>:
 8008568:	b510      	push	{r4, lr}
 800856a:	460c      	mov	r4, r1
 800856c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008570:	f000 f914 	bl	800879c <_read_r>
 8008574:	2800      	cmp	r0, #0
 8008576:	bfab      	itete	ge
 8008578:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800857a:	89a3      	ldrhlt	r3, [r4, #12]
 800857c:	181b      	addge	r3, r3, r0
 800857e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008582:	bfac      	ite	ge
 8008584:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008586:	81a3      	strhlt	r3, [r4, #12]
 8008588:	bd10      	pop	{r4, pc}

0800858a <__swrite>:
 800858a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800858e:	461f      	mov	r7, r3
 8008590:	898b      	ldrh	r3, [r1, #12]
 8008592:	05db      	lsls	r3, r3, #23
 8008594:	4605      	mov	r5, r0
 8008596:	460c      	mov	r4, r1
 8008598:	4616      	mov	r6, r2
 800859a:	d505      	bpl.n	80085a8 <__swrite+0x1e>
 800859c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a0:	2302      	movs	r3, #2
 80085a2:	2200      	movs	r2, #0
 80085a4:	f000 f8e8 	bl	8008778 <_lseek_r>
 80085a8:	89a3      	ldrh	r3, [r4, #12]
 80085aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085b2:	81a3      	strh	r3, [r4, #12]
 80085b4:	4632      	mov	r2, r6
 80085b6:	463b      	mov	r3, r7
 80085b8:	4628      	mov	r0, r5
 80085ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085be:	f000 b913 	b.w	80087e8 <_write_r>

080085c2 <__sseek>:
 80085c2:	b510      	push	{r4, lr}
 80085c4:	460c      	mov	r4, r1
 80085c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ca:	f000 f8d5 	bl	8008778 <_lseek_r>
 80085ce:	1c43      	adds	r3, r0, #1
 80085d0:	89a3      	ldrh	r3, [r4, #12]
 80085d2:	bf15      	itete	ne
 80085d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80085d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80085da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80085de:	81a3      	strheq	r3, [r4, #12]
 80085e0:	bf18      	it	ne
 80085e2:	81a3      	strhne	r3, [r4, #12]
 80085e4:	bd10      	pop	{r4, pc}

080085e6 <__sclose>:
 80085e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ea:	f000 b8b5 	b.w	8008758 <_close_r>

080085ee <__swbuf_r>:
 80085ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f0:	460e      	mov	r6, r1
 80085f2:	4614      	mov	r4, r2
 80085f4:	4605      	mov	r5, r0
 80085f6:	b118      	cbz	r0, 8008600 <__swbuf_r+0x12>
 80085f8:	6a03      	ldr	r3, [r0, #32]
 80085fa:	b90b      	cbnz	r3, 8008600 <__swbuf_r+0x12>
 80085fc:	f7ff ff18 	bl	8008430 <__sinit>
 8008600:	69a3      	ldr	r3, [r4, #24]
 8008602:	60a3      	str	r3, [r4, #8]
 8008604:	89a3      	ldrh	r3, [r4, #12]
 8008606:	071a      	lsls	r2, r3, #28
 8008608:	d501      	bpl.n	800860e <__swbuf_r+0x20>
 800860a:	6923      	ldr	r3, [r4, #16]
 800860c:	b943      	cbnz	r3, 8008620 <__swbuf_r+0x32>
 800860e:	4621      	mov	r1, r4
 8008610:	4628      	mov	r0, r5
 8008612:	f000 f82b 	bl	800866c <__swsetup_r>
 8008616:	b118      	cbz	r0, 8008620 <__swbuf_r+0x32>
 8008618:	f04f 37ff 	mov.w	r7, #4294967295
 800861c:	4638      	mov	r0, r7
 800861e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	6922      	ldr	r2, [r4, #16]
 8008624:	1a98      	subs	r0, r3, r2
 8008626:	6963      	ldr	r3, [r4, #20]
 8008628:	b2f6      	uxtb	r6, r6
 800862a:	4283      	cmp	r3, r0
 800862c:	4637      	mov	r7, r6
 800862e:	dc05      	bgt.n	800863c <__swbuf_r+0x4e>
 8008630:	4621      	mov	r1, r4
 8008632:	4628      	mov	r0, r5
 8008634:	f002 fe38 	bl	800b2a8 <_fflush_r>
 8008638:	2800      	cmp	r0, #0
 800863a:	d1ed      	bne.n	8008618 <__swbuf_r+0x2a>
 800863c:	68a3      	ldr	r3, [r4, #8]
 800863e:	3b01      	subs	r3, #1
 8008640:	60a3      	str	r3, [r4, #8]
 8008642:	6823      	ldr	r3, [r4, #0]
 8008644:	1c5a      	adds	r2, r3, #1
 8008646:	6022      	str	r2, [r4, #0]
 8008648:	701e      	strb	r6, [r3, #0]
 800864a:	6962      	ldr	r2, [r4, #20]
 800864c:	1c43      	adds	r3, r0, #1
 800864e:	429a      	cmp	r2, r3
 8008650:	d004      	beq.n	800865c <__swbuf_r+0x6e>
 8008652:	89a3      	ldrh	r3, [r4, #12]
 8008654:	07db      	lsls	r3, r3, #31
 8008656:	d5e1      	bpl.n	800861c <__swbuf_r+0x2e>
 8008658:	2e0a      	cmp	r6, #10
 800865a:	d1df      	bne.n	800861c <__swbuf_r+0x2e>
 800865c:	4621      	mov	r1, r4
 800865e:	4628      	mov	r0, r5
 8008660:	f002 fe22 	bl	800b2a8 <_fflush_r>
 8008664:	2800      	cmp	r0, #0
 8008666:	d0d9      	beq.n	800861c <__swbuf_r+0x2e>
 8008668:	e7d6      	b.n	8008618 <__swbuf_r+0x2a>
	...

0800866c <__swsetup_r>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	4b29      	ldr	r3, [pc, #164]	@ (8008714 <__swsetup_r+0xa8>)
 8008670:	4605      	mov	r5, r0
 8008672:	6818      	ldr	r0, [r3, #0]
 8008674:	460c      	mov	r4, r1
 8008676:	b118      	cbz	r0, 8008680 <__swsetup_r+0x14>
 8008678:	6a03      	ldr	r3, [r0, #32]
 800867a:	b90b      	cbnz	r3, 8008680 <__swsetup_r+0x14>
 800867c:	f7ff fed8 	bl	8008430 <__sinit>
 8008680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008684:	0719      	lsls	r1, r3, #28
 8008686:	d422      	bmi.n	80086ce <__swsetup_r+0x62>
 8008688:	06da      	lsls	r2, r3, #27
 800868a:	d407      	bmi.n	800869c <__swsetup_r+0x30>
 800868c:	2209      	movs	r2, #9
 800868e:	602a      	str	r2, [r5, #0]
 8008690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008694:	81a3      	strh	r3, [r4, #12]
 8008696:	f04f 30ff 	mov.w	r0, #4294967295
 800869a:	e033      	b.n	8008704 <__swsetup_r+0x98>
 800869c:	0758      	lsls	r0, r3, #29
 800869e:	d512      	bpl.n	80086c6 <__swsetup_r+0x5a>
 80086a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086a2:	b141      	cbz	r1, 80086b6 <__swsetup_r+0x4a>
 80086a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086a8:	4299      	cmp	r1, r3
 80086aa:	d002      	beq.n	80086b2 <__swsetup_r+0x46>
 80086ac:	4628      	mov	r0, r5
 80086ae:	f000 ff5b 	bl	8009568 <_free_r>
 80086b2:	2300      	movs	r3, #0
 80086b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80086b6:	89a3      	ldrh	r3, [r4, #12]
 80086b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80086bc:	81a3      	strh	r3, [r4, #12]
 80086be:	2300      	movs	r3, #0
 80086c0:	6063      	str	r3, [r4, #4]
 80086c2:	6923      	ldr	r3, [r4, #16]
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	89a3      	ldrh	r3, [r4, #12]
 80086c8:	f043 0308 	orr.w	r3, r3, #8
 80086cc:	81a3      	strh	r3, [r4, #12]
 80086ce:	6923      	ldr	r3, [r4, #16]
 80086d0:	b94b      	cbnz	r3, 80086e6 <__swsetup_r+0x7a>
 80086d2:	89a3      	ldrh	r3, [r4, #12]
 80086d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80086d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086dc:	d003      	beq.n	80086e6 <__swsetup_r+0x7a>
 80086de:	4621      	mov	r1, r4
 80086e0:	4628      	mov	r0, r5
 80086e2:	f002 fe41 	bl	800b368 <__smakebuf_r>
 80086e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ea:	f013 0201 	ands.w	r2, r3, #1
 80086ee:	d00a      	beq.n	8008706 <__swsetup_r+0x9a>
 80086f0:	2200      	movs	r2, #0
 80086f2:	60a2      	str	r2, [r4, #8]
 80086f4:	6962      	ldr	r2, [r4, #20]
 80086f6:	4252      	negs	r2, r2
 80086f8:	61a2      	str	r2, [r4, #24]
 80086fa:	6922      	ldr	r2, [r4, #16]
 80086fc:	b942      	cbnz	r2, 8008710 <__swsetup_r+0xa4>
 80086fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008702:	d1c5      	bne.n	8008690 <__swsetup_r+0x24>
 8008704:	bd38      	pop	{r3, r4, r5, pc}
 8008706:	0799      	lsls	r1, r3, #30
 8008708:	bf58      	it	pl
 800870a:	6962      	ldrpl	r2, [r4, #20]
 800870c:	60a2      	str	r2, [r4, #8]
 800870e:	e7f4      	b.n	80086fa <__swsetup_r+0x8e>
 8008710:	2000      	movs	r0, #0
 8008712:	e7f7      	b.n	8008704 <__swsetup_r+0x98>
 8008714:	20000588 	.word	0x20000588

08008718 <memset>:
 8008718:	4402      	add	r2, r0
 800871a:	4603      	mov	r3, r0
 800871c:	4293      	cmp	r3, r2
 800871e:	d100      	bne.n	8008722 <memset+0xa>
 8008720:	4770      	bx	lr
 8008722:	f803 1b01 	strb.w	r1, [r3], #1
 8008726:	e7f9      	b.n	800871c <memset+0x4>

08008728 <clock>:
 8008728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800872a:	4b08      	ldr	r3, [pc, #32]	@ (800874c <clock+0x24>)
 800872c:	4669      	mov	r1, sp
 800872e:	6818      	ldr	r0, [r3, #0]
 8008730:	f000 f856 	bl	80087e0 <_times_r>
 8008734:	1c43      	adds	r3, r0, #1
 8008736:	d006      	beq.n	8008746 <clock+0x1e>
 8008738:	e9dd 0300 	ldrd	r0, r3, [sp]
 800873c:	4418      	add	r0, r3
 800873e:	9b02      	ldr	r3, [sp, #8]
 8008740:	4418      	add	r0, r3
 8008742:	9b03      	ldr	r3, [sp, #12]
 8008744:	4418      	add	r0, r3
 8008746:	b005      	add	sp, #20
 8008748:	f85d fb04 	ldr.w	pc, [sp], #4
 800874c:	20000588 	.word	0x20000588

08008750 <_localeconv_r>:
 8008750:	4800      	ldr	r0, [pc, #0]	@ (8008754 <_localeconv_r+0x4>)
 8008752:	4770      	bx	lr
 8008754:	200006c8 	.word	0x200006c8

08008758 <_close_r>:
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	4d06      	ldr	r5, [pc, #24]	@ (8008774 <_close_r+0x1c>)
 800875c:	2300      	movs	r3, #0
 800875e:	4604      	mov	r4, r0
 8008760:	4608      	mov	r0, r1
 8008762:	602b      	str	r3, [r5, #0]
 8008764:	f7f9 ff0e 	bl	8002584 <_close>
 8008768:	1c43      	adds	r3, r0, #1
 800876a:	d102      	bne.n	8008772 <_close_r+0x1a>
 800876c:	682b      	ldr	r3, [r5, #0]
 800876e:	b103      	cbz	r3, 8008772 <_close_r+0x1a>
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	bd38      	pop	{r3, r4, r5, pc}
 8008774:	20000b10 	.word	0x20000b10

08008778 <_lseek_r>:
 8008778:	b538      	push	{r3, r4, r5, lr}
 800877a:	4d07      	ldr	r5, [pc, #28]	@ (8008798 <_lseek_r+0x20>)
 800877c:	4604      	mov	r4, r0
 800877e:	4608      	mov	r0, r1
 8008780:	4611      	mov	r1, r2
 8008782:	2200      	movs	r2, #0
 8008784:	602a      	str	r2, [r5, #0]
 8008786:	461a      	mov	r2, r3
 8008788:	f7f9 ff23 	bl	80025d2 <_lseek>
 800878c:	1c43      	adds	r3, r0, #1
 800878e:	d102      	bne.n	8008796 <_lseek_r+0x1e>
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	b103      	cbz	r3, 8008796 <_lseek_r+0x1e>
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	bd38      	pop	{r3, r4, r5, pc}
 8008798:	20000b10 	.word	0x20000b10

0800879c <_read_r>:
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	4d07      	ldr	r5, [pc, #28]	@ (80087bc <_read_r+0x20>)
 80087a0:	4604      	mov	r4, r0
 80087a2:	4608      	mov	r0, r1
 80087a4:	4611      	mov	r1, r2
 80087a6:	2200      	movs	r2, #0
 80087a8:	602a      	str	r2, [r5, #0]
 80087aa:	461a      	mov	r2, r3
 80087ac:	f7f9 feb1 	bl	8002512 <_read>
 80087b0:	1c43      	adds	r3, r0, #1
 80087b2:	d102      	bne.n	80087ba <_read_r+0x1e>
 80087b4:	682b      	ldr	r3, [r5, #0]
 80087b6:	b103      	cbz	r3, 80087ba <_read_r+0x1e>
 80087b8:	6023      	str	r3, [r4, #0]
 80087ba:	bd38      	pop	{r3, r4, r5, pc}
 80087bc:	20000b10 	.word	0x20000b10

080087c0 <_sbrk_r>:
 80087c0:	b538      	push	{r3, r4, r5, lr}
 80087c2:	4d06      	ldr	r5, [pc, #24]	@ (80087dc <_sbrk_r+0x1c>)
 80087c4:	2300      	movs	r3, #0
 80087c6:	4604      	mov	r4, r0
 80087c8:	4608      	mov	r0, r1
 80087ca:	602b      	str	r3, [r5, #0]
 80087cc:	f7f9 ff1a 	bl	8002604 <_sbrk>
 80087d0:	1c43      	adds	r3, r0, #1
 80087d2:	d102      	bne.n	80087da <_sbrk_r+0x1a>
 80087d4:	682b      	ldr	r3, [r5, #0]
 80087d6:	b103      	cbz	r3, 80087da <_sbrk_r+0x1a>
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	bd38      	pop	{r3, r4, r5, pc}
 80087dc:	20000b10 	.word	0x20000b10

080087e0 <_times_r>:
 80087e0:	4608      	mov	r0, r1
 80087e2:	f7f9 bf03 	b.w	80025ec <_times>
	...

080087e8 <_write_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	4d07      	ldr	r5, [pc, #28]	@ (8008808 <_write_r+0x20>)
 80087ec:	4604      	mov	r4, r0
 80087ee:	4608      	mov	r0, r1
 80087f0:	4611      	mov	r1, r2
 80087f2:	2200      	movs	r2, #0
 80087f4:	602a      	str	r2, [r5, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	f7f9 fea8 	bl	800254c <_write>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	d102      	bne.n	8008806 <_write_r+0x1e>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	b103      	cbz	r3, 8008806 <_write_r+0x1e>
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	bd38      	pop	{r3, r4, r5, pc}
 8008808:	20000b10 	.word	0x20000b10

0800880c <__errno>:
 800880c:	4b01      	ldr	r3, [pc, #4]	@ (8008814 <__errno+0x8>)
 800880e:	6818      	ldr	r0, [r3, #0]
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	20000588 	.word	0x20000588

08008818 <__libc_init_array>:
 8008818:	b570      	push	{r4, r5, r6, lr}
 800881a:	4d0d      	ldr	r5, [pc, #52]	@ (8008850 <__libc_init_array+0x38>)
 800881c:	4c0d      	ldr	r4, [pc, #52]	@ (8008854 <__libc_init_array+0x3c>)
 800881e:	1b64      	subs	r4, r4, r5
 8008820:	10a4      	asrs	r4, r4, #2
 8008822:	2600      	movs	r6, #0
 8008824:	42a6      	cmp	r6, r4
 8008826:	d109      	bne.n	800883c <__libc_init_array+0x24>
 8008828:	4d0b      	ldr	r5, [pc, #44]	@ (8008858 <__libc_init_array+0x40>)
 800882a:	4c0c      	ldr	r4, [pc, #48]	@ (800885c <__libc_init_array+0x44>)
 800882c:	f003 fa1c 	bl	800bc68 <_init>
 8008830:	1b64      	subs	r4, r4, r5
 8008832:	10a4      	asrs	r4, r4, #2
 8008834:	2600      	movs	r6, #0
 8008836:	42a6      	cmp	r6, r4
 8008838:	d105      	bne.n	8008846 <__libc_init_array+0x2e>
 800883a:	bd70      	pop	{r4, r5, r6, pc}
 800883c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008840:	4798      	blx	r3
 8008842:	3601      	adds	r6, #1
 8008844:	e7ee      	b.n	8008824 <__libc_init_array+0xc>
 8008846:	f855 3b04 	ldr.w	r3, [r5], #4
 800884a:	4798      	blx	r3
 800884c:	3601      	adds	r6, #1
 800884e:	e7f2      	b.n	8008836 <__libc_init_array+0x1e>
 8008850:	0800cdcc 	.word	0x0800cdcc
 8008854:	0800cdcc 	.word	0x0800cdcc
 8008858:	0800cdcc 	.word	0x0800cdcc
 800885c:	0800cdd0 	.word	0x0800cdd0

08008860 <__retarget_lock_init_recursive>:
 8008860:	4770      	bx	lr

08008862 <__retarget_lock_acquire_recursive>:
 8008862:	4770      	bx	lr

08008864 <__retarget_lock_release_recursive>:
 8008864:	4770      	bx	lr

08008866 <memcpy>:
 8008866:	440a      	add	r2, r1
 8008868:	4291      	cmp	r1, r2
 800886a:	f100 33ff 	add.w	r3, r0, #4294967295
 800886e:	d100      	bne.n	8008872 <memcpy+0xc>
 8008870:	4770      	bx	lr
 8008872:	b510      	push	{r4, lr}
 8008874:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008878:	f803 4f01 	strb.w	r4, [r3, #1]!
 800887c:	4291      	cmp	r1, r2
 800887e:	d1f9      	bne.n	8008874 <memcpy+0xe>
 8008880:	bd10      	pop	{r4, pc}
	...

08008884 <nanf>:
 8008884:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800888c <nanf+0x8>
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	7fc00000 	.word	0x7fc00000

08008890 <__assert_func>:
 8008890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008892:	4614      	mov	r4, r2
 8008894:	461a      	mov	r2, r3
 8008896:	4b09      	ldr	r3, [pc, #36]	@ (80088bc <__assert_func+0x2c>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4605      	mov	r5, r0
 800889c:	68d8      	ldr	r0, [r3, #12]
 800889e:	b954      	cbnz	r4, 80088b6 <__assert_func+0x26>
 80088a0:	4b07      	ldr	r3, [pc, #28]	@ (80088c0 <__assert_func+0x30>)
 80088a2:	461c      	mov	r4, r3
 80088a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088a8:	9100      	str	r1, [sp, #0]
 80088aa:	462b      	mov	r3, r5
 80088ac:	4905      	ldr	r1, [pc, #20]	@ (80088c4 <__assert_func+0x34>)
 80088ae:	f002 fd23 	bl	800b2f8 <fiprintf>
 80088b2:	f002 fded 	bl	800b490 <abort>
 80088b6:	4b04      	ldr	r3, [pc, #16]	@ (80088c8 <__assert_func+0x38>)
 80088b8:	e7f4      	b.n	80088a4 <__assert_func+0x14>
 80088ba:	bf00      	nop
 80088bc:	20000588 	.word	0x20000588
 80088c0:	0800ca0a 	.word	0x0800ca0a
 80088c4:	0800c9dc 	.word	0x0800c9dc
 80088c8:	0800c9cf 	.word	0x0800c9cf

080088cc <quorem>:
 80088cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d0:	6903      	ldr	r3, [r0, #16]
 80088d2:	690c      	ldr	r4, [r1, #16]
 80088d4:	42a3      	cmp	r3, r4
 80088d6:	4607      	mov	r7, r0
 80088d8:	db7e      	blt.n	80089d8 <quorem+0x10c>
 80088da:	3c01      	subs	r4, #1
 80088dc:	f101 0814 	add.w	r8, r1, #20
 80088e0:	00a3      	lsls	r3, r4, #2
 80088e2:	f100 0514 	add.w	r5, r0, #20
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088ec:	9301      	str	r3, [sp, #4]
 80088ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088f6:	3301      	adds	r3, #1
 80088f8:	429a      	cmp	r2, r3
 80088fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8008902:	d32e      	bcc.n	8008962 <quorem+0x96>
 8008904:	f04f 0a00 	mov.w	sl, #0
 8008908:	46c4      	mov	ip, r8
 800890a:	46ae      	mov	lr, r5
 800890c:	46d3      	mov	fp, sl
 800890e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008912:	b298      	uxth	r0, r3
 8008914:	fb06 a000 	mla	r0, r6, r0, sl
 8008918:	0c02      	lsrs	r2, r0, #16
 800891a:	0c1b      	lsrs	r3, r3, #16
 800891c:	fb06 2303 	mla	r3, r6, r3, r2
 8008920:	f8de 2000 	ldr.w	r2, [lr]
 8008924:	b280      	uxth	r0, r0
 8008926:	b292      	uxth	r2, r2
 8008928:	1a12      	subs	r2, r2, r0
 800892a:	445a      	add	r2, fp
 800892c:	f8de 0000 	ldr.w	r0, [lr]
 8008930:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008934:	b29b      	uxth	r3, r3
 8008936:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800893a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800893e:	b292      	uxth	r2, r2
 8008940:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008944:	45e1      	cmp	r9, ip
 8008946:	f84e 2b04 	str.w	r2, [lr], #4
 800894a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800894e:	d2de      	bcs.n	800890e <quorem+0x42>
 8008950:	9b00      	ldr	r3, [sp, #0]
 8008952:	58eb      	ldr	r3, [r5, r3]
 8008954:	b92b      	cbnz	r3, 8008962 <quorem+0x96>
 8008956:	9b01      	ldr	r3, [sp, #4]
 8008958:	3b04      	subs	r3, #4
 800895a:	429d      	cmp	r5, r3
 800895c:	461a      	mov	r2, r3
 800895e:	d32f      	bcc.n	80089c0 <quorem+0xf4>
 8008960:	613c      	str	r4, [r7, #16]
 8008962:	4638      	mov	r0, r7
 8008964:	f001 f90e 	bl	8009b84 <__mcmp>
 8008968:	2800      	cmp	r0, #0
 800896a:	db25      	blt.n	80089b8 <quorem+0xec>
 800896c:	4629      	mov	r1, r5
 800896e:	2000      	movs	r0, #0
 8008970:	f858 2b04 	ldr.w	r2, [r8], #4
 8008974:	f8d1 c000 	ldr.w	ip, [r1]
 8008978:	fa1f fe82 	uxth.w	lr, r2
 800897c:	fa1f f38c 	uxth.w	r3, ip
 8008980:	eba3 030e 	sub.w	r3, r3, lr
 8008984:	4403      	add	r3, r0
 8008986:	0c12      	lsrs	r2, r2, #16
 8008988:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800898c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008990:	b29b      	uxth	r3, r3
 8008992:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008996:	45c1      	cmp	r9, r8
 8008998:	f841 3b04 	str.w	r3, [r1], #4
 800899c:	ea4f 4022 	mov.w	r0, r2, asr #16
 80089a0:	d2e6      	bcs.n	8008970 <quorem+0xa4>
 80089a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089aa:	b922      	cbnz	r2, 80089b6 <quorem+0xea>
 80089ac:	3b04      	subs	r3, #4
 80089ae:	429d      	cmp	r5, r3
 80089b0:	461a      	mov	r2, r3
 80089b2:	d30b      	bcc.n	80089cc <quorem+0x100>
 80089b4:	613c      	str	r4, [r7, #16]
 80089b6:	3601      	adds	r6, #1
 80089b8:	4630      	mov	r0, r6
 80089ba:	b003      	add	sp, #12
 80089bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c0:	6812      	ldr	r2, [r2, #0]
 80089c2:	3b04      	subs	r3, #4
 80089c4:	2a00      	cmp	r2, #0
 80089c6:	d1cb      	bne.n	8008960 <quorem+0x94>
 80089c8:	3c01      	subs	r4, #1
 80089ca:	e7c6      	b.n	800895a <quorem+0x8e>
 80089cc:	6812      	ldr	r2, [r2, #0]
 80089ce:	3b04      	subs	r3, #4
 80089d0:	2a00      	cmp	r2, #0
 80089d2:	d1ef      	bne.n	80089b4 <quorem+0xe8>
 80089d4:	3c01      	subs	r4, #1
 80089d6:	e7ea      	b.n	80089ae <quorem+0xe2>
 80089d8:	2000      	movs	r0, #0
 80089da:	e7ee      	b.n	80089ba <quorem+0xee>
 80089dc:	0000      	movs	r0, r0
	...

080089e0 <_dtoa_r>:
 80089e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e4:	69c7      	ldr	r7, [r0, #28]
 80089e6:	b099      	sub	sp, #100	@ 0x64
 80089e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80089ec:	ec55 4b10 	vmov	r4, r5, d0
 80089f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80089f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80089f4:	4683      	mov	fp, r0
 80089f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80089f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80089fa:	b97f      	cbnz	r7, 8008a1c <_dtoa_r+0x3c>
 80089fc:	2010      	movs	r0, #16
 80089fe:	f7fe fd69 	bl	80074d4 <malloc>
 8008a02:	4602      	mov	r2, r0
 8008a04:	f8cb 001c 	str.w	r0, [fp, #28]
 8008a08:	b920      	cbnz	r0, 8008a14 <_dtoa_r+0x34>
 8008a0a:	4ba7      	ldr	r3, [pc, #668]	@ (8008ca8 <_dtoa_r+0x2c8>)
 8008a0c:	21ef      	movs	r1, #239	@ 0xef
 8008a0e:	48a7      	ldr	r0, [pc, #668]	@ (8008cac <_dtoa_r+0x2cc>)
 8008a10:	f7ff ff3e 	bl	8008890 <__assert_func>
 8008a14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008a18:	6007      	str	r7, [r0, #0]
 8008a1a:	60c7      	str	r7, [r0, #12]
 8008a1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008a20:	6819      	ldr	r1, [r3, #0]
 8008a22:	b159      	cbz	r1, 8008a3c <_dtoa_r+0x5c>
 8008a24:	685a      	ldr	r2, [r3, #4]
 8008a26:	604a      	str	r2, [r1, #4]
 8008a28:	2301      	movs	r3, #1
 8008a2a:	4093      	lsls	r3, r2
 8008a2c:	608b      	str	r3, [r1, #8]
 8008a2e:	4658      	mov	r0, fp
 8008a30:	f000 fe24 	bl	800967c <_Bfree>
 8008a34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	601a      	str	r2, [r3, #0]
 8008a3c:	1e2b      	subs	r3, r5, #0
 8008a3e:	bfb9      	ittee	lt
 8008a40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008a44:	9303      	strlt	r3, [sp, #12]
 8008a46:	2300      	movge	r3, #0
 8008a48:	6033      	strge	r3, [r6, #0]
 8008a4a:	9f03      	ldr	r7, [sp, #12]
 8008a4c:	4b98      	ldr	r3, [pc, #608]	@ (8008cb0 <_dtoa_r+0x2d0>)
 8008a4e:	bfbc      	itt	lt
 8008a50:	2201      	movlt	r2, #1
 8008a52:	6032      	strlt	r2, [r6, #0]
 8008a54:	43bb      	bics	r3, r7
 8008a56:	d112      	bne.n	8008a7e <_dtoa_r+0x9e>
 8008a58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008a5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008a5e:	6013      	str	r3, [r2, #0]
 8008a60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008a64:	4323      	orrs	r3, r4
 8008a66:	f000 854d 	beq.w	8009504 <_dtoa_r+0xb24>
 8008a6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a6c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008cc4 <_dtoa_r+0x2e4>
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 854f 	beq.w	8009514 <_dtoa_r+0xb34>
 8008a76:	f10a 0303 	add.w	r3, sl, #3
 8008a7a:	f000 bd49 	b.w	8009510 <_dtoa_r+0xb30>
 8008a7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a82:	2200      	movs	r2, #0
 8008a84:	ec51 0b17 	vmov	r0, r1, d7
 8008a88:	2300      	movs	r3, #0
 8008a8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008a8e:	f7f8 f823 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a92:	4680      	mov	r8, r0
 8008a94:	b158      	cbz	r0, 8008aae <_dtoa_r+0xce>
 8008a96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008a98:	2301      	movs	r3, #1
 8008a9a:	6013      	str	r3, [r2, #0]
 8008a9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a9e:	b113      	cbz	r3, 8008aa6 <_dtoa_r+0xc6>
 8008aa0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008aa2:	4b84      	ldr	r3, [pc, #528]	@ (8008cb4 <_dtoa_r+0x2d4>)
 8008aa4:	6013      	str	r3, [r2, #0]
 8008aa6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008cc8 <_dtoa_r+0x2e8>
 8008aaa:	f000 bd33 	b.w	8009514 <_dtoa_r+0xb34>
 8008aae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008ab2:	aa16      	add	r2, sp, #88	@ 0x58
 8008ab4:	a917      	add	r1, sp, #92	@ 0x5c
 8008ab6:	4658      	mov	r0, fp
 8008ab8:	f001 f984 	bl	8009dc4 <__d2b>
 8008abc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008ac0:	4681      	mov	r9, r0
 8008ac2:	2e00      	cmp	r6, #0
 8008ac4:	d077      	beq.n	8008bb6 <_dtoa_r+0x1d6>
 8008ac6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ac8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ad0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ad4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008ad8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008adc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	4b74      	ldr	r3, [pc, #464]	@ (8008cb8 <_dtoa_r+0x2d8>)
 8008ae6:	f7f7 fbd7 	bl	8000298 <__aeabi_dsub>
 8008aea:	a369      	add	r3, pc, #420	@ (adr r3, 8008c90 <_dtoa_r+0x2b0>)
 8008aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af0:	f7f7 fd8a 	bl	8000608 <__aeabi_dmul>
 8008af4:	a368      	add	r3, pc, #416	@ (adr r3, 8008c98 <_dtoa_r+0x2b8>)
 8008af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afa:	f7f7 fbcf 	bl	800029c <__adddf3>
 8008afe:	4604      	mov	r4, r0
 8008b00:	4630      	mov	r0, r6
 8008b02:	460d      	mov	r5, r1
 8008b04:	f7f7 fd16 	bl	8000534 <__aeabi_i2d>
 8008b08:	a365      	add	r3, pc, #404	@ (adr r3, 8008ca0 <_dtoa_r+0x2c0>)
 8008b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0e:	f7f7 fd7b 	bl	8000608 <__aeabi_dmul>
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	4620      	mov	r0, r4
 8008b18:	4629      	mov	r1, r5
 8008b1a:	f7f7 fbbf 	bl	800029c <__adddf3>
 8008b1e:	4604      	mov	r4, r0
 8008b20:	460d      	mov	r5, r1
 8008b22:	f7f8 f821 	bl	8000b68 <__aeabi_d2iz>
 8008b26:	2200      	movs	r2, #0
 8008b28:	4607      	mov	r7, r0
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	4629      	mov	r1, r5
 8008b30:	f7f7 ffdc 	bl	8000aec <__aeabi_dcmplt>
 8008b34:	b140      	cbz	r0, 8008b48 <_dtoa_r+0x168>
 8008b36:	4638      	mov	r0, r7
 8008b38:	f7f7 fcfc 	bl	8000534 <__aeabi_i2d>
 8008b3c:	4622      	mov	r2, r4
 8008b3e:	462b      	mov	r3, r5
 8008b40:	f7f7 ffca 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b44:	b900      	cbnz	r0, 8008b48 <_dtoa_r+0x168>
 8008b46:	3f01      	subs	r7, #1
 8008b48:	2f16      	cmp	r7, #22
 8008b4a:	d851      	bhi.n	8008bf0 <_dtoa_r+0x210>
 8008b4c:	4b5b      	ldr	r3, [pc, #364]	@ (8008cbc <_dtoa_r+0x2dc>)
 8008b4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b5a:	f7f7 ffc7 	bl	8000aec <__aeabi_dcmplt>
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	d048      	beq.n	8008bf4 <_dtoa_r+0x214>
 8008b62:	3f01      	subs	r7, #1
 8008b64:	2300      	movs	r3, #0
 8008b66:	9312      	str	r3, [sp, #72]	@ 0x48
 8008b68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008b6a:	1b9b      	subs	r3, r3, r6
 8008b6c:	1e5a      	subs	r2, r3, #1
 8008b6e:	bf44      	itt	mi
 8008b70:	f1c3 0801 	rsbmi	r8, r3, #1
 8008b74:	2300      	movmi	r3, #0
 8008b76:	9208      	str	r2, [sp, #32]
 8008b78:	bf54      	ite	pl
 8008b7a:	f04f 0800 	movpl.w	r8, #0
 8008b7e:	9308      	strmi	r3, [sp, #32]
 8008b80:	2f00      	cmp	r7, #0
 8008b82:	db39      	blt.n	8008bf8 <_dtoa_r+0x218>
 8008b84:	9b08      	ldr	r3, [sp, #32]
 8008b86:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008b88:	443b      	add	r3, r7
 8008b8a:	9308      	str	r3, [sp, #32]
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b92:	2b09      	cmp	r3, #9
 8008b94:	d864      	bhi.n	8008c60 <_dtoa_r+0x280>
 8008b96:	2b05      	cmp	r3, #5
 8008b98:	bfc4      	itt	gt
 8008b9a:	3b04      	subgt	r3, #4
 8008b9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ba0:	f1a3 0302 	sub.w	r3, r3, #2
 8008ba4:	bfcc      	ite	gt
 8008ba6:	2400      	movgt	r4, #0
 8008ba8:	2401      	movle	r4, #1
 8008baa:	2b03      	cmp	r3, #3
 8008bac:	d863      	bhi.n	8008c76 <_dtoa_r+0x296>
 8008bae:	e8df f003 	tbb	[pc, r3]
 8008bb2:	372a      	.short	0x372a
 8008bb4:	5535      	.short	0x5535
 8008bb6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008bba:	441e      	add	r6, r3
 8008bbc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008bc0:	2b20      	cmp	r3, #32
 8008bc2:	bfc1      	itttt	gt
 8008bc4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008bc8:	409f      	lslgt	r7, r3
 8008bca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008bce:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008bd2:	bfd6      	itet	le
 8008bd4:	f1c3 0320 	rsble	r3, r3, #32
 8008bd8:	ea47 0003 	orrgt.w	r0, r7, r3
 8008bdc:	fa04 f003 	lslle.w	r0, r4, r3
 8008be0:	f7f7 fc98 	bl	8000514 <__aeabi_ui2d>
 8008be4:	2201      	movs	r2, #1
 8008be6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008bea:	3e01      	subs	r6, #1
 8008bec:	9214      	str	r2, [sp, #80]	@ 0x50
 8008bee:	e777      	b.n	8008ae0 <_dtoa_r+0x100>
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e7b8      	b.n	8008b66 <_dtoa_r+0x186>
 8008bf4:	9012      	str	r0, [sp, #72]	@ 0x48
 8008bf6:	e7b7      	b.n	8008b68 <_dtoa_r+0x188>
 8008bf8:	427b      	negs	r3, r7
 8008bfa:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	eba8 0807 	sub.w	r8, r8, r7
 8008c02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c04:	e7c4      	b.n	8008b90 <_dtoa_r+0x1b0>
 8008c06:	2300      	movs	r3, #0
 8008c08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	dc35      	bgt.n	8008c7c <_dtoa_r+0x29c>
 8008c10:	2301      	movs	r3, #1
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	9307      	str	r3, [sp, #28]
 8008c16:	461a      	mov	r2, r3
 8008c18:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c1a:	e00b      	b.n	8008c34 <_dtoa_r+0x254>
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e7f3      	b.n	8008c08 <_dtoa_r+0x228>
 8008c20:	2300      	movs	r3, #0
 8008c22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c26:	18fb      	adds	r3, r7, r3
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	9307      	str	r3, [sp, #28]
 8008c30:	bfb8      	it	lt
 8008c32:	2301      	movlt	r3, #1
 8008c34:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008c38:	2100      	movs	r1, #0
 8008c3a:	2204      	movs	r2, #4
 8008c3c:	f102 0514 	add.w	r5, r2, #20
 8008c40:	429d      	cmp	r5, r3
 8008c42:	d91f      	bls.n	8008c84 <_dtoa_r+0x2a4>
 8008c44:	6041      	str	r1, [r0, #4]
 8008c46:	4658      	mov	r0, fp
 8008c48:	f000 fcd8 	bl	80095fc <_Balloc>
 8008c4c:	4682      	mov	sl, r0
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	d13c      	bne.n	8008ccc <_dtoa_r+0x2ec>
 8008c52:	4b1b      	ldr	r3, [pc, #108]	@ (8008cc0 <_dtoa_r+0x2e0>)
 8008c54:	4602      	mov	r2, r0
 8008c56:	f240 11af 	movw	r1, #431	@ 0x1af
 8008c5a:	e6d8      	b.n	8008a0e <_dtoa_r+0x2e>
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e7e0      	b.n	8008c22 <_dtoa_r+0x242>
 8008c60:	2401      	movs	r4, #1
 8008c62:	2300      	movs	r3, #0
 8008c64:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c66:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008c68:	f04f 33ff 	mov.w	r3, #4294967295
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	9307      	str	r3, [sp, #28]
 8008c70:	2200      	movs	r2, #0
 8008c72:	2312      	movs	r3, #18
 8008c74:	e7d0      	b.n	8008c18 <_dtoa_r+0x238>
 8008c76:	2301      	movs	r3, #1
 8008c78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c7a:	e7f5      	b.n	8008c68 <_dtoa_r+0x288>
 8008c7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c7e:	9300      	str	r3, [sp, #0]
 8008c80:	9307      	str	r3, [sp, #28]
 8008c82:	e7d7      	b.n	8008c34 <_dtoa_r+0x254>
 8008c84:	3101      	adds	r1, #1
 8008c86:	0052      	lsls	r2, r2, #1
 8008c88:	e7d8      	b.n	8008c3c <_dtoa_r+0x25c>
 8008c8a:	bf00      	nop
 8008c8c:	f3af 8000 	nop.w
 8008c90:	636f4361 	.word	0x636f4361
 8008c94:	3fd287a7 	.word	0x3fd287a7
 8008c98:	8b60c8b3 	.word	0x8b60c8b3
 8008c9c:	3fc68a28 	.word	0x3fc68a28
 8008ca0:	509f79fb 	.word	0x509f79fb
 8008ca4:	3fd34413 	.word	0x3fd34413
 8008ca8:	0800ca18 	.word	0x0800ca18
 8008cac:	0800ca2f 	.word	0x0800ca2f
 8008cb0:	7ff00000 	.word	0x7ff00000
 8008cb4:	0800c9a7 	.word	0x0800c9a7
 8008cb8:	3ff80000 	.word	0x3ff80000
 8008cbc:	0800cb28 	.word	0x0800cb28
 8008cc0:	0800ca87 	.word	0x0800ca87
 8008cc4:	0800ca14 	.word	0x0800ca14
 8008cc8:	0800c9a6 	.word	0x0800c9a6
 8008ccc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008cd0:	6018      	str	r0, [r3, #0]
 8008cd2:	9b07      	ldr	r3, [sp, #28]
 8008cd4:	2b0e      	cmp	r3, #14
 8008cd6:	f200 80a4 	bhi.w	8008e22 <_dtoa_r+0x442>
 8008cda:	2c00      	cmp	r4, #0
 8008cdc:	f000 80a1 	beq.w	8008e22 <_dtoa_r+0x442>
 8008ce0:	2f00      	cmp	r7, #0
 8008ce2:	dd33      	ble.n	8008d4c <_dtoa_r+0x36c>
 8008ce4:	4bad      	ldr	r3, [pc, #692]	@ (8008f9c <_dtoa_r+0x5bc>)
 8008ce6:	f007 020f 	and.w	r2, r7, #15
 8008cea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cee:	ed93 7b00 	vldr	d7, [r3]
 8008cf2:	05f8      	lsls	r0, r7, #23
 8008cf4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008cf8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008cfc:	d516      	bpl.n	8008d2c <_dtoa_r+0x34c>
 8008cfe:	4ba8      	ldr	r3, [pc, #672]	@ (8008fa0 <_dtoa_r+0x5c0>)
 8008d00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d08:	f7f7 fda8 	bl	800085c <__aeabi_ddiv>
 8008d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d10:	f004 040f 	and.w	r4, r4, #15
 8008d14:	2603      	movs	r6, #3
 8008d16:	4da2      	ldr	r5, [pc, #648]	@ (8008fa0 <_dtoa_r+0x5c0>)
 8008d18:	b954      	cbnz	r4, 8008d30 <_dtoa_r+0x350>
 8008d1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d22:	f7f7 fd9b 	bl	800085c <__aeabi_ddiv>
 8008d26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d2a:	e028      	b.n	8008d7e <_dtoa_r+0x39e>
 8008d2c:	2602      	movs	r6, #2
 8008d2e:	e7f2      	b.n	8008d16 <_dtoa_r+0x336>
 8008d30:	07e1      	lsls	r1, r4, #31
 8008d32:	d508      	bpl.n	8008d46 <_dtoa_r+0x366>
 8008d34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d3c:	f7f7 fc64 	bl	8000608 <__aeabi_dmul>
 8008d40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d44:	3601      	adds	r6, #1
 8008d46:	1064      	asrs	r4, r4, #1
 8008d48:	3508      	adds	r5, #8
 8008d4a:	e7e5      	b.n	8008d18 <_dtoa_r+0x338>
 8008d4c:	f000 80d2 	beq.w	8008ef4 <_dtoa_r+0x514>
 8008d50:	427c      	negs	r4, r7
 8008d52:	4b92      	ldr	r3, [pc, #584]	@ (8008f9c <_dtoa_r+0x5bc>)
 8008d54:	4d92      	ldr	r5, [pc, #584]	@ (8008fa0 <_dtoa_r+0x5c0>)
 8008d56:	f004 020f 	and.w	r2, r4, #15
 8008d5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d66:	f7f7 fc4f 	bl	8000608 <__aeabi_dmul>
 8008d6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d6e:	1124      	asrs	r4, r4, #4
 8008d70:	2300      	movs	r3, #0
 8008d72:	2602      	movs	r6, #2
 8008d74:	2c00      	cmp	r4, #0
 8008d76:	f040 80b2 	bne.w	8008ede <_dtoa_r+0x4fe>
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1d3      	bne.n	8008d26 <_dtoa_r+0x346>
 8008d7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008d80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f000 80b7 	beq.w	8008ef8 <_dtoa_r+0x518>
 8008d8a:	4b86      	ldr	r3, [pc, #536]	@ (8008fa4 <_dtoa_r+0x5c4>)
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	4620      	mov	r0, r4
 8008d90:	4629      	mov	r1, r5
 8008d92:	f7f7 feab 	bl	8000aec <__aeabi_dcmplt>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	f000 80ae 	beq.w	8008ef8 <_dtoa_r+0x518>
 8008d9c:	9b07      	ldr	r3, [sp, #28]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f000 80aa 	beq.w	8008ef8 <_dtoa_r+0x518>
 8008da4:	9b00      	ldr	r3, [sp, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	dd37      	ble.n	8008e1a <_dtoa_r+0x43a>
 8008daa:	1e7b      	subs	r3, r7, #1
 8008dac:	9304      	str	r3, [sp, #16]
 8008dae:	4620      	mov	r0, r4
 8008db0:	4b7d      	ldr	r3, [pc, #500]	@ (8008fa8 <_dtoa_r+0x5c8>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	4629      	mov	r1, r5
 8008db6:	f7f7 fc27 	bl	8000608 <__aeabi_dmul>
 8008dba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dbe:	9c00      	ldr	r4, [sp, #0]
 8008dc0:	3601      	adds	r6, #1
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f7f7 fbb6 	bl	8000534 <__aeabi_i2d>
 8008dc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dcc:	f7f7 fc1c 	bl	8000608 <__aeabi_dmul>
 8008dd0:	4b76      	ldr	r3, [pc, #472]	@ (8008fac <_dtoa_r+0x5cc>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f7f7 fa62 	bl	800029c <__adddf3>
 8008dd8:	4605      	mov	r5, r0
 8008dda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008dde:	2c00      	cmp	r4, #0
 8008de0:	f040 808d 	bne.w	8008efe <_dtoa_r+0x51e>
 8008de4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008de8:	4b71      	ldr	r3, [pc, #452]	@ (8008fb0 <_dtoa_r+0x5d0>)
 8008dea:	2200      	movs	r2, #0
 8008dec:	f7f7 fa54 	bl	8000298 <__aeabi_dsub>
 8008df0:	4602      	mov	r2, r0
 8008df2:	460b      	mov	r3, r1
 8008df4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008df8:	462a      	mov	r2, r5
 8008dfa:	4633      	mov	r3, r6
 8008dfc:	f7f7 fe94 	bl	8000b28 <__aeabi_dcmpgt>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	f040 828b 	bne.w	800931c <_dtoa_r+0x93c>
 8008e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e0a:	462a      	mov	r2, r5
 8008e0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008e10:	f7f7 fe6c 	bl	8000aec <__aeabi_dcmplt>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	f040 8128 	bne.w	800906a <_dtoa_r+0x68a>
 8008e1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008e1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008e22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f2c0 815a 	blt.w	80090de <_dtoa_r+0x6fe>
 8008e2a:	2f0e      	cmp	r7, #14
 8008e2c:	f300 8157 	bgt.w	80090de <_dtoa_r+0x6fe>
 8008e30:	4b5a      	ldr	r3, [pc, #360]	@ (8008f9c <_dtoa_r+0x5bc>)
 8008e32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008e36:	ed93 7b00 	vldr	d7, [r3]
 8008e3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	ed8d 7b00 	vstr	d7, [sp]
 8008e42:	da03      	bge.n	8008e4c <_dtoa_r+0x46c>
 8008e44:	9b07      	ldr	r3, [sp, #28]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f340 8101 	ble.w	800904e <_dtoa_r+0x66e>
 8008e4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008e50:	4656      	mov	r6, sl
 8008e52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e56:	4620      	mov	r0, r4
 8008e58:	4629      	mov	r1, r5
 8008e5a:	f7f7 fcff 	bl	800085c <__aeabi_ddiv>
 8008e5e:	f7f7 fe83 	bl	8000b68 <__aeabi_d2iz>
 8008e62:	4680      	mov	r8, r0
 8008e64:	f7f7 fb66 	bl	8000534 <__aeabi_i2d>
 8008e68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e6c:	f7f7 fbcc 	bl	8000608 <__aeabi_dmul>
 8008e70:	4602      	mov	r2, r0
 8008e72:	460b      	mov	r3, r1
 8008e74:	4620      	mov	r0, r4
 8008e76:	4629      	mov	r1, r5
 8008e78:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008e7c:	f7f7 fa0c 	bl	8000298 <__aeabi_dsub>
 8008e80:	f806 4b01 	strb.w	r4, [r6], #1
 8008e84:	9d07      	ldr	r5, [sp, #28]
 8008e86:	eba6 040a 	sub.w	r4, r6, sl
 8008e8a:	42a5      	cmp	r5, r4
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	460b      	mov	r3, r1
 8008e90:	f040 8117 	bne.w	80090c2 <_dtoa_r+0x6e2>
 8008e94:	f7f7 fa02 	bl	800029c <__adddf3>
 8008e98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e9c:	4604      	mov	r4, r0
 8008e9e:	460d      	mov	r5, r1
 8008ea0:	f7f7 fe42 	bl	8000b28 <__aeabi_dcmpgt>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	f040 80f9 	bne.w	800909c <_dtoa_r+0x6bc>
 8008eaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008eae:	4620      	mov	r0, r4
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	f7f7 fe11 	bl	8000ad8 <__aeabi_dcmpeq>
 8008eb6:	b118      	cbz	r0, 8008ec0 <_dtoa_r+0x4e0>
 8008eb8:	f018 0f01 	tst.w	r8, #1
 8008ebc:	f040 80ee 	bne.w	800909c <_dtoa_r+0x6bc>
 8008ec0:	4649      	mov	r1, r9
 8008ec2:	4658      	mov	r0, fp
 8008ec4:	f000 fbda 	bl	800967c <_Bfree>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	7033      	strb	r3, [r6, #0]
 8008ecc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ece:	3701      	adds	r7, #1
 8008ed0:	601f      	str	r7, [r3, #0]
 8008ed2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f000 831d 	beq.w	8009514 <_dtoa_r+0xb34>
 8008eda:	601e      	str	r6, [r3, #0]
 8008edc:	e31a      	b.n	8009514 <_dtoa_r+0xb34>
 8008ede:	07e2      	lsls	r2, r4, #31
 8008ee0:	d505      	bpl.n	8008eee <_dtoa_r+0x50e>
 8008ee2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ee6:	f7f7 fb8f 	bl	8000608 <__aeabi_dmul>
 8008eea:	3601      	adds	r6, #1
 8008eec:	2301      	movs	r3, #1
 8008eee:	1064      	asrs	r4, r4, #1
 8008ef0:	3508      	adds	r5, #8
 8008ef2:	e73f      	b.n	8008d74 <_dtoa_r+0x394>
 8008ef4:	2602      	movs	r6, #2
 8008ef6:	e742      	b.n	8008d7e <_dtoa_r+0x39e>
 8008ef8:	9c07      	ldr	r4, [sp, #28]
 8008efa:	9704      	str	r7, [sp, #16]
 8008efc:	e761      	b.n	8008dc2 <_dtoa_r+0x3e2>
 8008efe:	4b27      	ldr	r3, [pc, #156]	@ (8008f9c <_dtoa_r+0x5bc>)
 8008f00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f0a:	4454      	add	r4, sl
 8008f0c:	2900      	cmp	r1, #0
 8008f0e:	d053      	beq.n	8008fb8 <_dtoa_r+0x5d8>
 8008f10:	4928      	ldr	r1, [pc, #160]	@ (8008fb4 <_dtoa_r+0x5d4>)
 8008f12:	2000      	movs	r0, #0
 8008f14:	f7f7 fca2 	bl	800085c <__aeabi_ddiv>
 8008f18:	4633      	mov	r3, r6
 8008f1a:	462a      	mov	r2, r5
 8008f1c:	f7f7 f9bc 	bl	8000298 <__aeabi_dsub>
 8008f20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f24:	4656      	mov	r6, sl
 8008f26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f2a:	f7f7 fe1d 	bl	8000b68 <__aeabi_d2iz>
 8008f2e:	4605      	mov	r5, r0
 8008f30:	f7f7 fb00 	bl	8000534 <__aeabi_i2d>
 8008f34:	4602      	mov	r2, r0
 8008f36:	460b      	mov	r3, r1
 8008f38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f3c:	f7f7 f9ac 	bl	8000298 <__aeabi_dsub>
 8008f40:	3530      	adds	r5, #48	@ 0x30
 8008f42:	4602      	mov	r2, r0
 8008f44:	460b      	mov	r3, r1
 8008f46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f4a:	f806 5b01 	strb.w	r5, [r6], #1
 8008f4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f52:	f7f7 fdcb 	bl	8000aec <__aeabi_dcmplt>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d171      	bne.n	800903e <_dtoa_r+0x65e>
 8008f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f5e:	4911      	ldr	r1, [pc, #68]	@ (8008fa4 <_dtoa_r+0x5c4>)
 8008f60:	2000      	movs	r0, #0
 8008f62:	f7f7 f999 	bl	8000298 <__aeabi_dsub>
 8008f66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f6a:	f7f7 fdbf 	bl	8000aec <__aeabi_dcmplt>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	f040 8095 	bne.w	800909e <_dtoa_r+0x6be>
 8008f74:	42a6      	cmp	r6, r4
 8008f76:	f43f af50 	beq.w	8008e1a <_dtoa_r+0x43a>
 8008f7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8008fa8 <_dtoa_r+0x5c8>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	f7f7 fb41 	bl	8000608 <__aeabi_dmul>
 8008f86:	4b08      	ldr	r3, [pc, #32]	@ (8008fa8 <_dtoa_r+0x5c8>)
 8008f88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f92:	f7f7 fb39 	bl	8000608 <__aeabi_dmul>
 8008f96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f9a:	e7c4      	b.n	8008f26 <_dtoa_r+0x546>
 8008f9c:	0800cb28 	.word	0x0800cb28
 8008fa0:	0800cb00 	.word	0x0800cb00
 8008fa4:	3ff00000 	.word	0x3ff00000
 8008fa8:	40240000 	.word	0x40240000
 8008fac:	401c0000 	.word	0x401c0000
 8008fb0:	40140000 	.word	0x40140000
 8008fb4:	3fe00000 	.word	0x3fe00000
 8008fb8:	4631      	mov	r1, r6
 8008fba:	4628      	mov	r0, r5
 8008fbc:	f7f7 fb24 	bl	8000608 <__aeabi_dmul>
 8008fc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008fc4:	9415      	str	r4, [sp, #84]	@ 0x54
 8008fc6:	4656      	mov	r6, sl
 8008fc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fcc:	f7f7 fdcc 	bl	8000b68 <__aeabi_d2iz>
 8008fd0:	4605      	mov	r5, r0
 8008fd2:	f7f7 faaf 	bl	8000534 <__aeabi_i2d>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fde:	f7f7 f95b 	bl	8000298 <__aeabi_dsub>
 8008fe2:	3530      	adds	r5, #48	@ 0x30
 8008fe4:	f806 5b01 	strb.w	r5, [r6], #1
 8008fe8:	4602      	mov	r2, r0
 8008fea:	460b      	mov	r3, r1
 8008fec:	42a6      	cmp	r6, r4
 8008fee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ff2:	f04f 0200 	mov.w	r2, #0
 8008ff6:	d124      	bne.n	8009042 <_dtoa_r+0x662>
 8008ff8:	4bac      	ldr	r3, [pc, #688]	@ (80092ac <_dtoa_r+0x8cc>)
 8008ffa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008ffe:	f7f7 f94d 	bl	800029c <__adddf3>
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800900a:	f7f7 fd8d 	bl	8000b28 <__aeabi_dcmpgt>
 800900e:	2800      	cmp	r0, #0
 8009010:	d145      	bne.n	800909e <_dtoa_r+0x6be>
 8009012:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009016:	49a5      	ldr	r1, [pc, #660]	@ (80092ac <_dtoa_r+0x8cc>)
 8009018:	2000      	movs	r0, #0
 800901a:	f7f7 f93d 	bl	8000298 <__aeabi_dsub>
 800901e:	4602      	mov	r2, r0
 8009020:	460b      	mov	r3, r1
 8009022:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009026:	f7f7 fd61 	bl	8000aec <__aeabi_dcmplt>
 800902a:	2800      	cmp	r0, #0
 800902c:	f43f aef5 	beq.w	8008e1a <_dtoa_r+0x43a>
 8009030:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009032:	1e73      	subs	r3, r6, #1
 8009034:	9315      	str	r3, [sp, #84]	@ 0x54
 8009036:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800903a:	2b30      	cmp	r3, #48	@ 0x30
 800903c:	d0f8      	beq.n	8009030 <_dtoa_r+0x650>
 800903e:	9f04      	ldr	r7, [sp, #16]
 8009040:	e73e      	b.n	8008ec0 <_dtoa_r+0x4e0>
 8009042:	4b9b      	ldr	r3, [pc, #620]	@ (80092b0 <_dtoa_r+0x8d0>)
 8009044:	f7f7 fae0 	bl	8000608 <__aeabi_dmul>
 8009048:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800904c:	e7bc      	b.n	8008fc8 <_dtoa_r+0x5e8>
 800904e:	d10c      	bne.n	800906a <_dtoa_r+0x68a>
 8009050:	4b98      	ldr	r3, [pc, #608]	@ (80092b4 <_dtoa_r+0x8d4>)
 8009052:	2200      	movs	r2, #0
 8009054:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009058:	f7f7 fad6 	bl	8000608 <__aeabi_dmul>
 800905c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009060:	f7f7 fd58 	bl	8000b14 <__aeabi_dcmpge>
 8009064:	2800      	cmp	r0, #0
 8009066:	f000 8157 	beq.w	8009318 <_dtoa_r+0x938>
 800906a:	2400      	movs	r4, #0
 800906c:	4625      	mov	r5, r4
 800906e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009070:	43db      	mvns	r3, r3
 8009072:	9304      	str	r3, [sp, #16]
 8009074:	4656      	mov	r6, sl
 8009076:	2700      	movs	r7, #0
 8009078:	4621      	mov	r1, r4
 800907a:	4658      	mov	r0, fp
 800907c:	f000 fafe 	bl	800967c <_Bfree>
 8009080:	2d00      	cmp	r5, #0
 8009082:	d0dc      	beq.n	800903e <_dtoa_r+0x65e>
 8009084:	b12f      	cbz	r7, 8009092 <_dtoa_r+0x6b2>
 8009086:	42af      	cmp	r7, r5
 8009088:	d003      	beq.n	8009092 <_dtoa_r+0x6b2>
 800908a:	4639      	mov	r1, r7
 800908c:	4658      	mov	r0, fp
 800908e:	f000 faf5 	bl	800967c <_Bfree>
 8009092:	4629      	mov	r1, r5
 8009094:	4658      	mov	r0, fp
 8009096:	f000 faf1 	bl	800967c <_Bfree>
 800909a:	e7d0      	b.n	800903e <_dtoa_r+0x65e>
 800909c:	9704      	str	r7, [sp, #16]
 800909e:	4633      	mov	r3, r6
 80090a0:	461e      	mov	r6, r3
 80090a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090a6:	2a39      	cmp	r2, #57	@ 0x39
 80090a8:	d107      	bne.n	80090ba <_dtoa_r+0x6da>
 80090aa:	459a      	cmp	sl, r3
 80090ac:	d1f8      	bne.n	80090a0 <_dtoa_r+0x6c0>
 80090ae:	9a04      	ldr	r2, [sp, #16]
 80090b0:	3201      	adds	r2, #1
 80090b2:	9204      	str	r2, [sp, #16]
 80090b4:	2230      	movs	r2, #48	@ 0x30
 80090b6:	f88a 2000 	strb.w	r2, [sl]
 80090ba:	781a      	ldrb	r2, [r3, #0]
 80090bc:	3201      	adds	r2, #1
 80090be:	701a      	strb	r2, [r3, #0]
 80090c0:	e7bd      	b.n	800903e <_dtoa_r+0x65e>
 80090c2:	4b7b      	ldr	r3, [pc, #492]	@ (80092b0 <_dtoa_r+0x8d0>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	f7f7 fa9f 	bl	8000608 <__aeabi_dmul>
 80090ca:	2200      	movs	r2, #0
 80090cc:	2300      	movs	r3, #0
 80090ce:	4604      	mov	r4, r0
 80090d0:	460d      	mov	r5, r1
 80090d2:	f7f7 fd01 	bl	8000ad8 <__aeabi_dcmpeq>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	f43f aebb 	beq.w	8008e52 <_dtoa_r+0x472>
 80090dc:	e6f0      	b.n	8008ec0 <_dtoa_r+0x4e0>
 80090de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80090e0:	2a00      	cmp	r2, #0
 80090e2:	f000 80db 	beq.w	800929c <_dtoa_r+0x8bc>
 80090e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090e8:	2a01      	cmp	r2, #1
 80090ea:	f300 80bf 	bgt.w	800926c <_dtoa_r+0x88c>
 80090ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80090f0:	2a00      	cmp	r2, #0
 80090f2:	f000 80b7 	beq.w	8009264 <_dtoa_r+0x884>
 80090f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80090fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80090fc:	4646      	mov	r6, r8
 80090fe:	9a08      	ldr	r2, [sp, #32]
 8009100:	2101      	movs	r1, #1
 8009102:	441a      	add	r2, r3
 8009104:	4658      	mov	r0, fp
 8009106:	4498      	add	r8, r3
 8009108:	9208      	str	r2, [sp, #32]
 800910a:	f000 fbb5 	bl	8009878 <__i2b>
 800910e:	4605      	mov	r5, r0
 8009110:	b15e      	cbz	r6, 800912a <_dtoa_r+0x74a>
 8009112:	9b08      	ldr	r3, [sp, #32]
 8009114:	2b00      	cmp	r3, #0
 8009116:	dd08      	ble.n	800912a <_dtoa_r+0x74a>
 8009118:	42b3      	cmp	r3, r6
 800911a:	9a08      	ldr	r2, [sp, #32]
 800911c:	bfa8      	it	ge
 800911e:	4633      	movge	r3, r6
 8009120:	eba8 0803 	sub.w	r8, r8, r3
 8009124:	1af6      	subs	r6, r6, r3
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	9308      	str	r3, [sp, #32]
 800912a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800912c:	b1f3      	cbz	r3, 800916c <_dtoa_r+0x78c>
 800912e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009130:	2b00      	cmp	r3, #0
 8009132:	f000 80b7 	beq.w	80092a4 <_dtoa_r+0x8c4>
 8009136:	b18c      	cbz	r4, 800915c <_dtoa_r+0x77c>
 8009138:	4629      	mov	r1, r5
 800913a:	4622      	mov	r2, r4
 800913c:	4658      	mov	r0, fp
 800913e:	f000 fc5b 	bl	80099f8 <__pow5mult>
 8009142:	464a      	mov	r2, r9
 8009144:	4601      	mov	r1, r0
 8009146:	4605      	mov	r5, r0
 8009148:	4658      	mov	r0, fp
 800914a:	f000 fbab 	bl	80098a4 <__multiply>
 800914e:	4649      	mov	r1, r9
 8009150:	9004      	str	r0, [sp, #16]
 8009152:	4658      	mov	r0, fp
 8009154:	f000 fa92 	bl	800967c <_Bfree>
 8009158:	9b04      	ldr	r3, [sp, #16]
 800915a:	4699      	mov	r9, r3
 800915c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800915e:	1b1a      	subs	r2, r3, r4
 8009160:	d004      	beq.n	800916c <_dtoa_r+0x78c>
 8009162:	4649      	mov	r1, r9
 8009164:	4658      	mov	r0, fp
 8009166:	f000 fc47 	bl	80099f8 <__pow5mult>
 800916a:	4681      	mov	r9, r0
 800916c:	2101      	movs	r1, #1
 800916e:	4658      	mov	r0, fp
 8009170:	f000 fb82 	bl	8009878 <__i2b>
 8009174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009176:	4604      	mov	r4, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 81cf 	beq.w	800951c <_dtoa_r+0xb3c>
 800917e:	461a      	mov	r2, r3
 8009180:	4601      	mov	r1, r0
 8009182:	4658      	mov	r0, fp
 8009184:	f000 fc38 	bl	80099f8 <__pow5mult>
 8009188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800918a:	2b01      	cmp	r3, #1
 800918c:	4604      	mov	r4, r0
 800918e:	f300 8095 	bgt.w	80092bc <_dtoa_r+0x8dc>
 8009192:	9b02      	ldr	r3, [sp, #8]
 8009194:	2b00      	cmp	r3, #0
 8009196:	f040 8087 	bne.w	80092a8 <_dtoa_r+0x8c8>
 800919a:	9b03      	ldr	r3, [sp, #12]
 800919c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f040 8089 	bne.w	80092b8 <_dtoa_r+0x8d8>
 80091a6:	9b03      	ldr	r3, [sp, #12]
 80091a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80091ac:	0d1b      	lsrs	r3, r3, #20
 80091ae:	051b      	lsls	r3, r3, #20
 80091b0:	b12b      	cbz	r3, 80091be <_dtoa_r+0x7de>
 80091b2:	9b08      	ldr	r3, [sp, #32]
 80091b4:	3301      	adds	r3, #1
 80091b6:	9308      	str	r3, [sp, #32]
 80091b8:	f108 0801 	add.w	r8, r8, #1
 80091bc:	2301      	movs	r3, #1
 80091be:	930a      	str	r3, [sp, #40]	@ 0x28
 80091c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f000 81b0 	beq.w	8009528 <_dtoa_r+0xb48>
 80091c8:	6923      	ldr	r3, [r4, #16]
 80091ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80091ce:	6918      	ldr	r0, [r3, #16]
 80091d0:	f000 fb06 	bl	80097e0 <__hi0bits>
 80091d4:	f1c0 0020 	rsb	r0, r0, #32
 80091d8:	9b08      	ldr	r3, [sp, #32]
 80091da:	4418      	add	r0, r3
 80091dc:	f010 001f 	ands.w	r0, r0, #31
 80091e0:	d077      	beq.n	80092d2 <_dtoa_r+0x8f2>
 80091e2:	f1c0 0320 	rsb	r3, r0, #32
 80091e6:	2b04      	cmp	r3, #4
 80091e8:	dd6b      	ble.n	80092c2 <_dtoa_r+0x8e2>
 80091ea:	9b08      	ldr	r3, [sp, #32]
 80091ec:	f1c0 001c 	rsb	r0, r0, #28
 80091f0:	4403      	add	r3, r0
 80091f2:	4480      	add	r8, r0
 80091f4:	4406      	add	r6, r0
 80091f6:	9308      	str	r3, [sp, #32]
 80091f8:	f1b8 0f00 	cmp.w	r8, #0
 80091fc:	dd05      	ble.n	800920a <_dtoa_r+0x82a>
 80091fe:	4649      	mov	r1, r9
 8009200:	4642      	mov	r2, r8
 8009202:	4658      	mov	r0, fp
 8009204:	f000 fc52 	bl	8009aac <__lshift>
 8009208:	4681      	mov	r9, r0
 800920a:	9b08      	ldr	r3, [sp, #32]
 800920c:	2b00      	cmp	r3, #0
 800920e:	dd05      	ble.n	800921c <_dtoa_r+0x83c>
 8009210:	4621      	mov	r1, r4
 8009212:	461a      	mov	r2, r3
 8009214:	4658      	mov	r0, fp
 8009216:	f000 fc49 	bl	8009aac <__lshift>
 800921a:	4604      	mov	r4, r0
 800921c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800921e:	2b00      	cmp	r3, #0
 8009220:	d059      	beq.n	80092d6 <_dtoa_r+0x8f6>
 8009222:	4621      	mov	r1, r4
 8009224:	4648      	mov	r0, r9
 8009226:	f000 fcad 	bl	8009b84 <__mcmp>
 800922a:	2800      	cmp	r0, #0
 800922c:	da53      	bge.n	80092d6 <_dtoa_r+0x8f6>
 800922e:	1e7b      	subs	r3, r7, #1
 8009230:	9304      	str	r3, [sp, #16]
 8009232:	4649      	mov	r1, r9
 8009234:	2300      	movs	r3, #0
 8009236:	220a      	movs	r2, #10
 8009238:	4658      	mov	r0, fp
 800923a:	f000 fa41 	bl	80096c0 <__multadd>
 800923e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009240:	4681      	mov	r9, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	f000 8172 	beq.w	800952c <_dtoa_r+0xb4c>
 8009248:	2300      	movs	r3, #0
 800924a:	4629      	mov	r1, r5
 800924c:	220a      	movs	r2, #10
 800924e:	4658      	mov	r0, fp
 8009250:	f000 fa36 	bl	80096c0 <__multadd>
 8009254:	9b00      	ldr	r3, [sp, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	4605      	mov	r5, r0
 800925a:	dc67      	bgt.n	800932c <_dtoa_r+0x94c>
 800925c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800925e:	2b02      	cmp	r3, #2
 8009260:	dc41      	bgt.n	80092e6 <_dtoa_r+0x906>
 8009262:	e063      	b.n	800932c <_dtoa_r+0x94c>
 8009264:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009266:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800926a:	e746      	b.n	80090fa <_dtoa_r+0x71a>
 800926c:	9b07      	ldr	r3, [sp, #28]
 800926e:	1e5c      	subs	r4, r3, #1
 8009270:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009272:	42a3      	cmp	r3, r4
 8009274:	bfbf      	itttt	lt
 8009276:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009278:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800927a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800927c:	1ae3      	sublt	r3, r4, r3
 800927e:	bfb4      	ite	lt
 8009280:	18d2      	addlt	r2, r2, r3
 8009282:	1b1c      	subge	r4, r3, r4
 8009284:	9b07      	ldr	r3, [sp, #28]
 8009286:	bfbc      	itt	lt
 8009288:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800928a:	2400      	movlt	r4, #0
 800928c:	2b00      	cmp	r3, #0
 800928e:	bfb5      	itete	lt
 8009290:	eba8 0603 	sublt.w	r6, r8, r3
 8009294:	9b07      	ldrge	r3, [sp, #28]
 8009296:	2300      	movlt	r3, #0
 8009298:	4646      	movge	r6, r8
 800929a:	e730      	b.n	80090fe <_dtoa_r+0x71e>
 800929c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800929e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80092a0:	4646      	mov	r6, r8
 80092a2:	e735      	b.n	8009110 <_dtoa_r+0x730>
 80092a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092a6:	e75c      	b.n	8009162 <_dtoa_r+0x782>
 80092a8:	2300      	movs	r3, #0
 80092aa:	e788      	b.n	80091be <_dtoa_r+0x7de>
 80092ac:	3fe00000 	.word	0x3fe00000
 80092b0:	40240000 	.word	0x40240000
 80092b4:	40140000 	.word	0x40140000
 80092b8:	9b02      	ldr	r3, [sp, #8]
 80092ba:	e780      	b.n	80091be <_dtoa_r+0x7de>
 80092bc:	2300      	movs	r3, #0
 80092be:	930a      	str	r3, [sp, #40]	@ 0x28
 80092c0:	e782      	b.n	80091c8 <_dtoa_r+0x7e8>
 80092c2:	d099      	beq.n	80091f8 <_dtoa_r+0x818>
 80092c4:	9a08      	ldr	r2, [sp, #32]
 80092c6:	331c      	adds	r3, #28
 80092c8:	441a      	add	r2, r3
 80092ca:	4498      	add	r8, r3
 80092cc:	441e      	add	r6, r3
 80092ce:	9208      	str	r2, [sp, #32]
 80092d0:	e792      	b.n	80091f8 <_dtoa_r+0x818>
 80092d2:	4603      	mov	r3, r0
 80092d4:	e7f6      	b.n	80092c4 <_dtoa_r+0x8e4>
 80092d6:	9b07      	ldr	r3, [sp, #28]
 80092d8:	9704      	str	r7, [sp, #16]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	dc20      	bgt.n	8009320 <_dtoa_r+0x940>
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	dd1e      	ble.n	8009324 <_dtoa_r+0x944>
 80092e6:	9b00      	ldr	r3, [sp, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f47f aec0 	bne.w	800906e <_dtoa_r+0x68e>
 80092ee:	4621      	mov	r1, r4
 80092f0:	2205      	movs	r2, #5
 80092f2:	4658      	mov	r0, fp
 80092f4:	f000 f9e4 	bl	80096c0 <__multadd>
 80092f8:	4601      	mov	r1, r0
 80092fa:	4604      	mov	r4, r0
 80092fc:	4648      	mov	r0, r9
 80092fe:	f000 fc41 	bl	8009b84 <__mcmp>
 8009302:	2800      	cmp	r0, #0
 8009304:	f77f aeb3 	ble.w	800906e <_dtoa_r+0x68e>
 8009308:	4656      	mov	r6, sl
 800930a:	2331      	movs	r3, #49	@ 0x31
 800930c:	f806 3b01 	strb.w	r3, [r6], #1
 8009310:	9b04      	ldr	r3, [sp, #16]
 8009312:	3301      	adds	r3, #1
 8009314:	9304      	str	r3, [sp, #16]
 8009316:	e6ae      	b.n	8009076 <_dtoa_r+0x696>
 8009318:	9c07      	ldr	r4, [sp, #28]
 800931a:	9704      	str	r7, [sp, #16]
 800931c:	4625      	mov	r5, r4
 800931e:	e7f3      	b.n	8009308 <_dtoa_r+0x928>
 8009320:	9b07      	ldr	r3, [sp, #28]
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009326:	2b00      	cmp	r3, #0
 8009328:	f000 8104 	beq.w	8009534 <_dtoa_r+0xb54>
 800932c:	2e00      	cmp	r6, #0
 800932e:	dd05      	ble.n	800933c <_dtoa_r+0x95c>
 8009330:	4629      	mov	r1, r5
 8009332:	4632      	mov	r2, r6
 8009334:	4658      	mov	r0, fp
 8009336:	f000 fbb9 	bl	8009aac <__lshift>
 800933a:	4605      	mov	r5, r0
 800933c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800933e:	2b00      	cmp	r3, #0
 8009340:	d05a      	beq.n	80093f8 <_dtoa_r+0xa18>
 8009342:	6869      	ldr	r1, [r5, #4]
 8009344:	4658      	mov	r0, fp
 8009346:	f000 f959 	bl	80095fc <_Balloc>
 800934a:	4606      	mov	r6, r0
 800934c:	b928      	cbnz	r0, 800935a <_dtoa_r+0x97a>
 800934e:	4b84      	ldr	r3, [pc, #528]	@ (8009560 <_dtoa_r+0xb80>)
 8009350:	4602      	mov	r2, r0
 8009352:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009356:	f7ff bb5a 	b.w	8008a0e <_dtoa_r+0x2e>
 800935a:	692a      	ldr	r2, [r5, #16]
 800935c:	3202      	adds	r2, #2
 800935e:	0092      	lsls	r2, r2, #2
 8009360:	f105 010c 	add.w	r1, r5, #12
 8009364:	300c      	adds	r0, #12
 8009366:	f7ff fa7e 	bl	8008866 <memcpy>
 800936a:	2201      	movs	r2, #1
 800936c:	4631      	mov	r1, r6
 800936e:	4658      	mov	r0, fp
 8009370:	f000 fb9c 	bl	8009aac <__lshift>
 8009374:	f10a 0301 	add.w	r3, sl, #1
 8009378:	9307      	str	r3, [sp, #28]
 800937a:	9b00      	ldr	r3, [sp, #0]
 800937c:	4453      	add	r3, sl
 800937e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009380:	9b02      	ldr	r3, [sp, #8]
 8009382:	f003 0301 	and.w	r3, r3, #1
 8009386:	462f      	mov	r7, r5
 8009388:	930a      	str	r3, [sp, #40]	@ 0x28
 800938a:	4605      	mov	r5, r0
 800938c:	9b07      	ldr	r3, [sp, #28]
 800938e:	4621      	mov	r1, r4
 8009390:	3b01      	subs	r3, #1
 8009392:	4648      	mov	r0, r9
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	f7ff fa99 	bl	80088cc <quorem>
 800939a:	4639      	mov	r1, r7
 800939c:	9002      	str	r0, [sp, #8]
 800939e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80093a2:	4648      	mov	r0, r9
 80093a4:	f000 fbee 	bl	8009b84 <__mcmp>
 80093a8:	462a      	mov	r2, r5
 80093aa:	9008      	str	r0, [sp, #32]
 80093ac:	4621      	mov	r1, r4
 80093ae:	4658      	mov	r0, fp
 80093b0:	f000 fc04 	bl	8009bbc <__mdiff>
 80093b4:	68c2      	ldr	r2, [r0, #12]
 80093b6:	4606      	mov	r6, r0
 80093b8:	bb02      	cbnz	r2, 80093fc <_dtoa_r+0xa1c>
 80093ba:	4601      	mov	r1, r0
 80093bc:	4648      	mov	r0, r9
 80093be:	f000 fbe1 	bl	8009b84 <__mcmp>
 80093c2:	4602      	mov	r2, r0
 80093c4:	4631      	mov	r1, r6
 80093c6:	4658      	mov	r0, fp
 80093c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80093ca:	f000 f957 	bl	800967c <_Bfree>
 80093ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093d2:	9e07      	ldr	r6, [sp, #28]
 80093d4:	ea43 0102 	orr.w	r1, r3, r2
 80093d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093da:	4319      	orrs	r1, r3
 80093dc:	d110      	bne.n	8009400 <_dtoa_r+0xa20>
 80093de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80093e2:	d029      	beq.n	8009438 <_dtoa_r+0xa58>
 80093e4:	9b08      	ldr	r3, [sp, #32]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	dd02      	ble.n	80093f0 <_dtoa_r+0xa10>
 80093ea:	9b02      	ldr	r3, [sp, #8]
 80093ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80093f0:	9b00      	ldr	r3, [sp, #0]
 80093f2:	f883 8000 	strb.w	r8, [r3]
 80093f6:	e63f      	b.n	8009078 <_dtoa_r+0x698>
 80093f8:	4628      	mov	r0, r5
 80093fa:	e7bb      	b.n	8009374 <_dtoa_r+0x994>
 80093fc:	2201      	movs	r2, #1
 80093fe:	e7e1      	b.n	80093c4 <_dtoa_r+0x9e4>
 8009400:	9b08      	ldr	r3, [sp, #32]
 8009402:	2b00      	cmp	r3, #0
 8009404:	db04      	blt.n	8009410 <_dtoa_r+0xa30>
 8009406:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009408:	430b      	orrs	r3, r1
 800940a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800940c:	430b      	orrs	r3, r1
 800940e:	d120      	bne.n	8009452 <_dtoa_r+0xa72>
 8009410:	2a00      	cmp	r2, #0
 8009412:	dded      	ble.n	80093f0 <_dtoa_r+0xa10>
 8009414:	4649      	mov	r1, r9
 8009416:	2201      	movs	r2, #1
 8009418:	4658      	mov	r0, fp
 800941a:	f000 fb47 	bl	8009aac <__lshift>
 800941e:	4621      	mov	r1, r4
 8009420:	4681      	mov	r9, r0
 8009422:	f000 fbaf 	bl	8009b84 <__mcmp>
 8009426:	2800      	cmp	r0, #0
 8009428:	dc03      	bgt.n	8009432 <_dtoa_r+0xa52>
 800942a:	d1e1      	bne.n	80093f0 <_dtoa_r+0xa10>
 800942c:	f018 0f01 	tst.w	r8, #1
 8009430:	d0de      	beq.n	80093f0 <_dtoa_r+0xa10>
 8009432:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009436:	d1d8      	bne.n	80093ea <_dtoa_r+0xa0a>
 8009438:	9a00      	ldr	r2, [sp, #0]
 800943a:	2339      	movs	r3, #57	@ 0x39
 800943c:	7013      	strb	r3, [r2, #0]
 800943e:	4633      	mov	r3, r6
 8009440:	461e      	mov	r6, r3
 8009442:	3b01      	subs	r3, #1
 8009444:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009448:	2a39      	cmp	r2, #57	@ 0x39
 800944a:	d052      	beq.n	80094f2 <_dtoa_r+0xb12>
 800944c:	3201      	adds	r2, #1
 800944e:	701a      	strb	r2, [r3, #0]
 8009450:	e612      	b.n	8009078 <_dtoa_r+0x698>
 8009452:	2a00      	cmp	r2, #0
 8009454:	dd07      	ble.n	8009466 <_dtoa_r+0xa86>
 8009456:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800945a:	d0ed      	beq.n	8009438 <_dtoa_r+0xa58>
 800945c:	9a00      	ldr	r2, [sp, #0]
 800945e:	f108 0301 	add.w	r3, r8, #1
 8009462:	7013      	strb	r3, [r2, #0]
 8009464:	e608      	b.n	8009078 <_dtoa_r+0x698>
 8009466:	9b07      	ldr	r3, [sp, #28]
 8009468:	9a07      	ldr	r2, [sp, #28]
 800946a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800946e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009470:	4293      	cmp	r3, r2
 8009472:	d028      	beq.n	80094c6 <_dtoa_r+0xae6>
 8009474:	4649      	mov	r1, r9
 8009476:	2300      	movs	r3, #0
 8009478:	220a      	movs	r2, #10
 800947a:	4658      	mov	r0, fp
 800947c:	f000 f920 	bl	80096c0 <__multadd>
 8009480:	42af      	cmp	r7, r5
 8009482:	4681      	mov	r9, r0
 8009484:	f04f 0300 	mov.w	r3, #0
 8009488:	f04f 020a 	mov.w	r2, #10
 800948c:	4639      	mov	r1, r7
 800948e:	4658      	mov	r0, fp
 8009490:	d107      	bne.n	80094a2 <_dtoa_r+0xac2>
 8009492:	f000 f915 	bl	80096c0 <__multadd>
 8009496:	4607      	mov	r7, r0
 8009498:	4605      	mov	r5, r0
 800949a:	9b07      	ldr	r3, [sp, #28]
 800949c:	3301      	adds	r3, #1
 800949e:	9307      	str	r3, [sp, #28]
 80094a0:	e774      	b.n	800938c <_dtoa_r+0x9ac>
 80094a2:	f000 f90d 	bl	80096c0 <__multadd>
 80094a6:	4629      	mov	r1, r5
 80094a8:	4607      	mov	r7, r0
 80094aa:	2300      	movs	r3, #0
 80094ac:	220a      	movs	r2, #10
 80094ae:	4658      	mov	r0, fp
 80094b0:	f000 f906 	bl	80096c0 <__multadd>
 80094b4:	4605      	mov	r5, r0
 80094b6:	e7f0      	b.n	800949a <_dtoa_r+0xaba>
 80094b8:	9b00      	ldr	r3, [sp, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	bfcc      	ite	gt
 80094be:	461e      	movgt	r6, r3
 80094c0:	2601      	movle	r6, #1
 80094c2:	4456      	add	r6, sl
 80094c4:	2700      	movs	r7, #0
 80094c6:	4649      	mov	r1, r9
 80094c8:	2201      	movs	r2, #1
 80094ca:	4658      	mov	r0, fp
 80094cc:	f000 faee 	bl	8009aac <__lshift>
 80094d0:	4621      	mov	r1, r4
 80094d2:	4681      	mov	r9, r0
 80094d4:	f000 fb56 	bl	8009b84 <__mcmp>
 80094d8:	2800      	cmp	r0, #0
 80094da:	dcb0      	bgt.n	800943e <_dtoa_r+0xa5e>
 80094dc:	d102      	bne.n	80094e4 <_dtoa_r+0xb04>
 80094de:	f018 0f01 	tst.w	r8, #1
 80094e2:	d1ac      	bne.n	800943e <_dtoa_r+0xa5e>
 80094e4:	4633      	mov	r3, r6
 80094e6:	461e      	mov	r6, r3
 80094e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094ec:	2a30      	cmp	r2, #48	@ 0x30
 80094ee:	d0fa      	beq.n	80094e6 <_dtoa_r+0xb06>
 80094f0:	e5c2      	b.n	8009078 <_dtoa_r+0x698>
 80094f2:	459a      	cmp	sl, r3
 80094f4:	d1a4      	bne.n	8009440 <_dtoa_r+0xa60>
 80094f6:	9b04      	ldr	r3, [sp, #16]
 80094f8:	3301      	adds	r3, #1
 80094fa:	9304      	str	r3, [sp, #16]
 80094fc:	2331      	movs	r3, #49	@ 0x31
 80094fe:	f88a 3000 	strb.w	r3, [sl]
 8009502:	e5b9      	b.n	8009078 <_dtoa_r+0x698>
 8009504:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009506:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009564 <_dtoa_r+0xb84>
 800950a:	b11b      	cbz	r3, 8009514 <_dtoa_r+0xb34>
 800950c:	f10a 0308 	add.w	r3, sl, #8
 8009510:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009512:	6013      	str	r3, [r2, #0]
 8009514:	4650      	mov	r0, sl
 8009516:	b019      	add	sp, #100	@ 0x64
 8009518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800951c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800951e:	2b01      	cmp	r3, #1
 8009520:	f77f ae37 	ble.w	8009192 <_dtoa_r+0x7b2>
 8009524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009526:	930a      	str	r3, [sp, #40]	@ 0x28
 8009528:	2001      	movs	r0, #1
 800952a:	e655      	b.n	80091d8 <_dtoa_r+0x7f8>
 800952c:	9b00      	ldr	r3, [sp, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	f77f aed6 	ble.w	80092e0 <_dtoa_r+0x900>
 8009534:	4656      	mov	r6, sl
 8009536:	4621      	mov	r1, r4
 8009538:	4648      	mov	r0, r9
 800953a:	f7ff f9c7 	bl	80088cc <quorem>
 800953e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009542:	f806 8b01 	strb.w	r8, [r6], #1
 8009546:	9b00      	ldr	r3, [sp, #0]
 8009548:	eba6 020a 	sub.w	r2, r6, sl
 800954c:	4293      	cmp	r3, r2
 800954e:	ddb3      	ble.n	80094b8 <_dtoa_r+0xad8>
 8009550:	4649      	mov	r1, r9
 8009552:	2300      	movs	r3, #0
 8009554:	220a      	movs	r2, #10
 8009556:	4658      	mov	r0, fp
 8009558:	f000 f8b2 	bl	80096c0 <__multadd>
 800955c:	4681      	mov	r9, r0
 800955e:	e7ea      	b.n	8009536 <_dtoa_r+0xb56>
 8009560:	0800ca87 	.word	0x0800ca87
 8009564:	0800ca0b 	.word	0x0800ca0b

08009568 <_free_r>:
 8009568:	b538      	push	{r3, r4, r5, lr}
 800956a:	4605      	mov	r5, r0
 800956c:	2900      	cmp	r1, #0
 800956e:	d041      	beq.n	80095f4 <_free_r+0x8c>
 8009570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009574:	1f0c      	subs	r4, r1, #4
 8009576:	2b00      	cmp	r3, #0
 8009578:	bfb8      	it	lt
 800957a:	18e4      	addlt	r4, r4, r3
 800957c:	f7fe f854 	bl	8007628 <__malloc_lock>
 8009580:	4a1d      	ldr	r2, [pc, #116]	@ (80095f8 <_free_r+0x90>)
 8009582:	6813      	ldr	r3, [r2, #0]
 8009584:	b933      	cbnz	r3, 8009594 <_free_r+0x2c>
 8009586:	6063      	str	r3, [r4, #4]
 8009588:	6014      	str	r4, [r2, #0]
 800958a:	4628      	mov	r0, r5
 800958c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009590:	f7fe b850 	b.w	8007634 <__malloc_unlock>
 8009594:	42a3      	cmp	r3, r4
 8009596:	d908      	bls.n	80095aa <_free_r+0x42>
 8009598:	6820      	ldr	r0, [r4, #0]
 800959a:	1821      	adds	r1, r4, r0
 800959c:	428b      	cmp	r3, r1
 800959e:	bf01      	itttt	eq
 80095a0:	6819      	ldreq	r1, [r3, #0]
 80095a2:	685b      	ldreq	r3, [r3, #4]
 80095a4:	1809      	addeq	r1, r1, r0
 80095a6:	6021      	streq	r1, [r4, #0]
 80095a8:	e7ed      	b.n	8009586 <_free_r+0x1e>
 80095aa:	461a      	mov	r2, r3
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	b10b      	cbz	r3, 80095b4 <_free_r+0x4c>
 80095b0:	42a3      	cmp	r3, r4
 80095b2:	d9fa      	bls.n	80095aa <_free_r+0x42>
 80095b4:	6811      	ldr	r1, [r2, #0]
 80095b6:	1850      	adds	r0, r2, r1
 80095b8:	42a0      	cmp	r0, r4
 80095ba:	d10b      	bne.n	80095d4 <_free_r+0x6c>
 80095bc:	6820      	ldr	r0, [r4, #0]
 80095be:	4401      	add	r1, r0
 80095c0:	1850      	adds	r0, r2, r1
 80095c2:	4283      	cmp	r3, r0
 80095c4:	6011      	str	r1, [r2, #0]
 80095c6:	d1e0      	bne.n	800958a <_free_r+0x22>
 80095c8:	6818      	ldr	r0, [r3, #0]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	6053      	str	r3, [r2, #4]
 80095ce:	4408      	add	r0, r1
 80095d0:	6010      	str	r0, [r2, #0]
 80095d2:	e7da      	b.n	800958a <_free_r+0x22>
 80095d4:	d902      	bls.n	80095dc <_free_r+0x74>
 80095d6:	230c      	movs	r3, #12
 80095d8:	602b      	str	r3, [r5, #0]
 80095da:	e7d6      	b.n	800958a <_free_r+0x22>
 80095dc:	6820      	ldr	r0, [r4, #0]
 80095de:	1821      	adds	r1, r4, r0
 80095e0:	428b      	cmp	r3, r1
 80095e2:	bf04      	itt	eq
 80095e4:	6819      	ldreq	r1, [r3, #0]
 80095e6:	685b      	ldreq	r3, [r3, #4]
 80095e8:	6063      	str	r3, [r4, #4]
 80095ea:	bf04      	itt	eq
 80095ec:	1809      	addeq	r1, r1, r0
 80095ee:	6021      	streq	r1, [r4, #0]
 80095f0:	6054      	str	r4, [r2, #4]
 80095f2:	e7ca      	b.n	800958a <_free_r+0x22>
 80095f4:	bd38      	pop	{r3, r4, r5, pc}
 80095f6:	bf00      	nop
 80095f8:	200009d0 	.word	0x200009d0

080095fc <_Balloc>:
 80095fc:	b570      	push	{r4, r5, r6, lr}
 80095fe:	69c6      	ldr	r6, [r0, #28]
 8009600:	4604      	mov	r4, r0
 8009602:	460d      	mov	r5, r1
 8009604:	b976      	cbnz	r6, 8009624 <_Balloc+0x28>
 8009606:	2010      	movs	r0, #16
 8009608:	f7fd ff64 	bl	80074d4 <malloc>
 800960c:	4602      	mov	r2, r0
 800960e:	61e0      	str	r0, [r4, #28]
 8009610:	b920      	cbnz	r0, 800961c <_Balloc+0x20>
 8009612:	4b18      	ldr	r3, [pc, #96]	@ (8009674 <_Balloc+0x78>)
 8009614:	4818      	ldr	r0, [pc, #96]	@ (8009678 <_Balloc+0x7c>)
 8009616:	216b      	movs	r1, #107	@ 0x6b
 8009618:	f7ff f93a 	bl	8008890 <__assert_func>
 800961c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009620:	6006      	str	r6, [r0, #0]
 8009622:	60c6      	str	r6, [r0, #12]
 8009624:	69e6      	ldr	r6, [r4, #28]
 8009626:	68f3      	ldr	r3, [r6, #12]
 8009628:	b183      	cbz	r3, 800964c <_Balloc+0x50>
 800962a:	69e3      	ldr	r3, [r4, #28]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009632:	b9b8      	cbnz	r0, 8009664 <_Balloc+0x68>
 8009634:	2101      	movs	r1, #1
 8009636:	fa01 f605 	lsl.w	r6, r1, r5
 800963a:	1d72      	adds	r2, r6, #5
 800963c:	0092      	lsls	r2, r2, #2
 800963e:	4620      	mov	r0, r4
 8009640:	f001 ff2d 	bl	800b49e <_calloc_r>
 8009644:	b160      	cbz	r0, 8009660 <_Balloc+0x64>
 8009646:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800964a:	e00e      	b.n	800966a <_Balloc+0x6e>
 800964c:	2221      	movs	r2, #33	@ 0x21
 800964e:	2104      	movs	r1, #4
 8009650:	4620      	mov	r0, r4
 8009652:	f001 ff24 	bl	800b49e <_calloc_r>
 8009656:	69e3      	ldr	r3, [r4, #28]
 8009658:	60f0      	str	r0, [r6, #12]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1e4      	bne.n	800962a <_Balloc+0x2e>
 8009660:	2000      	movs	r0, #0
 8009662:	bd70      	pop	{r4, r5, r6, pc}
 8009664:	6802      	ldr	r2, [r0, #0]
 8009666:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800966a:	2300      	movs	r3, #0
 800966c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009670:	e7f7      	b.n	8009662 <_Balloc+0x66>
 8009672:	bf00      	nop
 8009674:	0800ca18 	.word	0x0800ca18
 8009678:	0800ca98 	.word	0x0800ca98

0800967c <_Bfree>:
 800967c:	b570      	push	{r4, r5, r6, lr}
 800967e:	69c6      	ldr	r6, [r0, #28]
 8009680:	4605      	mov	r5, r0
 8009682:	460c      	mov	r4, r1
 8009684:	b976      	cbnz	r6, 80096a4 <_Bfree+0x28>
 8009686:	2010      	movs	r0, #16
 8009688:	f7fd ff24 	bl	80074d4 <malloc>
 800968c:	4602      	mov	r2, r0
 800968e:	61e8      	str	r0, [r5, #28]
 8009690:	b920      	cbnz	r0, 800969c <_Bfree+0x20>
 8009692:	4b09      	ldr	r3, [pc, #36]	@ (80096b8 <_Bfree+0x3c>)
 8009694:	4809      	ldr	r0, [pc, #36]	@ (80096bc <_Bfree+0x40>)
 8009696:	218f      	movs	r1, #143	@ 0x8f
 8009698:	f7ff f8fa 	bl	8008890 <__assert_func>
 800969c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096a0:	6006      	str	r6, [r0, #0]
 80096a2:	60c6      	str	r6, [r0, #12]
 80096a4:	b13c      	cbz	r4, 80096b6 <_Bfree+0x3a>
 80096a6:	69eb      	ldr	r3, [r5, #28]
 80096a8:	6862      	ldr	r2, [r4, #4]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096b0:	6021      	str	r1, [r4, #0]
 80096b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80096b6:	bd70      	pop	{r4, r5, r6, pc}
 80096b8:	0800ca18 	.word	0x0800ca18
 80096bc:	0800ca98 	.word	0x0800ca98

080096c0 <__multadd>:
 80096c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096c4:	690d      	ldr	r5, [r1, #16]
 80096c6:	4607      	mov	r7, r0
 80096c8:	460c      	mov	r4, r1
 80096ca:	461e      	mov	r6, r3
 80096cc:	f101 0c14 	add.w	ip, r1, #20
 80096d0:	2000      	movs	r0, #0
 80096d2:	f8dc 3000 	ldr.w	r3, [ip]
 80096d6:	b299      	uxth	r1, r3
 80096d8:	fb02 6101 	mla	r1, r2, r1, r6
 80096dc:	0c1e      	lsrs	r6, r3, #16
 80096de:	0c0b      	lsrs	r3, r1, #16
 80096e0:	fb02 3306 	mla	r3, r2, r6, r3
 80096e4:	b289      	uxth	r1, r1
 80096e6:	3001      	adds	r0, #1
 80096e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096ec:	4285      	cmp	r5, r0
 80096ee:	f84c 1b04 	str.w	r1, [ip], #4
 80096f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096f6:	dcec      	bgt.n	80096d2 <__multadd+0x12>
 80096f8:	b30e      	cbz	r6, 800973e <__multadd+0x7e>
 80096fa:	68a3      	ldr	r3, [r4, #8]
 80096fc:	42ab      	cmp	r3, r5
 80096fe:	dc19      	bgt.n	8009734 <__multadd+0x74>
 8009700:	6861      	ldr	r1, [r4, #4]
 8009702:	4638      	mov	r0, r7
 8009704:	3101      	adds	r1, #1
 8009706:	f7ff ff79 	bl	80095fc <_Balloc>
 800970a:	4680      	mov	r8, r0
 800970c:	b928      	cbnz	r0, 800971a <__multadd+0x5a>
 800970e:	4602      	mov	r2, r0
 8009710:	4b0c      	ldr	r3, [pc, #48]	@ (8009744 <__multadd+0x84>)
 8009712:	480d      	ldr	r0, [pc, #52]	@ (8009748 <__multadd+0x88>)
 8009714:	21ba      	movs	r1, #186	@ 0xba
 8009716:	f7ff f8bb 	bl	8008890 <__assert_func>
 800971a:	6922      	ldr	r2, [r4, #16]
 800971c:	3202      	adds	r2, #2
 800971e:	f104 010c 	add.w	r1, r4, #12
 8009722:	0092      	lsls	r2, r2, #2
 8009724:	300c      	adds	r0, #12
 8009726:	f7ff f89e 	bl	8008866 <memcpy>
 800972a:	4621      	mov	r1, r4
 800972c:	4638      	mov	r0, r7
 800972e:	f7ff ffa5 	bl	800967c <_Bfree>
 8009732:	4644      	mov	r4, r8
 8009734:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009738:	3501      	adds	r5, #1
 800973a:	615e      	str	r6, [r3, #20]
 800973c:	6125      	str	r5, [r4, #16]
 800973e:	4620      	mov	r0, r4
 8009740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009744:	0800ca87 	.word	0x0800ca87
 8009748:	0800ca98 	.word	0x0800ca98

0800974c <__s2b>:
 800974c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009750:	460c      	mov	r4, r1
 8009752:	4615      	mov	r5, r2
 8009754:	461f      	mov	r7, r3
 8009756:	2209      	movs	r2, #9
 8009758:	3308      	adds	r3, #8
 800975a:	4606      	mov	r6, r0
 800975c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009760:	2100      	movs	r1, #0
 8009762:	2201      	movs	r2, #1
 8009764:	429a      	cmp	r2, r3
 8009766:	db09      	blt.n	800977c <__s2b+0x30>
 8009768:	4630      	mov	r0, r6
 800976a:	f7ff ff47 	bl	80095fc <_Balloc>
 800976e:	b940      	cbnz	r0, 8009782 <__s2b+0x36>
 8009770:	4602      	mov	r2, r0
 8009772:	4b19      	ldr	r3, [pc, #100]	@ (80097d8 <__s2b+0x8c>)
 8009774:	4819      	ldr	r0, [pc, #100]	@ (80097dc <__s2b+0x90>)
 8009776:	21d3      	movs	r1, #211	@ 0xd3
 8009778:	f7ff f88a 	bl	8008890 <__assert_func>
 800977c:	0052      	lsls	r2, r2, #1
 800977e:	3101      	adds	r1, #1
 8009780:	e7f0      	b.n	8009764 <__s2b+0x18>
 8009782:	9b08      	ldr	r3, [sp, #32]
 8009784:	6143      	str	r3, [r0, #20]
 8009786:	2d09      	cmp	r5, #9
 8009788:	f04f 0301 	mov.w	r3, #1
 800978c:	6103      	str	r3, [r0, #16]
 800978e:	dd16      	ble.n	80097be <__s2b+0x72>
 8009790:	f104 0909 	add.w	r9, r4, #9
 8009794:	46c8      	mov	r8, r9
 8009796:	442c      	add	r4, r5
 8009798:	f818 3b01 	ldrb.w	r3, [r8], #1
 800979c:	4601      	mov	r1, r0
 800979e:	3b30      	subs	r3, #48	@ 0x30
 80097a0:	220a      	movs	r2, #10
 80097a2:	4630      	mov	r0, r6
 80097a4:	f7ff ff8c 	bl	80096c0 <__multadd>
 80097a8:	45a0      	cmp	r8, r4
 80097aa:	d1f5      	bne.n	8009798 <__s2b+0x4c>
 80097ac:	f1a5 0408 	sub.w	r4, r5, #8
 80097b0:	444c      	add	r4, r9
 80097b2:	1b2d      	subs	r5, r5, r4
 80097b4:	1963      	adds	r3, r4, r5
 80097b6:	42bb      	cmp	r3, r7
 80097b8:	db04      	blt.n	80097c4 <__s2b+0x78>
 80097ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097be:	340a      	adds	r4, #10
 80097c0:	2509      	movs	r5, #9
 80097c2:	e7f6      	b.n	80097b2 <__s2b+0x66>
 80097c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80097c8:	4601      	mov	r1, r0
 80097ca:	3b30      	subs	r3, #48	@ 0x30
 80097cc:	220a      	movs	r2, #10
 80097ce:	4630      	mov	r0, r6
 80097d0:	f7ff ff76 	bl	80096c0 <__multadd>
 80097d4:	e7ee      	b.n	80097b4 <__s2b+0x68>
 80097d6:	bf00      	nop
 80097d8:	0800ca87 	.word	0x0800ca87
 80097dc:	0800ca98 	.word	0x0800ca98

080097e0 <__hi0bits>:
 80097e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80097e4:	4603      	mov	r3, r0
 80097e6:	bf36      	itet	cc
 80097e8:	0403      	lslcc	r3, r0, #16
 80097ea:	2000      	movcs	r0, #0
 80097ec:	2010      	movcc	r0, #16
 80097ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097f2:	bf3c      	itt	cc
 80097f4:	021b      	lslcc	r3, r3, #8
 80097f6:	3008      	addcc	r0, #8
 80097f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097fc:	bf3c      	itt	cc
 80097fe:	011b      	lslcc	r3, r3, #4
 8009800:	3004      	addcc	r0, #4
 8009802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009806:	bf3c      	itt	cc
 8009808:	009b      	lslcc	r3, r3, #2
 800980a:	3002      	addcc	r0, #2
 800980c:	2b00      	cmp	r3, #0
 800980e:	db05      	blt.n	800981c <__hi0bits+0x3c>
 8009810:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009814:	f100 0001 	add.w	r0, r0, #1
 8009818:	bf08      	it	eq
 800981a:	2020      	moveq	r0, #32
 800981c:	4770      	bx	lr

0800981e <__lo0bits>:
 800981e:	6803      	ldr	r3, [r0, #0]
 8009820:	4602      	mov	r2, r0
 8009822:	f013 0007 	ands.w	r0, r3, #7
 8009826:	d00b      	beq.n	8009840 <__lo0bits+0x22>
 8009828:	07d9      	lsls	r1, r3, #31
 800982a:	d421      	bmi.n	8009870 <__lo0bits+0x52>
 800982c:	0798      	lsls	r0, r3, #30
 800982e:	bf49      	itett	mi
 8009830:	085b      	lsrmi	r3, r3, #1
 8009832:	089b      	lsrpl	r3, r3, #2
 8009834:	2001      	movmi	r0, #1
 8009836:	6013      	strmi	r3, [r2, #0]
 8009838:	bf5c      	itt	pl
 800983a:	6013      	strpl	r3, [r2, #0]
 800983c:	2002      	movpl	r0, #2
 800983e:	4770      	bx	lr
 8009840:	b299      	uxth	r1, r3
 8009842:	b909      	cbnz	r1, 8009848 <__lo0bits+0x2a>
 8009844:	0c1b      	lsrs	r3, r3, #16
 8009846:	2010      	movs	r0, #16
 8009848:	b2d9      	uxtb	r1, r3
 800984a:	b909      	cbnz	r1, 8009850 <__lo0bits+0x32>
 800984c:	3008      	adds	r0, #8
 800984e:	0a1b      	lsrs	r3, r3, #8
 8009850:	0719      	lsls	r1, r3, #28
 8009852:	bf04      	itt	eq
 8009854:	091b      	lsreq	r3, r3, #4
 8009856:	3004      	addeq	r0, #4
 8009858:	0799      	lsls	r1, r3, #30
 800985a:	bf04      	itt	eq
 800985c:	089b      	lsreq	r3, r3, #2
 800985e:	3002      	addeq	r0, #2
 8009860:	07d9      	lsls	r1, r3, #31
 8009862:	d403      	bmi.n	800986c <__lo0bits+0x4e>
 8009864:	085b      	lsrs	r3, r3, #1
 8009866:	f100 0001 	add.w	r0, r0, #1
 800986a:	d003      	beq.n	8009874 <__lo0bits+0x56>
 800986c:	6013      	str	r3, [r2, #0]
 800986e:	4770      	bx	lr
 8009870:	2000      	movs	r0, #0
 8009872:	4770      	bx	lr
 8009874:	2020      	movs	r0, #32
 8009876:	4770      	bx	lr

08009878 <__i2b>:
 8009878:	b510      	push	{r4, lr}
 800987a:	460c      	mov	r4, r1
 800987c:	2101      	movs	r1, #1
 800987e:	f7ff febd 	bl	80095fc <_Balloc>
 8009882:	4602      	mov	r2, r0
 8009884:	b928      	cbnz	r0, 8009892 <__i2b+0x1a>
 8009886:	4b05      	ldr	r3, [pc, #20]	@ (800989c <__i2b+0x24>)
 8009888:	4805      	ldr	r0, [pc, #20]	@ (80098a0 <__i2b+0x28>)
 800988a:	f240 1145 	movw	r1, #325	@ 0x145
 800988e:	f7fe ffff 	bl	8008890 <__assert_func>
 8009892:	2301      	movs	r3, #1
 8009894:	6144      	str	r4, [r0, #20]
 8009896:	6103      	str	r3, [r0, #16]
 8009898:	bd10      	pop	{r4, pc}
 800989a:	bf00      	nop
 800989c:	0800ca87 	.word	0x0800ca87
 80098a0:	0800ca98 	.word	0x0800ca98

080098a4 <__multiply>:
 80098a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a8:	4614      	mov	r4, r2
 80098aa:	690a      	ldr	r2, [r1, #16]
 80098ac:	6923      	ldr	r3, [r4, #16]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	bfa8      	it	ge
 80098b2:	4623      	movge	r3, r4
 80098b4:	460f      	mov	r7, r1
 80098b6:	bfa4      	itt	ge
 80098b8:	460c      	movge	r4, r1
 80098ba:	461f      	movge	r7, r3
 80098bc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80098c0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80098c4:	68a3      	ldr	r3, [r4, #8]
 80098c6:	6861      	ldr	r1, [r4, #4]
 80098c8:	eb0a 0609 	add.w	r6, sl, r9
 80098cc:	42b3      	cmp	r3, r6
 80098ce:	b085      	sub	sp, #20
 80098d0:	bfb8      	it	lt
 80098d2:	3101      	addlt	r1, #1
 80098d4:	f7ff fe92 	bl	80095fc <_Balloc>
 80098d8:	b930      	cbnz	r0, 80098e8 <__multiply+0x44>
 80098da:	4602      	mov	r2, r0
 80098dc:	4b44      	ldr	r3, [pc, #272]	@ (80099f0 <__multiply+0x14c>)
 80098de:	4845      	ldr	r0, [pc, #276]	@ (80099f4 <__multiply+0x150>)
 80098e0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80098e4:	f7fe ffd4 	bl	8008890 <__assert_func>
 80098e8:	f100 0514 	add.w	r5, r0, #20
 80098ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098f0:	462b      	mov	r3, r5
 80098f2:	2200      	movs	r2, #0
 80098f4:	4543      	cmp	r3, r8
 80098f6:	d321      	bcc.n	800993c <__multiply+0x98>
 80098f8:	f107 0114 	add.w	r1, r7, #20
 80098fc:	f104 0214 	add.w	r2, r4, #20
 8009900:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009904:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009908:	9302      	str	r3, [sp, #8]
 800990a:	1b13      	subs	r3, r2, r4
 800990c:	3b15      	subs	r3, #21
 800990e:	f023 0303 	bic.w	r3, r3, #3
 8009912:	3304      	adds	r3, #4
 8009914:	f104 0715 	add.w	r7, r4, #21
 8009918:	42ba      	cmp	r2, r7
 800991a:	bf38      	it	cc
 800991c:	2304      	movcc	r3, #4
 800991e:	9301      	str	r3, [sp, #4]
 8009920:	9b02      	ldr	r3, [sp, #8]
 8009922:	9103      	str	r1, [sp, #12]
 8009924:	428b      	cmp	r3, r1
 8009926:	d80c      	bhi.n	8009942 <__multiply+0x9e>
 8009928:	2e00      	cmp	r6, #0
 800992a:	dd03      	ble.n	8009934 <__multiply+0x90>
 800992c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009930:	2b00      	cmp	r3, #0
 8009932:	d05b      	beq.n	80099ec <__multiply+0x148>
 8009934:	6106      	str	r6, [r0, #16]
 8009936:	b005      	add	sp, #20
 8009938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993c:	f843 2b04 	str.w	r2, [r3], #4
 8009940:	e7d8      	b.n	80098f4 <__multiply+0x50>
 8009942:	f8b1 a000 	ldrh.w	sl, [r1]
 8009946:	f1ba 0f00 	cmp.w	sl, #0
 800994a:	d024      	beq.n	8009996 <__multiply+0xf2>
 800994c:	f104 0e14 	add.w	lr, r4, #20
 8009950:	46a9      	mov	r9, r5
 8009952:	f04f 0c00 	mov.w	ip, #0
 8009956:	f85e 7b04 	ldr.w	r7, [lr], #4
 800995a:	f8d9 3000 	ldr.w	r3, [r9]
 800995e:	fa1f fb87 	uxth.w	fp, r7
 8009962:	b29b      	uxth	r3, r3
 8009964:	fb0a 330b 	mla	r3, sl, fp, r3
 8009968:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800996c:	f8d9 7000 	ldr.w	r7, [r9]
 8009970:	4463      	add	r3, ip
 8009972:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009976:	fb0a c70b 	mla	r7, sl, fp, ip
 800997a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800997e:	b29b      	uxth	r3, r3
 8009980:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009984:	4572      	cmp	r2, lr
 8009986:	f849 3b04 	str.w	r3, [r9], #4
 800998a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800998e:	d8e2      	bhi.n	8009956 <__multiply+0xb2>
 8009990:	9b01      	ldr	r3, [sp, #4]
 8009992:	f845 c003 	str.w	ip, [r5, r3]
 8009996:	9b03      	ldr	r3, [sp, #12]
 8009998:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800999c:	3104      	adds	r1, #4
 800999e:	f1b9 0f00 	cmp.w	r9, #0
 80099a2:	d021      	beq.n	80099e8 <__multiply+0x144>
 80099a4:	682b      	ldr	r3, [r5, #0]
 80099a6:	f104 0c14 	add.w	ip, r4, #20
 80099aa:	46ae      	mov	lr, r5
 80099ac:	f04f 0a00 	mov.w	sl, #0
 80099b0:	f8bc b000 	ldrh.w	fp, [ip]
 80099b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80099b8:	fb09 770b 	mla	r7, r9, fp, r7
 80099bc:	4457      	add	r7, sl
 80099be:	b29b      	uxth	r3, r3
 80099c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80099c4:	f84e 3b04 	str.w	r3, [lr], #4
 80099c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80099cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80099d0:	f8be 3000 	ldrh.w	r3, [lr]
 80099d4:	fb09 330a 	mla	r3, r9, sl, r3
 80099d8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80099dc:	4562      	cmp	r2, ip
 80099de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80099e2:	d8e5      	bhi.n	80099b0 <__multiply+0x10c>
 80099e4:	9f01      	ldr	r7, [sp, #4]
 80099e6:	51eb      	str	r3, [r5, r7]
 80099e8:	3504      	adds	r5, #4
 80099ea:	e799      	b.n	8009920 <__multiply+0x7c>
 80099ec:	3e01      	subs	r6, #1
 80099ee:	e79b      	b.n	8009928 <__multiply+0x84>
 80099f0:	0800ca87 	.word	0x0800ca87
 80099f4:	0800ca98 	.word	0x0800ca98

080099f8 <__pow5mult>:
 80099f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099fc:	4615      	mov	r5, r2
 80099fe:	f012 0203 	ands.w	r2, r2, #3
 8009a02:	4607      	mov	r7, r0
 8009a04:	460e      	mov	r6, r1
 8009a06:	d007      	beq.n	8009a18 <__pow5mult+0x20>
 8009a08:	4c25      	ldr	r4, [pc, #148]	@ (8009aa0 <__pow5mult+0xa8>)
 8009a0a:	3a01      	subs	r2, #1
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a12:	f7ff fe55 	bl	80096c0 <__multadd>
 8009a16:	4606      	mov	r6, r0
 8009a18:	10ad      	asrs	r5, r5, #2
 8009a1a:	d03d      	beq.n	8009a98 <__pow5mult+0xa0>
 8009a1c:	69fc      	ldr	r4, [r7, #28]
 8009a1e:	b97c      	cbnz	r4, 8009a40 <__pow5mult+0x48>
 8009a20:	2010      	movs	r0, #16
 8009a22:	f7fd fd57 	bl	80074d4 <malloc>
 8009a26:	4602      	mov	r2, r0
 8009a28:	61f8      	str	r0, [r7, #28]
 8009a2a:	b928      	cbnz	r0, 8009a38 <__pow5mult+0x40>
 8009a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8009aa4 <__pow5mult+0xac>)
 8009a2e:	481e      	ldr	r0, [pc, #120]	@ (8009aa8 <__pow5mult+0xb0>)
 8009a30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009a34:	f7fe ff2c 	bl	8008890 <__assert_func>
 8009a38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a3c:	6004      	str	r4, [r0, #0]
 8009a3e:	60c4      	str	r4, [r0, #12]
 8009a40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009a44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a48:	b94c      	cbnz	r4, 8009a5e <__pow5mult+0x66>
 8009a4a:	f240 2171 	movw	r1, #625	@ 0x271
 8009a4e:	4638      	mov	r0, r7
 8009a50:	f7ff ff12 	bl	8009878 <__i2b>
 8009a54:	2300      	movs	r3, #0
 8009a56:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	6003      	str	r3, [r0, #0]
 8009a5e:	f04f 0900 	mov.w	r9, #0
 8009a62:	07eb      	lsls	r3, r5, #31
 8009a64:	d50a      	bpl.n	8009a7c <__pow5mult+0x84>
 8009a66:	4631      	mov	r1, r6
 8009a68:	4622      	mov	r2, r4
 8009a6a:	4638      	mov	r0, r7
 8009a6c:	f7ff ff1a 	bl	80098a4 <__multiply>
 8009a70:	4631      	mov	r1, r6
 8009a72:	4680      	mov	r8, r0
 8009a74:	4638      	mov	r0, r7
 8009a76:	f7ff fe01 	bl	800967c <_Bfree>
 8009a7a:	4646      	mov	r6, r8
 8009a7c:	106d      	asrs	r5, r5, #1
 8009a7e:	d00b      	beq.n	8009a98 <__pow5mult+0xa0>
 8009a80:	6820      	ldr	r0, [r4, #0]
 8009a82:	b938      	cbnz	r0, 8009a94 <__pow5mult+0x9c>
 8009a84:	4622      	mov	r2, r4
 8009a86:	4621      	mov	r1, r4
 8009a88:	4638      	mov	r0, r7
 8009a8a:	f7ff ff0b 	bl	80098a4 <__multiply>
 8009a8e:	6020      	str	r0, [r4, #0]
 8009a90:	f8c0 9000 	str.w	r9, [r0]
 8009a94:	4604      	mov	r4, r0
 8009a96:	e7e4      	b.n	8009a62 <__pow5mult+0x6a>
 8009a98:	4630      	mov	r0, r6
 8009a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a9e:	bf00      	nop
 8009aa0:	0800caf4 	.word	0x0800caf4
 8009aa4:	0800ca18 	.word	0x0800ca18
 8009aa8:	0800ca98 	.word	0x0800ca98

08009aac <__lshift>:
 8009aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab0:	460c      	mov	r4, r1
 8009ab2:	6849      	ldr	r1, [r1, #4]
 8009ab4:	6923      	ldr	r3, [r4, #16]
 8009ab6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009aba:	68a3      	ldr	r3, [r4, #8]
 8009abc:	4607      	mov	r7, r0
 8009abe:	4691      	mov	r9, r2
 8009ac0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ac4:	f108 0601 	add.w	r6, r8, #1
 8009ac8:	42b3      	cmp	r3, r6
 8009aca:	db0b      	blt.n	8009ae4 <__lshift+0x38>
 8009acc:	4638      	mov	r0, r7
 8009ace:	f7ff fd95 	bl	80095fc <_Balloc>
 8009ad2:	4605      	mov	r5, r0
 8009ad4:	b948      	cbnz	r0, 8009aea <__lshift+0x3e>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	4b28      	ldr	r3, [pc, #160]	@ (8009b7c <__lshift+0xd0>)
 8009ada:	4829      	ldr	r0, [pc, #164]	@ (8009b80 <__lshift+0xd4>)
 8009adc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009ae0:	f7fe fed6 	bl	8008890 <__assert_func>
 8009ae4:	3101      	adds	r1, #1
 8009ae6:	005b      	lsls	r3, r3, #1
 8009ae8:	e7ee      	b.n	8009ac8 <__lshift+0x1c>
 8009aea:	2300      	movs	r3, #0
 8009aec:	f100 0114 	add.w	r1, r0, #20
 8009af0:	f100 0210 	add.w	r2, r0, #16
 8009af4:	4618      	mov	r0, r3
 8009af6:	4553      	cmp	r3, sl
 8009af8:	db33      	blt.n	8009b62 <__lshift+0xb6>
 8009afa:	6920      	ldr	r0, [r4, #16]
 8009afc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b00:	f104 0314 	add.w	r3, r4, #20
 8009b04:	f019 091f 	ands.w	r9, r9, #31
 8009b08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b10:	d02b      	beq.n	8009b6a <__lshift+0xbe>
 8009b12:	f1c9 0e20 	rsb	lr, r9, #32
 8009b16:	468a      	mov	sl, r1
 8009b18:	2200      	movs	r2, #0
 8009b1a:	6818      	ldr	r0, [r3, #0]
 8009b1c:	fa00 f009 	lsl.w	r0, r0, r9
 8009b20:	4310      	orrs	r0, r2
 8009b22:	f84a 0b04 	str.w	r0, [sl], #4
 8009b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b2a:	459c      	cmp	ip, r3
 8009b2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b30:	d8f3      	bhi.n	8009b1a <__lshift+0x6e>
 8009b32:	ebac 0304 	sub.w	r3, ip, r4
 8009b36:	3b15      	subs	r3, #21
 8009b38:	f023 0303 	bic.w	r3, r3, #3
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	f104 0015 	add.w	r0, r4, #21
 8009b42:	4584      	cmp	ip, r0
 8009b44:	bf38      	it	cc
 8009b46:	2304      	movcc	r3, #4
 8009b48:	50ca      	str	r2, [r1, r3]
 8009b4a:	b10a      	cbz	r2, 8009b50 <__lshift+0xa4>
 8009b4c:	f108 0602 	add.w	r6, r8, #2
 8009b50:	3e01      	subs	r6, #1
 8009b52:	4638      	mov	r0, r7
 8009b54:	612e      	str	r6, [r5, #16]
 8009b56:	4621      	mov	r1, r4
 8009b58:	f7ff fd90 	bl	800967c <_Bfree>
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b62:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b66:	3301      	adds	r3, #1
 8009b68:	e7c5      	b.n	8009af6 <__lshift+0x4a>
 8009b6a:	3904      	subs	r1, #4
 8009b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b70:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b74:	459c      	cmp	ip, r3
 8009b76:	d8f9      	bhi.n	8009b6c <__lshift+0xc0>
 8009b78:	e7ea      	b.n	8009b50 <__lshift+0xa4>
 8009b7a:	bf00      	nop
 8009b7c:	0800ca87 	.word	0x0800ca87
 8009b80:	0800ca98 	.word	0x0800ca98

08009b84 <__mcmp>:
 8009b84:	690a      	ldr	r2, [r1, #16]
 8009b86:	4603      	mov	r3, r0
 8009b88:	6900      	ldr	r0, [r0, #16]
 8009b8a:	1a80      	subs	r0, r0, r2
 8009b8c:	b530      	push	{r4, r5, lr}
 8009b8e:	d10e      	bne.n	8009bae <__mcmp+0x2a>
 8009b90:	3314      	adds	r3, #20
 8009b92:	3114      	adds	r1, #20
 8009b94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009b98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009b9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ba0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ba4:	4295      	cmp	r5, r2
 8009ba6:	d003      	beq.n	8009bb0 <__mcmp+0x2c>
 8009ba8:	d205      	bcs.n	8009bb6 <__mcmp+0x32>
 8009baa:	f04f 30ff 	mov.w	r0, #4294967295
 8009bae:	bd30      	pop	{r4, r5, pc}
 8009bb0:	42a3      	cmp	r3, r4
 8009bb2:	d3f3      	bcc.n	8009b9c <__mcmp+0x18>
 8009bb4:	e7fb      	b.n	8009bae <__mcmp+0x2a>
 8009bb6:	2001      	movs	r0, #1
 8009bb8:	e7f9      	b.n	8009bae <__mcmp+0x2a>
	...

08009bbc <__mdiff>:
 8009bbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc0:	4689      	mov	r9, r1
 8009bc2:	4606      	mov	r6, r0
 8009bc4:	4611      	mov	r1, r2
 8009bc6:	4648      	mov	r0, r9
 8009bc8:	4614      	mov	r4, r2
 8009bca:	f7ff ffdb 	bl	8009b84 <__mcmp>
 8009bce:	1e05      	subs	r5, r0, #0
 8009bd0:	d112      	bne.n	8009bf8 <__mdiff+0x3c>
 8009bd2:	4629      	mov	r1, r5
 8009bd4:	4630      	mov	r0, r6
 8009bd6:	f7ff fd11 	bl	80095fc <_Balloc>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	b928      	cbnz	r0, 8009bea <__mdiff+0x2e>
 8009bde:	4b3f      	ldr	r3, [pc, #252]	@ (8009cdc <__mdiff+0x120>)
 8009be0:	f240 2137 	movw	r1, #567	@ 0x237
 8009be4:	483e      	ldr	r0, [pc, #248]	@ (8009ce0 <__mdiff+0x124>)
 8009be6:	f7fe fe53 	bl	8008890 <__assert_func>
 8009bea:	2301      	movs	r3, #1
 8009bec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	b003      	add	sp, #12
 8009bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf8:	bfbc      	itt	lt
 8009bfa:	464b      	movlt	r3, r9
 8009bfc:	46a1      	movlt	r9, r4
 8009bfe:	4630      	mov	r0, r6
 8009c00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009c04:	bfba      	itte	lt
 8009c06:	461c      	movlt	r4, r3
 8009c08:	2501      	movlt	r5, #1
 8009c0a:	2500      	movge	r5, #0
 8009c0c:	f7ff fcf6 	bl	80095fc <_Balloc>
 8009c10:	4602      	mov	r2, r0
 8009c12:	b918      	cbnz	r0, 8009c1c <__mdiff+0x60>
 8009c14:	4b31      	ldr	r3, [pc, #196]	@ (8009cdc <__mdiff+0x120>)
 8009c16:	f240 2145 	movw	r1, #581	@ 0x245
 8009c1a:	e7e3      	b.n	8009be4 <__mdiff+0x28>
 8009c1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009c20:	6926      	ldr	r6, [r4, #16]
 8009c22:	60c5      	str	r5, [r0, #12]
 8009c24:	f109 0310 	add.w	r3, r9, #16
 8009c28:	f109 0514 	add.w	r5, r9, #20
 8009c2c:	f104 0e14 	add.w	lr, r4, #20
 8009c30:	f100 0b14 	add.w	fp, r0, #20
 8009c34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009c38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009c3c:	9301      	str	r3, [sp, #4]
 8009c3e:	46d9      	mov	r9, fp
 8009c40:	f04f 0c00 	mov.w	ip, #0
 8009c44:	9b01      	ldr	r3, [sp, #4]
 8009c46:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009c4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009c4e:	9301      	str	r3, [sp, #4]
 8009c50:	fa1f f38a 	uxth.w	r3, sl
 8009c54:	4619      	mov	r1, r3
 8009c56:	b283      	uxth	r3, r0
 8009c58:	1acb      	subs	r3, r1, r3
 8009c5a:	0c00      	lsrs	r0, r0, #16
 8009c5c:	4463      	add	r3, ip
 8009c5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009c62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009c6c:	4576      	cmp	r6, lr
 8009c6e:	f849 3b04 	str.w	r3, [r9], #4
 8009c72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c76:	d8e5      	bhi.n	8009c44 <__mdiff+0x88>
 8009c78:	1b33      	subs	r3, r6, r4
 8009c7a:	3b15      	subs	r3, #21
 8009c7c:	f023 0303 	bic.w	r3, r3, #3
 8009c80:	3415      	adds	r4, #21
 8009c82:	3304      	adds	r3, #4
 8009c84:	42a6      	cmp	r6, r4
 8009c86:	bf38      	it	cc
 8009c88:	2304      	movcc	r3, #4
 8009c8a:	441d      	add	r5, r3
 8009c8c:	445b      	add	r3, fp
 8009c8e:	461e      	mov	r6, r3
 8009c90:	462c      	mov	r4, r5
 8009c92:	4544      	cmp	r4, r8
 8009c94:	d30e      	bcc.n	8009cb4 <__mdiff+0xf8>
 8009c96:	f108 0103 	add.w	r1, r8, #3
 8009c9a:	1b49      	subs	r1, r1, r5
 8009c9c:	f021 0103 	bic.w	r1, r1, #3
 8009ca0:	3d03      	subs	r5, #3
 8009ca2:	45a8      	cmp	r8, r5
 8009ca4:	bf38      	it	cc
 8009ca6:	2100      	movcc	r1, #0
 8009ca8:	440b      	add	r3, r1
 8009caa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009cae:	b191      	cbz	r1, 8009cd6 <__mdiff+0x11a>
 8009cb0:	6117      	str	r7, [r2, #16]
 8009cb2:	e79d      	b.n	8009bf0 <__mdiff+0x34>
 8009cb4:	f854 1b04 	ldr.w	r1, [r4], #4
 8009cb8:	46e6      	mov	lr, ip
 8009cba:	0c08      	lsrs	r0, r1, #16
 8009cbc:	fa1c fc81 	uxtah	ip, ip, r1
 8009cc0:	4471      	add	r1, lr
 8009cc2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009cc6:	b289      	uxth	r1, r1
 8009cc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009ccc:	f846 1b04 	str.w	r1, [r6], #4
 8009cd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009cd4:	e7dd      	b.n	8009c92 <__mdiff+0xd6>
 8009cd6:	3f01      	subs	r7, #1
 8009cd8:	e7e7      	b.n	8009caa <__mdiff+0xee>
 8009cda:	bf00      	nop
 8009cdc:	0800ca87 	.word	0x0800ca87
 8009ce0:	0800ca98 	.word	0x0800ca98

08009ce4 <__ulp>:
 8009ce4:	b082      	sub	sp, #8
 8009ce6:	ed8d 0b00 	vstr	d0, [sp]
 8009cea:	9a01      	ldr	r2, [sp, #4]
 8009cec:	4b0f      	ldr	r3, [pc, #60]	@ (8009d2c <__ulp+0x48>)
 8009cee:	4013      	ands	r3, r2
 8009cf0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	dc08      	bgt.n	8009d0a <__ulp+0x26>
 8009cf8:	425b      	negs	r3, r3
 8009cfa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009cfe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009d02:	da04      	bge.n	8009d0e <__ulp+0x2a>
 8009d04:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009d08:	4113      	asrs	r3, r2
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	e008      	b.n	8009d20 <__ulp+0x3c>
 8009d0e:	f1a2 0314 	sub.w	r3, r2, #20
 8009d12:	2b1e      	cmp	r3, #30
 8009d14:	bfda      	itte	le
 8009d16:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009d1a:	40da      	lsrle	r2, r3
 8009d1c:	2201      	movgt	r2, #1
 8009d1e:	2300      	movs	r3, #0
 8009d20:	4619      	mov	r1, r3
 8009d22:	4610      	mov	r0, r2
 8009d24:	ec41 0b10 	vmov	d0, r0, r1
 8009d28:	b002      	add	sp, #8
 8009d2a:	4770      	bx	lr
 8009d2c:	7ff00000 	.word	0x7ff00000

08009d30 <__b2d>:
 8009d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d34:	6906      	ldr	r6, [r0, #16]
 8009d36:	f100 0814 	add.w	r8, r0, #20
 8009d3a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009d3e:	1f37      	subs	r7, r6, #4
 8009d40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009d44:	4610      	mov	r0, r2
 8009d46:	f7ff fd4b 	bl	80097e0 <__hi0bits>
 8009d4a:	f1c0 0320 	rsb	r3, r0, #32
 8009d4e:	280a      	cmp	r0, #10
 8009d50:	600b      	str	r3, [r1, #0]
 8009d52:	491b      	ldr	r1, [pc, #108]	@ (8009dc0 <__b2d+0x90>)
 8009d54:	dc15      	bgt.n	8009d82 <__b2d+0x52>
 8009d56:	f1c0 0c0b 	rsb	ip, r0, #11
 8009d5a:	fa22 f30c 	lsr.w	r3, r2, ip
 8009d5e:	45b8      	cmp	r8, r7
 8009d60:	ea43 0501 	orr.w	r5, r3, r1
 8009d64:	bf34      	ite	cc
 8009d66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009d6a:	2300      	movcs	r3, #0
 8009d6c:	3015      	adds	r0, #21
 8009d6e:	fa02 f000 	lsl.w	r0, r2, r0
 8009d72:	fa23 f30c 	lsr.w	r3, r3, ip
 8009d76:	4303      	orrs	r3, r0
 8009d78:	461c      	mov	r4, r3
 8009d7a:	ec45 4b10 	vmov	d0, r4, r5
 8009d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d82:	45b8      	cmp	r8, r7
 8009d84:	bf3a      	itte	cc
 8009d86:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009d8a:	f1a6 0708 	subcc.w	r7, r6, #8
 8009d8e:	2300      	movcs	r3, #0
 8009d90:	380b      	subs	r0, #11
 8009d92:	d012      	beq.n	8009dba <__b2d+0x8a>
 8009d94:	f1c0 0120 	rsb	r1, r0, #32
 8009d98:	fa23 f401 	lsr.w	r4, r3, r1
 8009d9c:	4082      	lsls	r2, r0
 8009d9e:	4322      	orrs	r2, r4
 8009da0:	4547      	cmp	r7, r8
 8009da2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009da6:	bf8c      	ite	hi
 8009da8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009dac:	2200      	movls	r2, #0
 8009dae:	4083      	lsls	r3, r0
 8009db0:	40ca      	lsrs	r2, r1
 8009db2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009db6:	4313      	orrs	r3, r2
 8009db8:	e7de      	b.n	8009d78 <__b2d+0x48>
 8009dba:	ea42 0501 	orr.w	r5, r2, r1
 8009dbe:	e7db      	b.n	8009d78 <__b2d+0x48>
 8009dc0:	3ff00000 	.word	0x3ff00000

08009dc4 <__d2b>:
 8009dc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009dc8:	460f      	mov	r7, r1
 8009dca:	2101      	movs	r1, #1
 8009dcc:	ec59 8b10 	vmov	r8, r9, d0
 8009dd0:	4616      	mov	r6, r2
 8009dd2:	f7ff fc13 	bl	80095fc <_Balloc>
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	b930      	cbnz	r0, 8009de8 <__d2b+0x24>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	4b23      	ldr	r3, [pc, #140]	@ (8009e6c <__d2b+0xa8>)
 8009dde:	4824      	ldr	r0, [pc, #144]	@ (8009e70 <__d2b+0xac>)
 8009de0:	f240 310f 	movw	r1, #783	@ 0x30f
 8009de4:	f7fe fd54 	bl	8008890 <__assert_func>
 8009de8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009dec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009df0:	b10d      	cbz	r5, 8009df6 <__d2b+0x32>
 8009df2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009df6:	9301      	str	r3, [sp, #4]
 8009df8:	f1b8 0300 	subs.w	r3, r8, #0
 8009dfc:	d023      	beq.n	8009e46 <__d2b+0x82>
 8009dfe:	4668      	mov	r0, sp
 8009e00:	9300      	str	r3, [sp, #0]
 8009e02:	f7ff fd0c 	bl	800981e <__lo0bits>
 8009e06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009e0a:	b1d0      	cbz	r0, 8009e42 <__d2b+0x7e>
 8009e0c:	f1c0 0320 	rsb	r3, r0, #32
 8009e10:	fa02 f303 	lsl.w	r3, r2, r3
 8009e14:	430b      	orrs	r3, r1
 8009e16:	40c2      	lsrs	r2, r0
 8009e18:	6163      	str	r3, [r4, #20]
 8009e1a:	9201      	str	r2, [sp, #4]
 8009e1c:	9b01      	ldr	r3, [sp, #4]
 8009e1e:	61a3      	str	r3, [r4, #24]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	bf0c      	ite	eq
 8009e24:	2201      	moveq	r2, #1
 8009e26:	2202      	movne	r2, #2
 8009e28:	6122      	str	r2, [r4, #16]
 8009e2a:	b1a5      	cbz	r5, 8009e56 <__d2b+0x92>
 8009e2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009e30:	4405      	add	r5, r0
 8009e32:	603d      	str	r5, [r7, #0]
 8009e34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009e38:	6030      	str	r0, [r6, #0]
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	b003      	add	sp, #12
 8009e3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e42:	6161      	str	r1, [r4, #20]
 8009e44:	e7ea      	b.n	8009e1c <__d2b+0x58>
 8009e46:	a801      	add	r0, sp, #4
 8009e48:	f7ff fce9 	bl	800981e <__lo0bits>
 8009e4c:	9b01      	ldr	r3, [sp, #4]
 8009e4e:	6163      	str	r3, [r4, #20]
 8009e50:	3020      	adds	r0, #32
 8009e52:	2201      	movs	r2, #1
 8009e54:	e7e8      	b.n	8009e28 <__d2b+0x64>
 8009e56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009e5e:	6038      	str	r0, [r7, #0]
 8009e60:	6918      	ldr	r0, [r3, #16]
 8009e62:	f7ff fcbd 	bl	80097e0 <__hi0bits>
 8009e66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e6a:	e7e5      	b.n	8009e38 <__d2b+0x74>
 8009e6c:	0800ca87 	.word	0x0800ca87
 8009e70:	0800ca98 	.word	0x0800ca98

08009e74 <__ratio>:
 8009e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e78:	b085      	sub	sp, #20
 8009e7a:	e9cd 1000 	strd	r1, r0, [sp]
 8009e7e:	a902      	add	r1, sp, #8
 8009e80:	f7ff ff56 	bl	8009d30 <__b2d>
 8009e84:	9800      	ldr	r0, [sp, #0]
 8009e86:	a903      	add	r1, sp, #12
 8009e88:	ec55 4b10 	vmov	r4, r5, d0
 8009e8c:	f7ff ff50 	bl	8009d30 <__b2d>
 8009e90:	9b01      	ldr	r3, [sp, #4]
 8009e92:	6919      	ldr	r1, [r3, #16]
 8009e94:	9b00      	ldr	r3, [sp, #0]
 8009e96:	691b      	ldr	r3, [r3, #16]
 8009e98:	1ac9      	subs	r1, r1, r3
 8009e9a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009e9e:	1a9b      	subs	r3, r3, r2
 8009ea0:	ec5b ab10 	vmov	sl, fp, d0
 8009ea4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	bfce      	itee	gt
 8009eac:	462a      	movgt	r2, r5
 8009eae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009eb2:	465a      	movle	r2, fp
 8009eb4:	462f      	mov	r7, r5
 8009eb6:	46d9      	mov	r9, fp
 8009eb8:	bfcc      	ite	gt
 8009eba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009ebe:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009ec2:	464b      	mov	r3, r9
 8009ec4:	4652      	mov	r2, sl
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	4639      	mov	r1, r7
 8009eca:	f7f6 fcc7 	bl	800085c <__aeabi_ddiv>
 8009ece:	ec41 0b10 	vmov	d0, r0, r1
 8009ed2:	b005      	add	sp, #20
 8009ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ed8 <__copybits>:
 8009ed8:	3901      	subs	r1, #1
 8009eda:	b570      	push	{r4, r5, r6, lr}
 8009edc:	1149      	asrs	r1, r1, #5
 8009ede:	6914      	ldr	r4, [r2, #16]
 8009ee0:	3101      	adds	r1, #1
 8009ee2:	f102 0314 	add.w	r3, r2, #20
 8009ee6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009eea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009eee:	1f05      	subs	r5, r0, #4
 8009ef0:	42a3      	cmp	r3, r4
 8009ef2:	d30c      	bcc.n	8009f0e <__copybits+0x36>
 8009ef4:	1aa3      	subs	r3, r4, r2
 8009ef6:	3b11      	subs	r3, #17
 8009ef8:	f023 0303 	bic.w	r3, r3, #3
 8009efc:	3211      	adds	r2, #17
 8009efe:	42a2      	cmp	r2, r4
 8009f00:	bf88      	it	hi
 8009f02:	2300      	movhi	r3, #0
 8009f04:	4418      	add	r0, r3
 8009f06:	2300      	movs	r3, #0
 8009f08:	4288      	cmp	r0, r1
 8009f0a:	d305      	bcc.n	8009f18 <__copybits+0x40>
 8009f0c:	bd70      	pop	{r4, r5, r6, pc}
 8009f0e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009f12:	f845 6f04 	str.w	r6, [r5, #4]!
 8009f16:	e7eb      	b.n	8009ef0 <__copybits+0x18>
 8009f18:	f840 3b04 	str.w	r3, [r0], #4
 8009f1c:	e7f4      	b.n	8009f08 <__copybits+0x30>

08009f1e <__any_on>:
 8009f1e:	f100 0214 	add.w	r2, r0, #20
 8009f22:	6900      	ldr	r0, [r0, #16]
 8009f24:	114b      	asrs	r3, r1, #5
 8009f26:	4298      	cmp	r0, r3
 8009f28:	b510      	push	{r4, lr}
 8009f2a:	db11      	blt.n	8009f50 <__any_on+0x32>
 8009f2c:	dd0a      	ble.n	8009f44 <__any_on+0x26>
 8009f2e:	f011 011f 	ands.w	r1, r1, #31
 8009f32:	d007      	beq.n	8009f44 <__any_on+0x26>
 8009f34:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009f38:	fa24 f001 	lsr.w	r0, r4, r1
 8009f3c:	fa00 f101 	lsl.w	r1, r0, r1
 8009f40:	428c      	cmp	r4, r1
 8009f42:	d10b      	bne.n	8009f5c <__any_on+0x3e>
 8009f44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d803      	bhi.n	8009f54 <__any_on+0x36>
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	bd10      	pop	{r4, pc}
 8009f50:	4603      	mov	r3, r0
 8009f52:	e7f7      	b.n	8009f44 <__any_on+0x26>
 8009f54:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f58:	2900      	cmp	r1, #0
 8009f5a:	d0f5      	beq.n	8009f48 <__any_on+0x2a>
 8009f5c:	2001      	movs	r0, #1
 8009f5e:	e7f6      	b.n	8009f4e <__any_on+0x30>

08009f60 <sulp>:
 8009f60:	b570      	push	{r4, r5, r6, lr}
 8009f62:	4604      	mov	r4, r0
 8009f64:	460d      	mov	r5, r1
 8009f66:	ec45 4b10 	vmov	d0, r4, r5
 8009f6a:	4616      	mov	r6, r2
 8009f6c:	f7ff feba 	bl	8009ce4 <__ulp>
 8009f70:	ec51 0b10 	vmov	r0, r1, d0
 8009f74:	b17e      	cbz	r6, 8009f96 <sulp+0x36>
 8009f76:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009f7a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	dd09      	ble.n	8009f96 <sulp+0x36>
 8009f82:	051b      	lsls	r3, r3, #20
 8009f84:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009f88:	2400      	movs	r4, #0
 8009f8a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009f8e:	4622      	mov	r2, r4
 8009f90:	462b      	mov	r3, r5
 8009f92:	f7f6 fb39 	bl	8000608 <__aeabi_dmul>
 8009f96:	ec41 0b10 	vmov	d0, r0, r1
 8009f9a:	bd70      	pop	{r4, r5, r6, pc}
 8009f9c:	0000      	movs	r0, r0
	...

08009fa0 <_strtod_l>:
 8009fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa4:	b09f      	sub	sp, #124	@ 0x7c
 8009fa6:	460c      	mov	r4, r1
 8009fa8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009faa:	2200      	movs	r2, #0
 8009fac:	921a      	str	r2, [sp, #104]	@ 0x68
 8009fae:	9005      	str	r0, [sp, #20]
 8009fb0:	f04f 0a00 	mov.w	sl, #0
 8009fb4:	f04f 0b00 	mov.w	fp, #0
 8009fb8:	460a      	mov	r2, r1
 8009fba:	9219      	str	r2, [sp, #100]	@ 0x64
 8009fbc:	7811      	ldrb	r1, [r2, #0]
 8009fbe:	292b      	cmp	r1, #43	@ 0x2b
 8009fc0:	d04a      	beq.n	800a058 <_strtod_l+0xb8>
 8009fc2:	d838      	bhi.n	800a036 <_strtod_l+0x96>
 8009fc4:	290d      	cmp	r1, #13
 8009fc6:	d832      	bhi.n	800a02e <_strtod_l+0x8e>
 8009fc8:	2908      	cmp	r1, #8
 8009fca:	d832      	bhi.n	800a032 <_strtod_l+0x92>
 8009fcc:	2900      	cmp	r1, #0
 8009fce:	d03b      	beq.n	800a048 <_strtod_l+0xa8>
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009fd4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009fd6:	782a      	ldrb	r2, [r5, #0]
 8009fd8:	2a30      	cmp	r2, #48	@ 0x30
 8009fda:	f040 80b3 	bne.w	800a144 <_strtod_l+0x1a4>
 8009fde:	786a      	ldrb	r2, [r5, #1]
 8009fe0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009fe4:	2a58      	cmp	r2, #88	@ 0x58
 8009fe6:	d16e      	bne.n	800a0c6 <_strtod_l+0x126>
 8009fe8:	9302      	str	r3, [sp, #8]
 8009fea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fec:	9301      	str	r3, [sp, #4]
 8009fee:	ab1a      	add	r3, sp, #104	@ 0x68
 8009ff0:	9300      	str	r3, [sp, #0]
 8009ff2:	4a8e      	ldr	r2, [pc, #568]	@ (800a22c <_strtod_l+0x28c>)
 8009ff4:	9805      	ldr	r0, [sp, #20]
 8009ff6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009ff8:	a919      	add	r1, sp, #100	@ 0x64
 8009ffa:	f001 facb 	bl	800b594 <__gethex>
 8009ffe:	f010 060f 	ands.w	r6, r0, #15
 800a002:	4604      	mov	r4, r0
 800a004:	d005      	beq.n	800a012 <_strtod_l+0x72>
 800a006:	2e06      	cmp	r6, #6
 800a008:	d128      	bne.n	800a05c <_strtod_l+0xbc>
 800a00a:	3501      	adds	r5, #1
 800a00c:	2300      	movs	r3, #0
 800a00e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a010:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a012:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a014:	2b00      	cmp	r3, #0
 800a016:	f040 858e 	bne.w	800ab36 <_strtod_l+0xb96>
 800a01a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a01c:	b1cb      	cbz	r3, 800a052 <_strtod_l+0xb2>
 800a01e:	4652      	mov	r2, sl
 800a020:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a024:	ec43 2b10 	vmov	d0, r2, r3
 800a028:	b01f      	add	sp, #124	@ 0x7c
 800a02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a02e:	2920      	cmp	r1, #32
 800a030:	d1ce      	bne.n	8009fd0 <_strtod_l+0x30>
 800a032:	3201      	adds	r2, #1
 800a034:	e7c1      	b.n	8009fba <_strtod_l+0x1a>
 800a036:	292d      	cmp	r1, #45	@ 0x2d
 800a038:	d1ca      	bne.n	8009fd0 <_strtod_l+0x30>
 800a03a:	2101      	movs	r1, #1
 800a03c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a03e:	1c51      	adds	r1, r2, #1
 800a040:	9119      	str	r1, [sp, #100]	@ 0x64
 800a042:	7852      	ldrb	r2, [r2, #1]
 800a044:	2a00      	cmp	r2, #0
 800a046:	d1c5      	bne.n	8009fd4 <_strtod_l+0x34>
 800a048:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a04a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f040 8570 	bne.w	800ab32 <_strtod_l+0xb92>
 800a052:	4652      	mov	r2, sl
 800a054:	465b      	mov	r3, fp
 800a056:	e7e5      	b.n	800a024 <_strtod_l+0x84>
 800a058:	2100      	movs	r1, #0
 800a05a:	e7ef      	b.n	800a03c <_strtod_l+0x9c>
 800a05c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a05e:	b13a      	cbz	r2, 800a070 <_strtod_l+0xd0>
 800a060:	2135      	movs	r1, #53	@ 0x35
 800a062:	a81c      	add	r0, sp, #112	@ 0x70
 800a064:	f7ff ff38 	bl	8009ed8 <__copybits>
 800a068:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a06a:	9805      	ldr	r0, [sp, #20]
 800a06c:	f7ff fb06 	bl	800967c <_Bfree>
 800a070:	3e01      	subs	r6, #1
 800a072:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a074:	2e04      	cmp	r6, #4
 800a076:	d806      	bhi.n	800a086 <_strtod_l+0xe6>
 800a078:	e8df f006 	tbb	[pc, r6]
 800a07c:	201d0314 	.word	0x201d0314
 800a080:	14          	.byte	0x14
 800a081:	00          	.byte	0x00
 800a082:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a086:	05e1      	lsls	r1, r4, #23
 800a088:	bf48      	it	mi
 800a08a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a08e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a092:	0d1b      	lsrs	r3, r3, #20
 800a094:	051b      	lsls	r3, r3, #20
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1bb      	bne.n	800a012 <_strtod_l+0x72>
 800a09a:	f7fe fbb7 	bl	800880c <__errno>
 800a09e:	2322      	movs	r3, #34	@ 0x22
 800a0a0:	6003      	str	r3, [r0, #0]
 800a0a2:	e7b6      	b.n	800a012 <_strtod_l+0x72>
 800a0a4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a0a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a0ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a0b0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a0b4:	e7e7      	b.n	800a086 <_strtod_l+0xe6>
 800a0b6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a234 <_strtod_l+0x294>
 800a0ba:	e7e4      	b.n	800a086 <_strtod_l+0xe6>
 800a0bc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a0c0:	f04f 3aff 	mov.w	sl, #4294967295
 800a0c4:	e7df      	b.n	800a086 <_strtod_l+0xe6>
 800a0c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0c8:	1c5a      	adds	r2, r3, #1
 800a0ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0cc:	785b      	ldrb	r3, [r3, #1]
 800a0ce:	2b30      	cmp	r3, #48	@ 0x30
 800a0d0:	d0f9      	beq.n	800a0c6 <_strtod_l+0x126>
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d09d      	beq.n	800a012 <_strtod_l+0x72>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800a0de:	2300      	movs	r3, #0
 800a0e0:	9308      	str	r3, [sp, #32]
 800a0e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0e4:	461f      	mov	r7, r3
 800a0e6:	220a      	movs	r2, #10
 800a0e8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a0ea:	7805      	ldrb	r5, [r0, #0]
 800a0ec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a0f0:	b2d9      	uxtb	r1, r3
 800a0f2:	2909      	cmp	r1, #9
 800a0f4:	d928      	bls.n	800a148 <_strtod_l+0x1a8>
 800a0f6:	494e      	ldr	r1, [pc, #312]	@ (800a230 <_strtod_l+0x290>)
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f001 f98b 	bl	800b414 <strncmp>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d032      	beq.n	800a168 <_strtod_l+0x1c8>
 800a102:	2000      	movs	r0, #0
 800a104:	462a      	mov	r2, r5
 800a106:	4681      	mov	r9, r0
 800a108:	463d      	mov	r5, r7
 800a10a:	4603      	mov	r3, r0
 800a10c:	2a65      	cmp	r2, #101	@ 0x65
 800a10e:	d001      	beq.n	800a114 <_strtod_l+0x174>
 800a110:	2a45      	cmp	r2, #69	@ 0x45
 800a112:	d114      	bne.n	800a13e <_strtod_l+0x19e>
 800a114:	b91d      	cbnz	r5, 800a11e <_strtod_l+0x17e>
 800a116:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a118:	4302      	orrs	r2, r0
 800a11a:	d095      	beq.n	800a048 <_strtod_l+0xa8>
 800a11c:	2500      	movs	r5, #0
 800a11e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a120:	1c62      	adds	r2, r4, #1
 800a122:	9219      	str	r2, [sp, #100]	@ 0x64
 800a124:	7862      	ldrb	r2, [r4, #1]
 800a126:	2a2b      	cmp	r2, #43	@ 0x2b
 800a128:	d077      	beq.n	800a21a <_strtod_l+0x27a>
 800a12a:	2a2d      	cmp	r2, #45	@ 0x2d
 800a12c:	d07b      	beq.n	800a226 <_strtod_l+0x286>
 800a12e:	f04f 0c00 	mov.w	ip, #0
 800a132:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a136:	2909      	cmp	r1, #9
 800a138:	f240 8082 	bls.w	800a240 <_strtod_l+0x2a0>
 800a13c:	9419      	str	r4, [sp, #100]	@ 0x64
 800a13e:	f04f 0800 	mov.w	r8, #0
 800a142:	e0a2      	b.n	800a28a <_strtod_l+0x2ea>
 800a144:	2300      	movs	r3, #0
 800a146:	e7c7      	b.n	800a0d8 <_strtod_l+0x138>
 800a148:	2f08      	cmp	r7, #8
 800a14a:	bfd5      	itete	le
 800a14c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a14e:	9908      	ldrgt	r1, [sp, #32]
 800a150:	fb02 3301 	mlale	r3, r2, r1, r3
 800a154:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a158:	f100 0001 	add.w	r0, r0, #1
 800a15c:	bfd4      	ite	le
 800a15e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a160:	9308      	strgt	r3, [sp, #32]
 800a162:	3701      	adds	r7, #1
 800a164:	9019      	str	r0, [sp, #100]	@ 0x64
 800a166:	e7bf      	b.n	800a0e8 <_strtod_l+0x148>
 800a168:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a16a:	1c5a      	adds	r2, r3, #1
 800a16c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a16e:	785a      	ldrb	r2, [r3, #1]
 800a170:	b37f      	cbz	r7, 800a1d2 <_strtod_l+0x232>
 800a172:	4681      	mov	r9, r0
 800a174:	463d      	mov	r5, r7
 800a176:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a17a:	2b09      	cmp	r3, #9
 800a17c:	d912      	bls.n	800a1a4 <_strtod_l+0x204>
 800a17e:	2301      	movs	r3, #1
 800a180:	e7c4      	b.n	800a10c <_strtod_l+0x16c>
 800a182:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a184:	1c5a      	adds	r2, r3, #1
 800a186:	9219      	str	r2, [sp, #100]	@ 0x64
 800a188:	785a      	ldrb	r2, [r3, #1]
 800a18a:	3001      	adds	r0, #1
 800a18c:	2a30      	cmp	r2, #48	@ 0x30
 800a18e:	d0f8      	beq.n	800a182 <_strtod_l+0x1e2>
 800a190:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a194:	2b08      	cmp	r3, #8
 800a196:	f200 84d3 	bhi.w	800ab40 <_strtod_l+0xba0>
 800a19a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a19c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a19e:	4681      	mov	r9, r0
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	4605      	mov	r5, r0
 800a1a4:	3a30      	subs	r2, #48	@ 0x30
 800a1a6:	f100 0301 	add.w	r3, r0, #1
 800a1aa:	d02a      	beq.n	800a202 <_strtod_l+0x262>
 800a1ac:	4499      	add	r9, r3
 800a1ae:	eb00 0c05 	add.w	ip, r0, r5
 800a1b2:	462b      	mov	r3, r5
 800a1b4:	210a      	movs	r1, #10
 800a1b6:	4563      	cmp	r3, ip
 800a1b8:	d10d      	bne.n	800a1d6 <_strtod_l+0x236>
 800a1ba:	1c69      	adds	r1, r5, #1
 800a1bc:	4401      	add	r1, r0
 800a1be:	4428      	add	r0, r5
 800a1c0:	2808      	cmp	r0, #8
 800a1c2:	dc16      	bgt.n	800a1f2 <_strtod_l+0x252>
 800a1c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a1c6:	230a      	movs	r3, #10
 800a1c8:	fb03 2300 	mla	r3, r3, r0, r2
 800a1cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	e018      	b.n	800a204 <_strtod_l+0x264>
 800a1d2:	4638      	mov	r0, r7
 800a1d4:	e7da      	b.n	800a18c <_strtod_l+0x1ec>
 800a1d6:	2b08      	cmp	r3, #8
 800a1d8:	f103 0301 	add.w	r3, r3, #1
 800a1dc:	dc03      	bgt.n	800a1e6 <_strtod_l+0x246>
 800a1de:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a1e0:	434e      	muls	r6, r1
 800a1e2:	960a      	str	r6, [sp, #40]	@ 0x28
 800a1e4:	e7e7      	b.n	800a1b6 <_strtod_l+0x216>
 800a1e6:	2b10      	cmp	r3, #16
 800a1e8:	bfde      	ittt	le
 800a1ea:	9e08      	ldrle	r6, [sp, #32]
 800a1ec:	434e      	mulle	r6, r1
 800a1ee:	9608      	strle	r6, [sp, #32]
 800a1f0:	e7e1      	b.n	800a1b6 <_strtod_l+0x216>
 800a1f2:	280f      	cmp	r0, #15
 800a1f4:	dceb      	bgt.n	800a1ce <_strtod_l+0x22e>
 800a1f6:	9808      	ldr	r0, [sp, #32]
 800a1f8:	230a      	movs	r3, #10
 800a1fa:	fb03 2300 	mla	r3, r3, r0, r2
 800a1fe:	9308      	str	r3, [sp, #32]
 800a200:	e7e5      	b.n	800a1ce <_strtod_l+0x22e>
 800a202:	4629      	mov	r1, r5
 800a204:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a206:	1c50      	adds	r0, r2, #1
 800a208:	9019      	str	r0, [sp, #100]	@ 0x64
 800a20a:	7852      	ldrb	r2, [r2, #1]
 800a20c:	4618      	mov	r0, r3
 800a20e:	460d      	mov	r5, r1
 800a210:	e7b1      	b.n	800a176 <_strtod_l+0x1d6>
 800a212:	f04f 0900 	mov.w	r9, #0
 800a216:	2301      	movs	r3, #1
 800a218:	e77d      	b.n	800a116 <_strtod_l+0x176>
 800a21a:	f04f 0c00 	mov.w	ip, #0
 800a21e:	1ca2      	adds	r2, r4, #2
 800a220:	9219      	str	r2, [sp, #100]	@ 0x64
 800a222:	78a2      	ldrb	r2, [r4, #2]
 800a224:	e785      	b.n	800a132 <_strtod_l+0x192>
 800a226:	f04f 0c01 	mov.w	ip, #1
 800a22a:	e7f8      	b.n	800a21e <_strtod_l+0x27e>
 800a22c:	0800cc08 	.word	0x0800cc08
 800a230:	0800cbf0 	.word	0x0800cbf0
 800a234:	7ff00000 	.word	0x7ff00000
 800a238:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a23a:	1c51      	adds	r1, r2, #1
 800a23c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a23e:	7852      	ldrb	r2, [r2, #1]
 800a240:	2a30      	cmp	r2, #48	@ 0x30
 800a242:	d0f9      	beq.n	800a238 <_strtod_l+0x298>
 800a244:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a248:	2908      	cmp	r1, #8
 800a24a:	f63f af78 	bhi.w	800a13e <_strtod_l+0x19e>
 800a24e:	3a30      	subs	r2, #48	@ 0x30
 800a250:	920e      	str	r2, [sp, #56]	@ 0x38
 800a252:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a254:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a256:	f04f 080a 	mov.w	r8, #10
 800a25a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a25c:	1c56      	adds	r6, r2, #1
 800a25e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a260:	7852      	ldrb	r2, [r2, #1]
 800a262:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a266:	f1be 0f09 	cmp.w	lr, #9
 800a26a:	d939      	bls.n	800a2e0 <_strtod_l+0x340>
 800a26c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a26e:	1a76      	subs	r6, r6, r1
 800a270:	2e08      	cmp	r6, #8
 800a272:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a276:	dc03      	bgt.n	800a280 <_strtod_l+0x2e0>
 800a278:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a27a:	4588      	cmp	r8, r1
 800a27c:	bfa8      	it	ge
 800a27e:	4688      	movge	r8, r1
 800a280:	f1bc 0f00 	cmp.w	ip, #0
 800a284:	d001      	beq.n	800a28a <_strtod_l+0x2ea>
 800a286:	f1c8 0800 	rsb	r8, r8, #0
 800a28a:	2d00      	cmp	r5, #0
 800a28c:	d14e      	bne.n	800a32c <_strtod_l+0x38c>
 800a28e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a290:	4308      	orrs	r0, r1
 800a292:	f47f aebe 	bne.w	800a012 <_strtod_l+0x72>
 800a296:	2b00      	cmp	r3, #0
 800a298:	f47f aed6 	bne.w	800a048 <_strtod_l+0xa8>
 800a29c:	2a69      	cmp	r2, #105	@ 0x69
 800a29e:	d028      	beq.n	800a2f2 <_strtod_l+0x352>
 800a2a0:	dc25      	bgt.n	800a2ee <_strtod_l+0x34e>
 800a2a2:	2a49      	cmp	r2, #73	@ 0x49
 800a2a4:	d025      	beq.n	800a2f2 <_strtod_l+0x352>
 800a2a6:	2a4e      	cmp	r2, #78	@ 0x4e
 800a2a8:	f47f aece 	bne.w	800a048 <_strtod_l+0xa8>
 800a2ac:	499b      	ldr	r1, [pc, #620]	@ (800a51c <_strtod_l+0x57c>)
 800a2ae:	a819      	add	r0, sp, #100	@ 0x64
 800a2b0:	f001 fb92 	bl	800b9d8 <__match>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	f43f aec7 	beq.w	800a048 <_strtod_l+0xa8>
 800a2ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	2b28      	cmp	r3, #40	@ 0x28
 800a2c0:	d12e      	bne.n	800a320 <_strtod_l+0x380>
 800a2c2:	4997      	ldr	r1, [pc, #604]	@ (800a520 <_strtod_l+0x580>)
 800a2c4:	aa1c      	add	r2, sp, #112	@ 0x70
 800a2c6:	a819      	add	r0, sp, #100	@ 0x64
 800a2c8:	f001 fb9a 	bl	800ba00 <__hexnan>
 800a2cc:	2805      	cmp	r0, #5
 800a2ce:	d127      	bne.n	800a320 <_strtod_l+0x380>
 800a2d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a2d2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a2d6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a2da:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a2de:	e698      	b.n	800a012 <_strtod_l+0x72>
 800a2e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a2e2:	fb08 2101 	mla	r1, r8, r1, r2
 800a2e6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a2ea:	920e      	str	r2, [sp, #56]	@ 0x38
 800a2ec:	e7b5      	b.n	800a25a <_strtod_l+0x2ba>
 800a2ee:	2a6e      	cmp	r2, #110	@ 0x6e
 800a2f0:	e7da      	b.n	800a2a8 <_strtod_l+0x308>
 800a2f2:	498c      	ldr	r1, [pc, #560]	@ (800a524 <_strtod_l+0x584>)
 800a2f4:	a819      	add	r0, sp, #100	@ 0x64
 800a2f6:	f001 fb6f 	bl	800b9d8 <__match>
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	f43f aea4 	beq.w	800a048 <_strtod_l+0xa8>
 800a300:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a302:	4989      	ldr	r1, [pc, #548]	@ (800a528 <_strtod_l+0x588>)
 800a304:	3b01      	subs	r3, #1
 800a306:	a819      	add	r0, sp, #100	@ 0x64
 800a308:	9319      	str	r3, [sp, #100]	@ 0x64
 800a30a:	f001 fb65 	bl	800b9d8 <__match>
 800a30e:	b910      	cbnz	r0, 800a316 <_strtod_l+0x376>
 800a310:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a312:	3301      	adds	r3, #1
 800a314:	9319      	str	r3, [sp, #100]	@ 0x64
 800a316:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a538 <_strtod_l+0x598>
 800a31a:	f04f 0a00 	mov.w	sl, #0
 800a31e:	e678      	b.n	800a012 <_strtod_l+0x72>
 800a320:	4882      	ldr	r0, [pc, #520]	@ (800a52c <_strtod_l+0x58c>)
 800a322:	f001 f8ad 	bl	800b480 <nan>
 800a326:	ec5b ab10 	vmov	sl, fp, d0
 800a32a:	e672      	b.n	800a012 <_strtod_l+0x72>
 800a32c:	eba8 0309 	sub.w	r3, r8, r9
 800a330:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a332:	9309      	str	r3, [sp, #36]	@ 0x24
 800a334:	2f00      	cmp	r7, #0
 800a336:	bf08      	it	eq
 800a338:	462f      	moveq	r7, r5
 800a33a:	2d10      	cmp	r5, #16
 800a33c:	462c      	mov	r4, r5
 800a33e:	bfa8      	it	ge
 800a340:	2410      	movge	r4, #16
 800a342:	f7f6 f8e7 	bl	8000514 <__aeabi_ui2d>
 800a346:	2d09      	cmp	r5, #9
 800a348:	4682      	mov	sl, r0
 800a34a:	468b      	mov	fp, r1
 800a34c:	dc13      	bgt.n	800a376 <_strtod_l+0x3d6>
 800a34e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a350:	2b00      	cmp	r3, #0
 800a352:	f43f ae5e 	beq.w	800a012 <_strtod_l+0x72>
 800a356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a358:	dd78      	ble.n	800a44c <_strtod_l+0x4ac>
 800a35a:	2b16      	cmp	r3, #22
 800a35c:	dc5f      	bgt.n	800a41e <_strtod_l+0x47e>
 800a35e:	4974      	ldr	r1, [pc, #464]	@ (800a530 <_strtod_l+0x590>)
 800a360:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a364:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a368:	4652      	mov	r2, sl
 800a36a:	465b      	mov	r3, fp
 800a36c:	f7f6 f94c 	bl	8000608 <__aeabi_dmul>
 800a370:	4682      	mov	sl, r0
 800a372:	468b      	mov	fp, r1
 800a374:	e64d      	b.n	800a012 <_strtod_l+0x72>
 800a376:	4b6e      	ldr	r3, [pc, #440]	@ (800a530 <_strtod_l+0x590>)
 800a378:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a37c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a380:	f7f6 f942 	bl	8000608 <__aeabi_dmul>
 800a384:	4682      	mov	sl, r0
 800a386:	9808      	ldr	r0, [sp, #32]
 800a388:	468b      	mov	fp, r1
 800a38a:	f7f6 f8c3 	bl	8000514 <__aeabi_ui2d>
 800a38e:	4602      	mov	r2, r0
 800a390:	460b      	mov	r3, r1
 800a392:	4650      	mov	r0, sl
 800a394:	4659      	mov	r1, fp
 800a396:	f7f5 ff81 	bl	800029c <__adddf3>
 800a39a:	2d0f      	cmp	r5, #15
 800a39c:	4682      	mov	sl, r0
 800a39e:	468b      	mov	fp, r1
 800a3a0:	ddd5      	ble.n	800a34e <_strtod_l+0x3ae>
 800a3a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3a4:	1b2c      	subs	r4, r5, r4
 800a3a6:	441c      	add	r4, r3
 800a3a8:	2c00      	cmp	r4, #0
 800a3aa:	f340 8096 	ble.w	800a4da <_strtod_l+0x53a>
 800a3ae:	f014 030f 	ands.w	r3, r4, #15
 800a3b2:	d00a      	beq.n	800a3ca <_strtod_l+0x42a>
 800a3b4:	495e      	ldr	r1, [pc, #376]	@ (800a530 <_strtod_l+0x590>)
 800a3b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a3ba:	4652      	mov	r2, sl
 800a3bc:	465b      	mov	r3, fp
 800a3be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3c2:	f7f6 f921 	bl	8000608 <__aeabi_dmul>
 800a3c6:	4682      	mov	sl, r0
 800a3c8:	468b      	mov	fp, r1
 800a3ca:	f034 040f 	bics.w	r4, r4, #15
 800a3ce:	d073      	beq.n	800a4b8 <_strtod_l+0x518>
 800a3d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a3d4:	dd48      	ble.n	800a468 <_strtod_l+0x4c8>
 800a3d6:	2400      	movs	r4, #0
 800a3d8:	46a0      	mov	r8, r4
 800a3da:	940a      	str	r4, [sp, #40]	@ 0x28
 800a3dc:	46a1      	mov	r9, r4
 800a3de:	9a05      	ldr	r2, [sp, #20]
 800a3e0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a538 <_strtod_l+0x598>
 800a3e4:	2322      	movs	r3, #34	@ 0x22
 800a3e6:	6013      	str	r3, [r2, #0]
 800a3e8:	f04f 0a00 	mov.w	sl, #0
 800a3ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f43f ae0f 	beq.w	800a012 <_strtod_l+0x72>
 800a3f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3f6:	9805      	ldr	r0, [sp, #20]
 800a3f8:	f7ff f940 	bl	800967c <_Bfree>
 800a3fc:	9805      	ldr	r0, [sp, #20]
 800a3fe:	4649      	mov	r1, r9
 800a400:	f7ff f93c 	bl	800967c <_Bfree>
 800a404:	9805      	ldr	r0, [sp, #20]
 800a406:	4641      	mov	r1, r8
 800a408:	f7ff f938 	bl	800967c <_Bfree>
 800a40c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a40e:	9805      	ldr	r0, [sp, #20]
 800a410:	f7ff f934 	bl	800967c <_Bfree>
 800a414:	9805      	ldr	r0, [sp, #20]
 800a416:	4621      	mov	r1, r4
 800a418:	f7ff f930 	bl	800967c <_Bfree>
 800a41c:	e5f9      	b.n	800a012 <_strtod_l+0x72>
 800a41e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a420:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a424:	4293      	cmp	r3, r2
 800a426:	dbbc      	blt.n	800a3a2 <_strtod_l+0x402>
 800a428:	4c41      	ldr	r4, [pc, #260]	@ (800a530 <_strtod_l+0x590>)
 800a42a:	f1c5 050f 	rsb	r5, r5, #15
 800a42e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a432:	4652      	mov	r2, sl
 800a434:	465b      	mov	r3, fp
 800a436:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a43a:	f7f6 f8e5 	bl	8000608 <__aeabi_dmul>
 800a43e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a440:	1b5d      	subs	r5, r3, r5
 800a442:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a446:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a44a:	e78f      	b.n	800a36c <_strtod_l+0x3cc>
 800a44c:	3316      	adds	r3, #22
 800a44e:	dba8      	blt.n	800a3a2 <_strtod_l+0x402>
 800a450:	4b37      	ldr	r3, [pc, #220]	@ (800a530 <_strtod_l+0x590>)
 800a452:	eba9 0808 	sub.w	r8, r9, r8
 800a456:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a45a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a45e:	4650      	mov	r0, sl
 800a460:	4659      	mov	r1, fp
 800a462:	f7f6 f9fb 	bl	800085c <__aeabi_ddiv>
 800a466:	e783      	b.n	800a370 <_strtod_l+0x3d0>
 800a468:	4b32      	ldr	r3, [pc, #200]	@ (800a534 <_strtod_l+0x594>)
 800a46a:	9308      	str	r3, [sp, #32]
 800a46c:	2300      	movs	r3, #0
 800a46e:	1124      	asrs	r4, r4, #4
 800a470:	4650      	mov	r0, sl
 800a472:	4659      	mov	r1, fp
 800a474:	461e      	mov	r6, r3
 800a476:	2c01      	cmp	r4, #1
 800a478:	dc21      	bgt.n	800a4be <_strtod_l+0x51e>
 800a47a:	b10b      	cbz	r3, 800a480 <_strtod_l+0x4e0>
 800a47c:	4682      	mov	sl, r0
 800a47e:	468b      	mov	fp, r1
 800a480:	492c      	ldr	r1, [pc, #176]	@ (800a534 <_strtod_l+0x594>)
 800a482:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a486:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a48a:	4652      	mov	r2, sl
 800a48c:	465b      	mov	r3, fp
 800a48e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a492:	f7f6 f8b9 	bl	8000608 <__aeabi_dmul>
 800a496:	4b28      	ldr	r3, [pc, #160]	@ (800a538 <_strtod_l+0x598>)
 800a498:	460a      	mov	r2, r1
 800a49a:	400b      	ands	r3, r1
 800a49c:	4927      	ldr	r1, [pc, #156]	@ (800a53c <_strtod_l+0x59c>)
 800a49e:	428b      	cmp	r3, r1
 800a4a0:	4682      	mov	sl, r0
 800a4a2:	d898      	bhi.n	800a3d6 <_strtod_l+0x436>
 800a4a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a4a8:	428b      	cmp	r3, r1
 800a4aa:	bf86      	itte	hi
 800a4ac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a540 <_strtod_l+0x5a0>
 800a4b0:	f04f 3aff 	movhi.w	sl, #4294967295
 800a4b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	9308      	str	r3, [sp, #32]
 800a4bc:	e07a      	b.n	800a5b4 <_strtod_l+0x614>
 800a4be:	07e2      	lsls	r2, r4, #31
 800a4c0:	d505      	bpl.n	800a4ce <_strtod_l+0x52e>
 800a4c2:	9b08      	ldr	r3, [sp, #32]
 800a4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c8:	f7f6 f89e 	bl	8000608 <__aeabi_dmul>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	9a08      	ldr	r2, [sp, #32]
 800a4d0:	3208      	adds	r2, #8
 800a4d2:	3601      	adds	r6, #1
 800a4d4:	1064      	asrs	r4, r4, #1
 800a4d6:	9208      	str	r2, [sp, #32]
 800a4d8:	e7cd      	b.n	800a476 <_strtod_l+0x4d6>
 800a4da:	d0ed      	beq.n	800a4b8 <_strtod_l+0x518>
 800a4dc:	4264      	negs	r4, r4
 800a4de:	f014 020f 	ands.w	r2, r4, #15
 800a4e2:	d00a      	beq.n	800a4fa <_strtod_l+0x55a>
 800a4e4:	4b12      	ldr	r3, [pc, #72]	@ (800a530 <_strtod_l+0x590>)
 800a4e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4ea:	4650      	mov	r0, sl
 800a4ec:	4659      	mov	r1, fp
 800a4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f2:	f7f6 f9b3 	bl	800085c <__aeabi_ddiv>
 800a4f6:	4682      	mov	sl, r0
 800a4f8:	468b      	mov	fp, r1
 800a4fa:	1124      	asrs	r4, r4, #4
 800a4fc:	d0dc      	beq.n	800a4b8 <_strtod_l+0x518>
 800a4fe:	2c1f      	cmp	r4, #31
 800a500:	dd20      	ble.n	800a544 <_strtod_l+0x5a4>
 800a502:	2400      	movs	r4, #0
 800a504:	46a0      	mov	r8, r4
 800a506:	940a      	str	r4, [sp, #40]	@ 0x28
 800a508:	46a1      	mov	r9, r4
 800a50a:	9a05      	ldr	r2, [sp, #20]
 800a50c:	2322      	movs	r3, #34	@ 0x22
 800a50e:	f04f 0a00 	mov.w	sl, #0
 800a512:	f04f 0b00 	mov.w	fp, #0
 800a516:	6013      	str	r3, [r2, #0]
 800a518:	e768      	b.n	800a3ec <_strtod_l+0x44c>
 800a51a:	bf00      	nop
 800a51c:	0800c9a3 	.word	0x0800c9a3
 800a520:	0800cbf4 	.word	0x0800cbf4
 800a524:	0800c99b 	.word	0x0800c99b
 800a528:	0800ca0e 	.word	0x0800ca0e
 800a52c:	0800ca0a 	.word	0x0800ca0a
 800a530:	0800cb28 	.word	0x0800cb28
 800a534:	0800cb00 	.word	0x0800cb00
 800a538:	7ff00000 	.word	0x7ff00000
 800a53c:	7ca00000 	.word	0x7ca00000
 800a540:	7fefffff 	.word	0x7fefffff
 800a544:	f014 0310 	ands.w	r3, r4, #16
 800a548:	bf18      	it	ne
 800a54a:	236a      	movne	r3, #106	@ 0x6a
 800a54c:	4ea9      	ldr	r6, [pc, #676]	@ (800a7f4 <_strtod_l+0x854>)
 800a54e:	9308      	str	r3, [sp, #32]
 800a550:	4650      	mov	r0, sl
 800a552:	4659      	mov	r1, fp
 800a554:	2300      	movs	r3, #0
 800a556:	07e2      	lsls	r2, r4, #31
 800a558:	d504      	bpl.n	800a564 <_strtod_l+0x5c4>
 800a55a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a55e:	f7f6 f853 	bl	8000608 <__aeabi_dmul>
 800a562:	2301      	movs	r3, #1
 800a564:	1064      	asrs	r4, r4, #1
 800a566:	f106 0608 	add.w	r6, r6, #8
 800a56a:	d1f4      	bne.n	800a556 <_strtod_l+0x5b6>
 800a56c:	b10b      	cbz	r3, 800a572 <_strtod_l+0x5d2>
 800a56e:	4682      	mov	sl, r0
 800a570:	468b      	mov	fp, r1
 800a572:	9b08      	ldr	r3, [sp, #32]
 800a574:	b1b3      	cbz	r3, 800a5a4 <_strtod_l+0x604>
 800a576:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a57a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a57e:	2b00      	cmp	r3, #0
 800a580:	4659      	mov	r1, fp
 800a582:	dd0f      	ble.n	800a5a4 <_strtod_l+0x604>
 800a584:	2b1f      	cmp	r3, #31
 800a586:	dd55      	ble.n	800a634 <_strtod_l+0x694>
 800a588:	2b34      	cmp	r3, #52	@ 0x34
 800a58a:	bfde      	ittt	le
 800a58c:	f04f 33ff 	movle.w	r3, #4294967295
 800a590:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a594:	4093      	lslle	r3, r2
 800a596:	f04f 0a00 	mov.w	sl, #0
 800a59a:	bfcc      	ite	gt
 800a59c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a5a0:	ea03 0b01 	andle.w	fp, r3, r1
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	4650      	mov	r0, sl
 800a5aa:	4659      	mov	r1, fp
 800a5ac:	f7f6 fa94 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	d1a6      	bne.n	800a502 <_strtod_l+0x562>
 800a5b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5b6:	9300      	str	r3, [sp, #0]
 800a5b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a5ba:	9805      	ldr	r0, [sp, #20]
 800a5bc:	462b      	mov	r3, r5
 800a5be:	463a      	mov	r2, r7
 800a5c0:	f7ff f8c4 	bl	800974c <__s2b>
 800a5c4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	f43f af05 	beq.w	800a3d6 <_strtod_l+0x436>
 800a5cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5ce:	2a00      	cmp	r2, #0
 800a5d0:	eba9 0308 	sub.w	r3, r9, r8
 800a5d4:	bfa8      	it	ge
 800a5d6:	2300      	movge	r3, #0
 800a5d8:	9312      	str	r3, [sp, #72]	@ 0x48
 800a5da:	2400      	movs	r4, #0
 800a5dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a5e0:	9316      	str	r3, [sp, #88]	@ 0x58
 800a5e2:	46a0      	mov	r8, r4
 800a5e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5e6:	9805      	ldr	r0, [sp, #20]
 800a5e8:	6859      	ldr	r1, [r3, #4]
 800a5ea:	f7ff f807 	bl	80095fc <_Balloc>
 800a5ee:	4681      	mov	r9, r0
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	f43f aef4 	beq.w	800a3de <_strtod_l+0x43e>
 800a5f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5f8:	691a      	ldr	r2, [r3, #16]
 800a5fa:	3202      	adds	r2, #2
 800a5fc:	f103 010c 	add.w	r1, r3, #12
 800a600:	0092      	lsls	r2, r2, #2
 800a602:	300c      	adds	r0, #12
 800a604:	f7fe f92f 	bl	8008866 <memcpy>
 800a608:	ec4b ab10 	vmov	d0, sl, fp
 800a60c:	9805      	ldr	r0, [sp, #20]
 800a60e:	aa1c      	add	r2, sp, #112	@ 0x70
 800a610:	a91b      	add	r1, sp, #108	@ 0x6c
 800a612:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a616:	f7ff fbd5 	bl	8009dc4 <__d2b>
 800a61a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a61c:	2800      	cmp	r0, #0
 800a61e:	f43f aede 	beq.w	800a3de <_strtod_l+0x43e>
 800a622:	9805      	ldr	r0, [sp, #20]
 800a624:	2101      	movs	r1, #1
 800a626:	f7ff f927 	bl	8009878 <__i2b>
 800a62a:	4680      	mov	r8, r0
 800a62c:	b948      	cbnz	r0, 800a642 <_strtod_l+0x6a2>
 800a62e:	f04f 0800 	mov.w	r8, #0
 800a632:	e6d4      	b.n	800a3de <_strtod_l+0x43e>
 800a634:	f04f 32ff 	mov.w	r2, #4294967295
 800a638:	fa02 f303 	lsl.w	r3, r2, r3
 800a63c:	ea03 0a0a 	and.w	sl, r3, sl
 800a640:	e7b0      	b.n	800a5a4 <_strtod_l+0x604>
 800a642:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a644:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a646:	2d00      	cmp	r5, #0
 800a648:	bfab      	itete	ge
 800a64a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a64c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a64e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a650:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a652:	bfac      	ite	ge
 800a654:	18ef      	addge	r7, r5, r3
 800a656:	1b5e      	sublt	r6, r3, r5
 800a658:	9b08      	ldr	r3, [sp, #32]
 800a65a:	1aed      	subs	r5, r5, r3
 800a65c:	4415      	add	r5, r2
 800a65e:	4b66      	ldr	r3, [pc, #408]	@ (800a7f8 <_strtod_l+0x858>)
 800a660:	3d01      	subs	r5, #1
 800a662:	429d      	cmp	r5, r3
 800a664:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a668:	da50      	bge.n	800a70c <_strtod_l+0x76c>
 800a66a:	1b5b      	subs	r3, r3, r5
 800a66c:	2b1f      	cmp	r3, #31
 800a66e:	eba2 0203 	sub.w	r2, r2, r3
 800a672:	f04f 0101 	mov.w	r1, #1
 800a676:	dc3d      	bgt.n	800a6f4 <_strtod_l+0x754>
 800a678:	fa01 f303 	lsl.w	r3, r1, r3
 800a67c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a67e:	2300      	movs	r3, #0
 800a680:	9310      	str	r3, [sp, #64]	@ 0x40
 800a682:	18bd      	adds	r5, r7, r2
 800a684:	9b08      	ldr	r3, [sp, #32]
 800a686:	42af      	cmp	r7, r5
 800a688:	4416      	add	r6, r2
 800a68a:	441e      	add	r6, r3
 800a68c:	463b      	mov	r3, r7
 800a68e:	bfa8      	it	ge
 800a690:	462b      	movge	r3, r5
 800a692:	42b3      	cmp	r3, r6
 800a694:	bfa8      	it	ge
 800a696:	4633      	movge	r3, r6
 800a698:	2b00      	cmp	r3, #0
 800a69a:	bfc2      	ittt	gt
 800a69c:	1aed      	subgt	r5, r5, r3
 800a69e:	1af6      	subgt	r6, r6, r3
 800a6a0:	1aff      	subgt	r7, r7, r3
 800a6a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	dd16      	ble.n	800a6d6 <_strtod_l+0x736>
 800a6a8:	4641      	mov	r1, r8
 800a6aa:	9805      	ldr	r0, [sp, #20]
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	f7ff f9a3 	bl	80099f8 <__pow5mult>
 800a6b2:	4680      	mov	r8, r0
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	d0ba      	beq.n	800a62e <_strtod_l+0x68e>
 800a6b8:	4601      	mov	r1, r0
 800a6ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a6bc:	9805      	ldr	r0, [sp, #20]
 800a6be:	f7ff f8f1 	bl	80098a4 <__multiply>
 800a6c2:	900e      	str	r0, [sp, #56]	@ 0x38
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	f43f ae8a 	beq.w	800a3de <_strtod_l+0x43e>
 800a6ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6cc:	9805      	ldr	r0, [sp, #20]
 800a6ce:	f7fe ffd5 	bl	800967c <_Bfree>
 800a6d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6d6:	2d00      	cmp	r5, #0
 800a6d8:	dc1d      	bgt.n	800a716 <_strtod_l+0x776>
 800a6da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	dd23      	ble.n	800a728 <_strtod_l+0x788>
 800a6e0:	4649      	mov	r1, r9
 800a6e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a6e4:	9805      	ldr	r0, [sp, #20]
 800a6e6:	f7ff f987 	bl	80099f8 <__pow5mult>
 800a6ea:	4681      	mov	r9, r0
 800a6ec:	b9e0      	cbnz	r0, 800a728 <_strtod_l+0x788>
 800a6ee:	f04f 0900 	mov.w	r9, #0
 800a6f2:	e674      	b.n	800a3de <_strtod_l+0x43e>
 800a6f4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a6f8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a6fc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a700:	35e2      	adds	r5, #226	@ 0xe2
 800a702:	fa01 f305 	lsl.w	r3, r1, r5
 800a706:	9310      	str	r3, [sp, #64]	@ 0x40
 800a708:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a70a:	e7ba      	b.n	800a682 <_strtod_l+0x6e2>
 800a70c:	2300      	movs	r3, #0
 800a70e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a710:	2301      	movs	r3, #1
 800a712:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a714:	e7b5      	b.n	800a682 <_strtod_l+0x6e2>
 800a716:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a718:	9805      	ldr	r0, [sp, #20]
 800a71a:	462a      	mov	r2, r5
 800a71c:	f7ff f9c6 	bl	8009aac <__lshift>
 800a720:	901a      	str	r0, [sp, #104]	@ 0x68
 800a722:	2800      	cmp	r0, #0
 800a724:	d1d9      	bne.n	800a6da <_strtod_l+0x73a>
 800a726:	e65a      	b.n	800a3de <_strtod_l+0x43e>
 800a728:	2e00      	cmp	r6, #0
 800a72a:	dd07      	ble.n	800a73c <_strtod_l+0x79c>
 800a72c:	4649      	mov	r1, r9
 800a72e:	9805      	ldr	r0, [sp, #20]
 800a730:	4632      	mov	r2, r6
 800a732:	f7ff f9bb 	bl	8009aac <__lshift>
 800a736:	4681      	mov	r9, r0
 800a738:	2800      	cmp	r0, #0
 800a73a:	d0d8      	beq.n	800a6ee <_strtod_l+0x74e>
 800a73c:	2f00      	cmp	r7, #0
 800a73e:	dd08      	ble.n	800a752 <_strtod_l+0x7b2>
 800a740:	4641      	mov	r1, r8
 800a742:	9805      	ldr	r0, [sp, #20]
 800a744:	463a      	mov	r2, r7
 800a746:	f7ff f9b1 	bl	8009aac <__lshift>
 800a74a:	4680      	mov	r8, r0
 800a74c:	2800      	cmp	r0, #0
 800a74e:	f43f ae46 	beq.w	800a3de <_strtod_l+0x43e>
 800a752:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a754:	9805      	ldr	r0, [sp, #20]
 800a756:	464a      	mov	r2, r9
 800a758:	f7ff fa30 	bl	8009bbc <__mdiff>
 800a75c:	4604      	mov	r4, r0
 800a75e:	2800      	cmp	r0, #0
 800a760:	f43f ae3d 	beq.w	800a3de <_strtod_l+0x43e>
 800a764:	68c3      	ldr	r3, [r0, #12]
 800a766:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a768:	2300      	movs	r3, #0
 800a76a:	60c3      	str	r3, [r0, #12]
 800a76c:	4641      	mov	r1, r8
 800a76e:	f7ff fa09 	bl	8009b84 <__mcmp>
 800a772:	2800      	cmp	r0, #0
 800a774:	da46      	bge.n	800a804 <_strtod_l+0x864>
 800a776:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a778:	ea53 030a 	orrs.w	r3, r3, sl
 800a77c:	d16c      	bne.n	800a858 <_strtod_l+0x8b8>
 800a77e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a782:	2b00      	cmp	r3, #0
 800a784:	d168      	bne.n	800a858 <_strtod_l+0x8b8>
 800a786:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a78a:	0d1b      	lsrs	r3, r3, #20
 800a78c:	051b      	lsls	r3, r3, #20
 800a78e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a792:	d961      	bls.n	800a858 <_strtod_l+0x8b8>
 800a794:	6963      	ldr	r3, [r4, #20]
 800a796:	b913      	cbnz	r3, 800a79e <_strtod_l+0x7fe>
 800a798:	6923      	ldr	r3, [r4, #16]
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	dd5c      	ble.n	800a858 <_strtod_l+0x8b8>
 800a79e:	4621      	mov	r1, r4
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	9805      	ldr	r0, [sp, #20]
 800a7a4:	f7ff f982 	bl	8009aac <__lshift>
 800a7a8:	4641      	mov	r1, r8
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	f7ff f9ea 	bl	8009b84 <__mcmp>
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	dd51      	ble.n	800a858 <_strtod_l+0x8b8>
 800a7b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a7b8:	9a08      	ldr	r2, [sp, #32]
 800a7ba:	0d1b      	lsrs	r3, r3, #20
 800a7bc:	051b      	lsls	r3, r3, #20
 800a7be:	2a00      	cmp	r2, #0
 800a7c0:	d06b      	beq.n	800a89a <_strtod_l+0x8fa>
 800a7c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a7c6:	d868      	bhi.n	800a89a <_strtod_l+0x8fa>
 800a7c8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a7cc:	f67f ae9d 	bls.w	800a50a <_strtod_l+0x56a>
 800a7d0:	4b0a      	ldr	r3, [pc, #40]	@ (800a7fc <_strtod_l+0x85c>)
 800a7d2:	4650      	mov	r0, sl
 800a7d4:	4659      	mov	r1, fp
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f7f5 ff16 	bl	8000608 <__aeabi_dmul>
 800a7dc:	4b08      	ldr	r3, [pc, #32]	@ (800a800 <_strtod_l+0x860>)
 800a7de:	400b      	ands	r3, r1
 800a7e0:	4682      	mov	sl, r0
 800a7e2:	468b      	mov	fp, r1
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f47f ae05 	bne.w	800a3f4 <_strtod_l+0x454>
 800a7ea:	9a05      	ldr	r2, [sp, #20]
 800a7ec:	2322      	movs	r3, #34	@ 0x22
 800a7ee:	6013      	str	r3, [r2, #0]
 800a7f0:	e600      	b.n	800a3f4 <_strtod_l+0x454>
 800a7f2:	bf00      	nop
 800a7f4:	0800cc20 	.word	0x0800cc20
 800a7f8:	fffffc02 	.word	0xfffffc02
 800a7fc:	39500000 	.word	0x39500000
 800a800:	7ff00000 	.word	0x7ff00000
 800a804:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a808:	d165      	bne.n	800a8d6 <_strtod_l+0x936>
 800a80a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a80c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a810:	b35a      	cbz	r2, 800a86a <_strtod_l+0x8ca>
 800a812:	4a9f      	ldr	r2, [pc, #636]	@ (800aa90 <_strtod_l+0xaf0>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d12b      	bne.n	800a870 <_strtod_l+0x8d0>
 800a818:	9b08      	ldr	r3, [sp, #32]
 800a81a:	4651      	mov	r1, sl
 800a81c:	b303      	cbz	r3, 800a860 <_strtod_l+0x8c0>
 800a81e:	4b9d      	ldr	r3, [pc, #628]	@ (800aa94 <_strtod_l+0xaf4>)
 800a820:	465a      	mov	r2, fp
 800a822:	4013      	ands	r3, r2
 800a824:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a828:	f04f 32ff 	mov.w	r2, #4294967295
 800a82c:	d81b      	bhi.n	800a866 <_strtod_l+0x8c6>
 800a82e:	0d1b      	lsrs	r3, r3, #20
 800a830:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a834:	fa02 f303 	lsl.w	r3, r2, r3
 800a838:	4299      	cmp	r1, r3
 800a83a:	d119      	bne.n	800a870 <_strtod_l+0x8d0>
 800a83c:	4b96      	ldr	r3, [pc, #600]	@ (800aa98 <_strtod_l+0xaf8>)
 800a83e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a840:	429a      	cmp	r2, r3
 800a842:	d102      	bne.n	800a84a <_strtod_l+0x8aa>
 800a844:	3101      	adds	r1, #1
 800a846:	f43f adca 	beq.w	800a3de <_strtod_l+0x43e>
 800a84a:	4b92      	ldr	r3, [pc, #584]	@ (800aa94 <_strtod_l+0xaf4>)
 800a84c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a84e:	401a      	ands	r2, r3
 800a850:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a854:	f04f 0a00 	mov.w	sl, #0
 800a858:	9b08      	ldr	r3, [sp, #32]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d1b8      	bne.n	800a7d0 <_strtod_l+0x830>
 800a85e:	e5c9      	b.n	800a3f4 <_strtod_l+0x454>
 800a860:	f04f 33ff 	mov.w	r3, #4294967295
 800a864:	e7e8      	b.n	800a838 <_strtod_l+0x898>
 800a866:	4613      	mov	r3, r2
 800a868:	e7e6      	b.n	800a838 <_strtod_l+0x898>
 800a86a:	ea53 030a 	orrs.w	r3, r3, sl
 800a86e:	d0a1      	beq.n	800a7b4 <_strtod_l+0x814>
 800a870:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a872:	b1db      	cbz	r3, 800a8ac <_strtod_l+0x90c>
 800a874:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a876:	4213      	tst	r3, r2
 800a878:	d0ee      	beq.n	800a858 <_strtod_l+0x8b8>
 800a87a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a87c:	9a08      	ldr	r2, [sp, #32]
 800a87e:	4650      	mov	r0, sl
 800a880:	4659      	mov	r1, fp
 800a882:	b1bb      	cbz	r3, 800a8b4 <_strtod_l+0x914>
 800a884:	f7ff fb6c 	bl	8009f60 <sulp>
 800a888:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a88c:	ec53 2b10 	vmov	r2, r3, d0
 800a890:	f7f5 fd04 	bl	800029c <__adddf3>
 800a894:	4682      	mov	sl, r0
 800a896:	468b      	mov	fp, r1
 800a898:	e7de      	b.n	800a858 <_strtod_l+0x8b8>
 800a89a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a89e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a8a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a8a6:	f04f 3aff 	mov.w	sl, #4294967295
 800a8aa:	e7d5      	b.n	800a858 <_strtod_l+0x8b8>
 800a8ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a8ae:	ea13 0f0a 	tst.w	r3, sl
 800a8b2:	e7e1      	b.n	800a878 <_strtod_l+0x8d8>
 800a8b4:	f7ff fb54 	bl	8009f60 <sulp>
 800a8b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8bc:	ec53 2b10 	vmov	r2, r3, d0
 800a8c0:	f7f5 fcea 	bl	8000298 <__aeabi_dsub>
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	4682      	mov	sl, r0
 800a8ca:	468b      	mov	fp, r1
 800a8cc:	f7f6 f904 	bl	8000ad8 <__aeabi_dcmpeq>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d0c1      	beq.n	800a858 <_strtod_l+0x8b8>
 800a8d4:	e619      	b.n	800a50a <_strtod_l+0x56a>
 800a8d6:	4641      	mov	r1, r8
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f7ff facb 	bl	8009e74 <__ratio>
 800a8de:	ec57 6b10 	vmov	r6, r7, d0
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	4639      	mov	r1, r7
 800a8ec:	f7f6 f908 	bl	8000b00 <__aeabi_dcmple>
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	d06f      	beq.n	800a9d4 <_strtod_l+0xa34>
 800a8f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d17a      	bne.n	800a9f0 <_strtod_l+0xa50>
 800a8fa:	f1ba 0f00 	cmp.w	sl, #0
 800a8fe:	d158      	bne.n	800a9b2 <_strtod_l+0xa12>
 800a900:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a902:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a906:	2b00      	cmp	r3, #0
 800a908:	d15a      	bne.n	800a9c0 <_strtod_l+0xa20>
 800a90a:	4b64      	ldr	r3, [pc, #400]	@ (800aa9c <_strtod_l+0xafc>)
 800a90c:	2200      	movs	r2, #0
 800a90e:	4630      	mov	r0, r6
 800a910:	4639      	mov	r1, r7
 800a912:	f7f6 f8eb 	bl	8000aec <__aeabi_dcmplt>
 800a916:	2800      	cmp	r0, #0
 800a918:	d159      	bne.n	800a9ce <_strtod_l+0xa2e>
 800a91a:	4630      	mov	r0, r6
 800a91c:	4639      	mov	r1, r7
 800a91e:	4b60      	ldr	r3, [pc, #384]	@ (800aaa0 <_strtod_l+0xb00>)
 800a920:	2200      	movs	r2, #0
 800a922:	f7f5 fe71 	bl	8000608 <__aeabi_dmul>
 800a926:	4606      	mov	r6, r0
 800a928:	460f      	mov	r7, r1
 800a92a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a92e:	9606      	str	r6, [sp, #24]
 800a930:	9307      	str	r3, [sp, #28]
 800a932:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a936:	4d57      	ldr	r5, [pc, #348]	@ (800aa94 <_strtod_l+0xaf4>)
 800a938:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a93c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a93e:	401d      	ands	r5, r3
 800a940:	4b58      	ldr	r3, [pc, #352]	@ (800aaa4 <_strtod_l+0xb04>)
 800a942:	429d      	cmp	r5, r3
 800a944:	f040 80b2 	bne.w	800aaac <_strtod_l+0xb0c>
 800a948:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a94a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a94e:	ec4b ab10 	vmov	d0, sl, fp
 800a952:	f7ff f9c7 	bl	8009ce4 <__ulp>
 800a956:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a95a:	ec51 0b10 	vmov	r0, r1, d0
 800a95e:	f7f5 fe53 	bl	8000608 <__aeabi_dmul>
 800a962:	4652      	mov	r2, sl
 800a964:	465b      	mov	r3, fp
 800a966:	f7f5 fc99 	bl	800029c <__adddf3>
 800a96a:	460b      	mov	r3, r1
 800a96c:	4949      	ldr	r1, [pc, #292]	@ (800aa94 <_strtod_l+0xaf4>)
 800a96e:	4a4e      	ldr	r2, [pc, #312]	@ (800aaa8 <_strtod_l+0xb08>)
 800a970:	4019      	ands	r1, r3
 800a972:	4291      	cmp	r1, r2
 800a974:	4682      	mov	sl, r0
 800a976:	d942      	bls.n	800a9fe <_strtod_l+0xa5e>
 800a978:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a97a:	4b47      	ldr	r3, [pc, #284]	@ (800aa98 <_strtod_l+0xaf8>)
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d103      	bne.n	800a988 <_strtod_l+0x9e8>
 800a980:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a982:	3301      	adds	r3, #1
 800a984:	f43f ad2b 	beq.w	800a3de <_strtod_l+0x43e>
 800a988:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800aa98 <_strtod_l+0xaf8>
 800a98c:	f04f 3aff 	mov.w	sl, #4294967295
 800a990:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a992:	9805      	ldr	r0, [sp, #20]
 800a994:	f7fe fe72 	bl	800967c <_Bfree>
 800a998:	9805      	ldr	r0, [sp, #20]
 800a99a:	4649      	mov	r1, r9
 800a99c:	f7fe fe6e 	bl	800967c <_Bfree>
 800a9a0:	9805      	ldr	r0, [sp, #20]
 800a9a2:	4641      	mov	r1, r8
 800a9a4:	f7fe fe6a 	bl	800967c <_Bfree>
 800a9a8:	9805      	ldr	r0, [sp, #20]
 800a9aa:	4621      	mov	r1, r4
 800a9ac:	f7fe fe66 	bl	800967c <_Bfree>
 800a9b0:	e618      	b.n	800a5e4 <_strtod_l+0x644>
 800a9b2:	f1ba 0f01 	cmp.w	sl, #1
 800a9b6:	d103      	bne.n	800a9c0 <_strtod_l+0xa20>
 800a9b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f43f ada5 	beq.w	800a50a <_strtod_l+0x56a>
 800a9c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800aa70 <_strtod_l+0xad0>
 800a9c4:	4f35      	ldr	r7, [pc, #212]	@ (800aa9c <_strtod_l+0xafc>)
 800a9c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a9ca:	2600      	movs	r6, #0
 800a9cc:	e7b1      	b.n	800a932 <_strtod_l+0x992>
 800a9ce:	4f34      	ldr	r7, [pc, #208]	@ (800aaa0 <_strtod_l+0xb00>)
 800a9d0:	2600      	movs	r6, #0
 800a9d2:	e7aa      	b.n	800a92a <_strtod_l+0x98a>
 800a9d4:	4b32      	ldr	r3, [pc, #200]	@ (800aaa0 <_strtod_l+0xb00>)
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	4639      	mov	r1, r7
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f7f5 fe14 	bl	8000608 <__aeabi_dmul>
 800a9e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9e2:	4606      	mov	r6, r0
 800a9e4:	460f      	mov	r7, r1
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d09f      	beq.n	800a92a <_strtod_l+0x98a>
 800a9ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a9ee:	e7a0      	b.n	800a932 <_strtod_l+0x992>
 800a9f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800aa78 <_strtod_l+0xad8>
 800a9f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a9f8:	ec57 6b17 	vmov	r6, r7, d7
 800a9fc:	e799      	b.n	800a932 <_strtod_l+0x992>
 800a9fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800aa02:	9b08      	ldr	r3, [sp, #32]
 800aa04:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1c1      	bne.n	800a990 <_strtod_l+0x9f0>
 800aa0c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aa10:	0d1b      	lsrs	r3, r3, #20
 800aa12:	051b      	lsls	r3, r3, #20
 800aa14:	429d      	cmp	r5, r3
 800aa16:	d1bb      	bne.n	800a990 <_strtod_l+0x9f0>
 800aa18:	4630      	mov	r0, r6
 800aa1a:	4639      	mov	r1, r7
 800aa1c:	f7f6 fa62 	bl	8000ee4 <__aeabi_d2lz>
 800aa20:	f7f5 fdc4 	bl	80005ac <__aeabi_l2d>
 800aa24:	4602      	mov	r2, r0
 800aa26:	460b      	mov	r3, r1
 800aa28:	4630      	mov	r0, r6
 800aa2a:	4639      	mov	r1, r7
 800aa2c:	f7f5 fc34 	bl	8000298 <__aeabi_dsub>
 800aa30:	460b      	mov	r3, r1
 800aa32:	4602      	mov	r2, r0
 800aa34:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800aa38:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800aa3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa3e:	ea46 060a 	orr.w	r6, r6, sl
 800aa42:	431e      	orrs	r6, r3
 800aa44:	d06f      	beq.n	800ab26 <_strtod_l+0xb86>
 800aa46:	a30e      	add	r3, pc, #56	@ (adr r3, 800aa80 <_strtod_l+0xae0>)
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	f7f6 f84e 	bl	8000aec <__aeabi_dcmplt>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	f47f accf 	bne.w	800a3f4 <_strtod_l+0x454>
 800aa56:	a30c      	add	r3, pc, #48	@ (adr r3, 800aa88 <_strtod_l+0xae8>)
 800aa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa60:	f7f6 f862 	bl	8000b28 <__aeabi_dcmpgt>
 800aa64:	2800      	cmp	r0, #0
 800aa66:	d093      	beq.n	800a990 <_strtod_l+0x9f0>
 800aa68:	e4c4      	b.n	800a3f4 <_strtod_l+0x454>
 800aa6a:	bf00      	nop
 800aa6c:	f3af 8000 	nop.w
 800aa70:	00000000 	.word	0x00000000
 800aa74:	bff00000 	.word	0xbff00000
 800aa78:	00000000 	.word	0x00000000
 800aa7c:	3ff00000 	.word	0x3ff00000
 800aa80:	94a03595 	.word	0x94a03595
 800aa84:	3fdfffff 	.word	0x3fdfffff
 800aa88:	35afe535 	.word	0x35afe535
 800aa8c:	3fe00000 	.word	0x3fe00000
 800aa90:	000fffff 	.word	0x000fffff
 800aa94:	7ff00000 	.word	0x7ff00000
 800aa98:	7fefffff 	.word	0x7fefffff
 800aa9c:	3ff00000 	.word	0x3ff00000
 800aaa0:	3fe00000 	.word	0x3fe00000
 800aaa4:	7fe00000 	.word	0x7fe00000
 800aaa8:	7c9fffff 	.word	0x7c9fffff
 800aaac:	9b08      	ldr	r3, [sp, #32]
 800aaae:	b323      	cbz	r3, 800aafa <_strtod_l+0xb5a>
 800aab0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800aab4:	d821      	bhi.n	800aafa <_strtod_l+0xb5a>
 800aab6:	a328      	add	r3, pc, #160	@ (adr r3, 800ab58 <_strtod_l+0xbb8>)
 800aab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabc:	4630      	mov	r0, r6
 800aabe:	4639      	mov	r1, r7
 800aac0:	f7f6 f81e 	bl	8000b00 <__aeabi_dcmple>
 800aac4:	b1a0      	cbz	r0, 800aaf0 <_strtod_l+0xb50>
 800aac6:	4639      	mov	r1, r7
 800aac8:	4630      	mov	r0, r6
 800aaca:	f7f6 f875 	bl	8000bb8 <__aeabi_d2uiz>
 800aace:	2801      	cmp	r0, #1
 800aad0:	bf38      	it	cc
 800aad2:	2001      	movcc	r0, #1
 800aad4:	f7f5 fd1e 	bl	8000514 <__aeabi_ui2d>
 800aad8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aada:	4606      	mov	r6, r0
 800aadc:	460f      	mov	r7, r1
 800aade:	b9fb      	cbnz	r3, 800ab20 <_strtod_l+0xb80>
 800aae0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aae4:	9014      	str	r0, [sp, #80]	@ 0x50
 800aae6:	9315      	str	r3, [sp, #84]	@ 0x54
 800aae8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800aaec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aaf0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aaf2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800aaf6:	1b5b      	subs	r3, r3, r5
 800aaf8:	9311      	str	r3, [sp, #68]	@ 0x44
 800aafa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aafe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ab02:	f7ff f8ef 	bl	8009ce4 <__ulp>
 800ab06:	4650      	mov	r0, sl
 800ab08:	ec53 2b10 	vmov	r2, r3, d0
 800ab0c:	4659      	mov	r1, fp
 800ab0e:	f7f5 fd7b 	bl	8000608 <__aeabi_dmul>
 800ab12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ab16:	f7f5 fbc1 	bl	800029c <__adddf3>
 800ab1a:	4682      	mov	sl, r0
 800ab1c:	468b      	mov	fp, r1
 800ab1e:	e770      	b.n	800aa02 <_strtod_l+0xa62>
 800ab20:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ab24:	e7e0      	b.n	800aae8 <_strtod_l+0xb48>
 800ab26:	a30e      	add	r3, pc, #56	@ (adr r3, 800ab60 <_strtod_l+0xbc0>)
 800ab28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2c:	f7f5 ffde 	bl	8000aec <__aeabi_dcmplt>
 800ab30:	e798      	b.n	800aa64 <_strtod_l+0xac4>
 800ab32:	2300      	movs	r3, #0
 800ab34:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab36:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ab38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab3a:	6013      	str	r3, [r2, #0]
 800ab3c:	f7ff ba6d 	b.w	800a01a <_strtod_l+0x7a>
 800ab40:	2a65      	cmp	r2, #101	@ 0x65
 800ab42:	f43f ab66 	beq.w	800a212 <_strtod_l+0x272>
 800ab46:	2a45      	cmp	r2, #69	@ 0x45
 800ab48:	f43f ab63 	beq.w	800a212 <_strtod_l+0x272>
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	f7ff bb9e 	b.w	800a28e <_strtod_l+0x2ee>
 800ab52:	bf00      	nop
 800ab54:	f3af 8000 	nop.w
 800ab58:	ffc00000 	.word	0xffc00000
 800ab5c:	41dfffff 	.word	0x41dfffff
 800ab60:	94a03595 	.word	0x94a03595
 800ab64:	3fcfffff 	.word	0x3fcfffff

0800ab68 <_strtod_r>:
 800ab68:	4b01      	ldr	r3, [pc, #4]	@ (800ab70 <_strtod_r+0x8>)
 800ab6a:	f7ff ba19 	b.w	8009fa0 <_strtod_l>
 800ab6e:	bf00      	nop
 800ab70:	200005d8 	.word	0x200005d8

0800ab74 <_strtol_l.constprop.0>:
 800ab74:	2b24      	cmp	r3, #36	@ 0x24
 800ab76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab7a:	4686      	mov	lr, r0
 800ab7c:	4690      	mov	r8, r2
 800ab7e:	d801      	bhi.n	800ab84 <_strtol_l.constprop.0+0x10>
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d106      	bne.n	800ab92 <_strtol_l.constprop.0+0x1e>
 800ab84:	f7fd fe42 	bl	800880c <__errno>
 800ab88:	2316      	movs	r3, #22
 800ab8a:	6003      	str	r3, [r0, #0]
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab92:	4834      	ldr	r0, [pc, #208]	@ (800ac64 <_strtol_l.constprop.0+0xf0>)
 800ab94:	460d      	mov	r5, r1
 800ab96:	462a      	mov	r2, r5
 800ab98:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab9c:	5d06      	ldrb	r6, [r0, r4]
 800ab9e:	f016 0608 	ands.w	r6, r6, #8
 800aba2:	d1f8      	bne.n	800ab96 <_strtol_l.constprop.0+0x22>
 800aba4:	2c2d      	cmp	r4, #45	@ 0x2d
 800aba6:	d12d      	bne.n	800ac04 <_strtol_l.constprop.0+0x90>
 800aba8:	782c      	ldrb	r4, [r5, #0]
 800abaa:	2601      	movs	r6, #1
 800abac:	1c95      	adds	r5, r2, #2
 800abae:	f033 0210 	bics.w	r2, r3, #16
 800abb2:	d109      	bne.n	800abc8 <_strtol_l.constprop.0+0x54>
 800abb4:	2c30      	cmp	r4, #48	@ 0x30
 800abb6:	d12a      	bne.n	800ac0e <_strtol_l.constprop.0+0x9a>
 800abb8:	782a      	ldrb	r2, [r5, #0]
 800abba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800abbe:	2a58      	cmp	r2, #88	@ 0x58
 800abc0:	d125      	bne.n	800ac0e <_strtol_l.constprop.0+0x9a>
 800abc2:	786c      	ldrb	r4, [r5, #1]
 800abc4:	2310      	movs	r3, #16
 800abc6:	3502      	adds	r5, #2
 800abc8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800abcc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800abd0:	2200      	movs	r2, #0
 800abd2:	fbbc f9f3 	udiv	r9, ip, r3
 800abd6:	4610      	mov	r0, r2
 800abd8:	fb03 ca19 	mls	sl, r3, r9, ip
 800abdc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800abe0:	2f09      	cmp	r7, #9
 800abe2:	d81b      	bhi.n	800ac1c <_strtol_l.constprop.0+0xa8>
 800abe4:	463c      	mov	r4, r7
 800abe6:	42a3      	cmp	r3, r4
 800abe8:	dd27      	ble.n	800ac3a <_strtol_l.constprop.0+0xc6>
 800abea:	1c57      	adds	r7, r2, #1
 800abec:	d007      	beq.n	800abfe <_strtol_l.constprop.0+0x8a>
 800abee:	4581      	cmp	r9, r0
 800abf0:	d320      	bcc.n	800ac34 <_strtol_l.constprop.0+0xc0>
 800abf2:	d101      	bne.n	800abf8 <_strtol_l.constprop.0+0x84>
 800abf4:	45a2      	cmp	sl, r4
 800abf6:	db1d      	blt.n	800ac34 <_strtol_l.constprop.0+0xc0>
 800abf8:	fb00 4003 	mla	r0, r0, r3, r4
 800abfc:	2201      	movs	r2, #1
 800abfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac02:	e7eb      	b.n	800abdc <_strtol_l.constprop.0+0x68>
 800ac04:	2c2b      	cmp	r4, #43	@ 0x2b
 800ac06:	bf04      	itt	eq
 800ac08:	782c      	ldrbeq	r4, [r5, #0]
 800ac0a:	1c95      	addeq	r5, r2, #2
 800ac0c:	e7cf      	b.n	800abae <_strtol_l.constprop.0+0x3a>
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d1da      	bne.n	800abc8 <_strtol_l.constprop.0+0x54>
 800ac12:	2c30      	cmp	r4, #48	@ 0x30
 800ac14:	bf0c      	ite	eq
 800ac16:	2308      	moveq	r3, #8
 800ac18:	230a      	movne	r3, #10
 800ac1a:	e7d5      	b.n	800abc8 <_strtol_l.constprop.0+0x54>
 800ac1c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ac20:	2f19      	cmp	r7, #25
 800ac22:	d801      	bhi.n	800ac28 <_strtol_l.constprop.0+0xb4>
 800ac24:	3c37      	subs	r4, #55	@ 0x37
 800ac26:	e7de      	b.n	800abe6 <_strtol_l.constprop.0+0x72>
 800ac28:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ac2c:	2f19      	cmp	r7, #25
 800ac2e:	d804      	bhi.n	800ac3a <_strtol_l.constprop.0+0xc6>
 800ac30:	3c57      	subs	r4, #87	@ 0x57
 800ac32:	e7d8      	b.n	800abe6 <_strtol_l.constprop.0+0x72>
 800ac34:	f04f 32ff 	mov.w	r2, #4294967295
 800ac38:	e7e1      	b.n	800abfe <_strtol_l.constprop.0+0x8a>
 800ac3a:	1c53      	adds	r3, r2, #1
 800ac3c:	d108      	bne.n	800ac50 <_strtol_l.constprop.0+0xdc>
 800ac3e:	2322      	movs	r3, #34	@ 0x22
 800ac40:	f8ce 3000 	str.w	r3, [lr]
 800ac44:	4660      	mov	r0, ip
 800ac46:	f1b8 0f00 	cmp.w	r8, #0
 800ac4a:	d0a0      	beq.n	800ab8e <_strtol_l.constprop.0+0x1a>
 800ac4c:	1e69      	subs	r1, r5, #1
 800ac4e:	e006      	b.n	800ac5e <_strtol_l.constprop.0+0xea>
 800ac50:	b106      	cbz	r6, 800ac54 <_strtol_l.constprop.0+0xe0>
 800ac52:	4240      	negs	r0, r0
 800ac54:	f1b8 0f00 	cmp.w	r8, #0
 800ac58:	d099      	beq.n	800ab8e <_strtol_l.constprop.0+0x1a>
 800ac5a:	2a00      	cmp	r2, #0
 800ac5c:	d1f6      	bne.n	800ac4c <_strtol_l.constprop.0+0xd8>
 800ac5e:	f8c8 1000 	str.w	r1, [r8]
 800ac62:	e794      	b.n	800ab8e <_strtol_l.constprop.0+0x1a>
 800ac64:	0800cc49 	.word	0x0800cc49

0800ac68 <_strtol_r>:
 800ac68:	f7ff bf84 	b.w	800ab74 <_strtol_l.constprop.0>

0800ac6c <__ssputs_r>:
 800ac6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac70:	688e      	ldr	r6, [r1, #8]
 800ac72:	461f      	mov	r7, r3
 800ac74:	42be      	cmp	r6, r7
 800ac76:	680b      	ldr	r3, [r1, #0]
 800ac78:	4682      	mov	sl, r0
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	4690      	mov	r8, r2
 800ac7e:	d82d      	bhi.n	800acdc <__ssputs_r+0x70>
 800ac80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ac88:	d026      	beq.n	800acd8 <__ssputs_r+0x6c>
 800ac8a:	6965      	ldr	r5, [r4, #20]
 800ac8c:	6909      	ldr	r1, [r1, #16]
 800ac8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac92:	eba3 0901 	sub.w	r9, r3, r1
 800ac96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac9a:	1c7b      	adds	r3, r7, #1
 800ac9c:	444b      	add	r3, r9
 800ac9e:	106d      	asrs	r5, r5, #1
 800aca0:	429d      	cmp	r5, r3
 800aca2:	bf38      	it	cc
 800aca4:	461d      	movcc	r5, r3
 800aca6:	0553      	lsls	r3, r2, #21
 800aca8:	d527      	bpl.n	800acfa <__ssputs_r+0x8e>
 800acaa:	4629      	mov	r1, r5
 800acac:	f7fc fc3c 	bl	8007528 <_malloc_r>
 800acb0:	4606      	mov	r6, r0
 800acb2:	b360      	cbz	r0, 800ad0e <__ssputs_r+0xa2>
 800acb4:	6921      	ldr	r1, [r4, #16]
 800acb6:	464a      	mov	r2, r9
 800acb8:	f7fd fdd5 	bl	8008866 <memcpy>
 800acbc:	89a3      	ldrh	r3, [r4, #12]
 800acbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800acc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acc6:	81a3      	strh	r3, [r4, #12]
 800acc8:	6126      	str	r6, [r4, #16]
 800acca:	6165      	str	r5, [r4, #20]
 800accc:	444e      	add	r6, r9
 800acce:	eba5 0509 	sub.w	r5, r5, r9
 800acd2:	6026      	str	r6, [r4, #0]
 800acd4:	60a5      	str	r5, [r4, #8]
 800acd6:	463e      	mov	r6, r7
 800acd8:	42be      	cmp	r6, r7
 800acda:	d900      	bls.n	800acde <__ssputs_r+0x72>
 800acdc:	463e      	mov	r6, r7
 800acde:	6820      	ldr	r0, [r4, #0]
 800ace0:	4632      	mov	r2, r6
 800ace2:	4641      	mov	r1, r8
 800ace4:	f000 fb7c 	bl	800b3e0 <memmove>
 800ace8:	68a3      	ldr	r3, [r4, #8]
 800acea:	1b9b      	subs	r3, r3, r6
 800acec:	60a3      	str	r3, [r4, #8]
 800acee:	6823      	ldr	r3, [r4, #0]
 800acf0:	4433      	add	r3, r6
 800acf2:	6023      	str	r3, [r4, #0]
 800acf4:	2000      	movs	r0, #0
 800acf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acfa:	462a      	mov	r2, r5
 800acfc:	f000 ff2d 	bl	800bb5a <_realloc_r>
 800ad00:	4606      	mov	r6, r0
 800ad02:	2800      	cmp	r0, #0
 800ad04:	d1e0      	bne.n	800acc8 <__ssputs_r+0x5c>
 800ad06:	6921      	ldr	r1, [r4, #16]
 800ad08:	4650      	mov	r0, sl
 800ad0a:	f7fe fc2d 	bl	8009568 <_free_r>
 800ad0e:	230c      	movs	r3, #12
 800ad10:	f8ca 3000 	str.w	r3, [sl]
 800ad14:	89a3      	ldrh	r3, [r4, #12]
 800ad16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad1a:	81a3      	strh	r3, [r4, #12]
 800ad1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad20:	e7e9      	b.n	800acf6 <__ssputs_r+0x8a>
	...

0800ad24 <_svfiprintf_r>:
 800ad24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad28:	4698      	mov	r8, r3
 800ad2a:	898b      	ldrh	r3, [r1, #12]
 800ad2c:	061b      	lsls	r3, r3, #24
 800ad2e:	b09d      	sub	sp, #116	@ 0x74
 800ad30:	4607      	mov	r7, r0
 800ad32:	460d      	mov	r5, r1
 800ad34:	4614      	mov	r4, r2
 800ad36:	d510      	bpl.n	800ad5a <_svfiprintf_r+0x36>
 800ad38:	690b      	ldr	r3, [r1, #16]
 800ad3a:	b973      	cbnz	r3, 800ad5a <_svfiprintf_r+0x36>
 800ad3c:	2140      	movs	r1, #64	@ 0x40
 800ad3e:	f7fc fbf3 	bl	8007528 <_malloc_r>
 800ad42:	6028      	str	r0, [r5, #0]
 800ad44:	6128      	str	r0, [r5, #16]
 800ad46:	b930      	cbnz	r0, 800ad56 <_svfiprintf_r+0x32>
 800ad48:	230c      	movs	r3, #12
 800ad4a:	603b      	str	r3, [r7, #0]
 800ad4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad50:	b01d      	add	sp, #116	@ 0x74
 800ad52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad56:	2340      	movs	r3, #64	@ 0x40
 800ad58:	616b      	str	r3, [r5, #20]
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad5e:	2320      	movs	r3, #32
 800ad60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad64:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad68:	2330      	movs	r3, #48	@ 0x30
 800ad6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800af08 <_svfiprintf_r+0x1e4>
 800ad6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad72:	f04f 0901 	mov.w	r9, #1
 800ad76:	4623      	mov	r3, r4
 800ad78:	469a      	mov	sl, r3
 800ad7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad7e:	b10a      	cbz	r2, 800ad84 <_svfiprintf_r+0x60>
 800ad80:	2a25      	cmp	r2, #37	@ 0x25
 800ad82:	d1f9      	bne.n	800ad78 <_svfiprintf_r+0x54>
 800ad84:	ebba 0b04 	subs.w	fp, sl, r4
 800ad88:	d00b      	beq.n	800ada2 <_svfiprintf_r+0x7e>
 800ad8a:	465b      	mov	r3, fp
 800ad8c:	4622      	mov	r2, r4
 800ad8e:	4629      	mov	r1, r5
 800ad90:	4638      	mov	r0, r7
 800ad92:	f7ff ff6b 	bl	800ac6c <__ssputs_r>
 800ad96:	3001      	adds	r0, #1
 800ad98:	f000 80a7 	beq.w	800aeea <_svfiprintf_r+0x1c6>
 800ad9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad9e:	445a      	add	r2, fp
 800ada0:	9209      	str	r2, [sp, #36]	@ 0x24
 800ada2:	f89a 3000 	ldrb.w	r3, [sl]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f000 809f 	beq.w	800aeea <_svfiprintf_r+0x1c6>
 800adac:	2300      	movs	r3, #0
 800adae:	f04f 32ff 	mov.w	r2, #4294967295
 800adb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adb6:	f10a 0a01 	add.w	sl, sl, #1
 800adba:	9304      	str	r3, [sp, #16]
 800adbc:	9307      	str	r3, [sp, #28]
 800adbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800adc2:	931a      	str	r3, [sp, #104]	@ 0x68
 800adc4:	4654      	mov	r4, sl
 800adc6:	2205      	movs	r2, #5
 800adc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adcc:	484e      	ldr	r0, [pc, #312]	@ (800af08 <_svfiprintf_r+0x1e4>)
 800adce:	f7f5 fa07 	bl	80001e0 <memchr>
 800add2:	9a04      	ldr	r2, [sp, #16]
 800add4:	b9d8      	cbnz	r0, 800ae0e <_svfiprintf_r+0xea>
 800add6:	06d0      	lsls	r0, r2, #27
 800add8:	bf44      	itt	mi
 800adda:	2320      	movmi	r3, #32
 800addc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ade0:	0711      	lsls	r1, r2, #28
 800ade2:	bf44      	itt	mi
 800ade4:	232b      	movmi	r3, #43	@ 0x2b
 800ade6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adea:	f89a 3000 	ldrb.w	r3, [sl]
 800adee:	2b2a      	cmp	r3, #42	@ 0x2a
 800adf0:	d015      	beq.n	800ae1e <_svfiprintf_r+0xfa>
 800adf2:	9a07      	ldr	r2, [sp, #28]
 800adf4:	4654      	mov	r4, sl
 800adf6:	2000      	movs	r0, #0
 800adf8:	f04f 0c0a 	mov.w	ip, #10
 800adfc:	4621      	mov	r1, r4
 800adfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae02:	3b30      	subs	r3, #48	@ 0x30
 800ae04:	2b09      	cmp	r3, #9
 800ae06:	d94b      	bls.n	800aea0 <_svfiprintf_r+0x17c>
 800ae08:	b1b0      	cbz	r0, 800ae38 <_svfiprintf_r+0x114>
 800ae0a:	9207      	str	r2, [sp, #28]
 800ae0c:	e014      	b.n	800ae38 <_svfiprintf_r+0x114>
 800ae0e:	eba0 0308 	sub.w	r3, r0, r8
 800ae12:	fa09 f303 	lsl.w	r3, r9, r3
 800ae16:	4313      	orrs	r3, r2
 800ae18:	9304      	str	r3, [sp, #16]
 800ae1a:	46a2      	mov	sl, r4
 800ae1c:	e7d2      	b.n	800adc4 <_svfiprintf_r+0xa0>
 800ae1e:	9b03      	ldr	r3, [sp, #12]
 800ae20:	1d19      	adds	r1, r3, #4
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	9103      	str	r1, [sp, #12]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	bfbb      	ittet	lt
 800ae2a:	425b      	neglt	r3, r3
 800ae2c:	f042 0202 	orrlt.w	r2, r2, #2
 800ae30:	9307      	strge	r3, [sp, #28]
 800ae32:	9307      	strlt	r3, [sp, #28]
 800ae34:	bfb8      	it	lt
 800ae36:	9204      	strlt	r2, [sp, #16]
 800ae38:	7823      	ldrb	r3, [r4, #0]
 800ae3a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae3c:	d10a      	bne.n	800ae54 <_svfiprintf_r+0x130>
 800ae3e:	7863      	ldrb	r3, [r4, #1]
 800ae40:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae42:	d132      	bne.n	800aeaa <_svfiprintf_r+0x186>
 800ae44:	9b03      	ldr	r3, [sp, #12]
 800ae46:	1d1a      	adds	r2, r3, #4
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	9203      	str	r2, [sp, #12]
 800ae4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae50:	3402      	adds	r4, #2
 800ae52:	9305      	str	r3, [sp, #20]
 800ae54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800af18 <_svfiprintf_r+0x1f4>
 800ae58:	7821      	ldrb	r1, [r4, #0]
 800ae5a:	2203      	movs	r2, #3
 800ae5c:	4650      	mov	r0, sl
 800ae5e:	f7f5 f9bf 	bl	80001e0 <memchr>
 800ae62:	b138      	cbz	r0, 800ae74 <_svfiprintf_r+0x150>
 800ae64:	9b04      	ldr	r3, [sp, #16]
 800ae66:	eba0 000a 	sub.w	r0, r0, sl
 800ae6a:	2240      	movs	r2, #64	@ 0x40
 800ae6c:	4082      	lsls	r2, r0
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	3401      	adds	r4, #1
 800ae72:	9304      	str	r3, [sp, #16]
 800ae74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae78:	4824      	ldr	r0, [pc, #144]	@ (800af0c <_svfiprintf_r+0x1e8>)
 800ae7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae7e:	2206      	movs	r2, #6
 800ae80:	f7f5 f9ae 	bl	80001e0 <memchr>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d036      	beq.n	800aef6 <_svfiprintf_r+0x1d2>
 800ae88:	4b21      	ldr	r3, [pc, #132]	@ (800af10 <_svfiprintf_r+0x1ec>)
 800ae8a:	bb1b      	cbnz	r3, 800aed4 <_svfiprintf_r+0x1b0>
 800ae8c:	9b03      	ldr	r3, [sp, #12]
 800ae8e:	3307      	adds	r3, #7
 800ae90:	f023 0307 	bic.w	r3, r3, #7
 800ae94:	3308      	adds	r3, #8
 800ae96:	9303      	str	r3, [sp, #12]
 800ae98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae9a:	4433      	add	r3, r6
 800ae9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae9e:	e76a      	b.n	800ad76 <_svfiprintf_r+0x52>
 800aea0:	fb0c 3202 	mla	r2, ip, r2, r3
 800aea4:	460c      	mov	r4, r1
 800aea6:	2001      	movs	r0, #1
 800aea8:	e7a8      	b.n	800adfc <_svfiprintf_r+0xd8>
 800aeaa:	2300      	movs	r3, #0
 800aeac:	3401      	adds	r4, #1
 800aeae:	9305      	str	r3, [sp, #20]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	f04f 0c0a 	mov.w	ip, #10
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aebc:	3a30      	subs	r2, #48	@ 0x30
 800aebe:	2a09      	cmp	r2, #9
 800aec0:	d903      	bls.n	800aeca <_svfiprintf_r+0x1a6>
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d0c6      	beq.n	800ae54 <_svfiprintf_r+0x130>
 800aec6:	9105      	str	r1, [sp, #20]
 800aec8:	e7c4      	b.n	800ae54 <_svfiprintf_r+0x130>
 800aeca:	fb0c 2101 	mla	r1, ip, r1, r2
 800aece:	4604      	mov	r4, r0
 800aed0:	2301      	movs	r3, #1
 800aed2:	e7f0      	b.n	800aeb6 <_svfiprintf_r+0x192>
 800aed4:	ab03      	add	r3, sp, #12
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	462a      	mov	r2, r5
 800aeda:	4b0e      	ldr	r3, [pc, #56]	@ (800af14 <_svfiprintf_r+0x1f0>)
 800aedc:	a904      	add	r1, sp, #16
 800aede:	4638      	mov	r0, r7
 800aee0:	f7fc fc4e 	bl	8007780 <_printf_float>
 800aee4:	1c42      	adds	r2, r0, #1
 800aee6:	4606      	mov	r6, r0
 800aee8:	d1d6      	bne.n	800ae98 <_svfiprintf_r+0x174>
 800aeea:	89ab      	ldrh	r3, [r5, #12]
 800aeec:	065b      	lsls	r3, r3, #25
 800aeee:	f53f af2d 	bmi.w	800ad4c <_svfiprintf_r+0x28>
 800aef2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aef4:	e72c      	b.n	800ad50 <_svfiprintf_r+0x2c>
 800aef6:	ab03      	add	r3, sp, #12
 800aef8:	9300      	str	r3, [sp, #0]
 800aefa:	462a      	mov	r2, r5
 800aefc:	4b05      	ldr	r3, [pc, #20]	@ (800af14 <_svfiprintf_r+0x1f0>)
 800aefe:	a904      	add	r1, sp, #16
 800af00:	4638      	mov	r0, r7
 800af02:	f7fc fed5 	bl	8007cb0 <_printf_i>
 800af06:	e7ed      	b.n	800aee4 <_svfiprintf_r+0x1c0>
 800af08:	0800cd49 	.word	0x0800cd49
 800af0c:	0800cd53 	.word	0x0800cd53
 800af10:	08007781 	.word	0x08007781
 800af14:	0800ac6d 	.word	0x0800ac6d
 800af18:	0800cd4f 	.word	0x0800cd4f

0800af1c <__sfputc_r>:
 800af1c:	6893      	ldr	r3, [r2, #8]
 800af1e:	3b01      	subs	r3, #1
 800af20:	2b00      	cmp	r3, #0
 800af22:	b410      	push	{r4}
 800af24:	6093      	str	r3, [r2, #8]
 800af26:	da08      	bge.n	800af3a <__sfputc_r+0x1e>
 800af28:	6994      	ldr	r4, [r2, #24]
 800af2a:	42a3      	cmp	r3, r4
 800af2c:	db01      	blt.n	800af32 <__sfputc_r+0x16>
 800af2e:	290a      	cmp	r1, #10
 800af30:	d103      	bne.n	800af3a <__sfputc_r+0x1e>
 800af32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af36:	f7fd bb5a 	b.w	80085ee <__swbuf_r>
 800af3a:	6813      	ldr	r3, [r2, #0]
 800af3c:	1c58      	adds	r0, r3, #1
 800af3e:	6010      	str	r0, [r2, #0]
 800af40:	7019      	strb	r1, [r3, #0]
 800af42:	4608      	mov	r0, r1
 800af44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af48:	4770      	bx	lr

0800af4a <__sfputs_r>:
 800af4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4c:	4606      	mov	r6, r0
 800af4e:	460f      	mov	r7, r1
 800af50:	4614      	mov	r4, r2
 800af52:	18d5      	adds	r5, r2, r3
 800af54:	42ac      	cmp	r4, r5
 800af56:	d101      	bne.n	800af5c <__sfputs_r+0x12>
 800af58:	2000      	movs	r0, #0
 800af5a:	e007      	b.n	800af6c <__sfputs_r+0x22>
 800af5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af60:	463a      	mov	r2, r7
 800af62:	4630      	mov	r0, r6
 800af64:	f7ff ffda 	bl	800af1c <__sfputc_r>
 800af68:	1c43      	adds	r3, r0, #1
 800af6a:	d1f3      	bne.n	800af54 <__sfputs_r+0xa>
 800af6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af70 <_vfiprintf_r>:
 800af70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af74:	460d      	mov	r5, r1
 800af76:	b09d      	sub	sp, #116	@ 0x74
 800af78:	4614      	mov	r4, r2
 800af7a:	4698      	mov	r8, r3
 800af7c:	4606      	mov	r6, r0
 800af7e:	b118      	cbz	r0, 800af88 <_vfiprintf_r+0x18>
 800af80:	6a03      	ldr	r3, [r0, #32]
 800af82:	b90b      	cbnz	r3, 800af88 <_vfiprintf_r+0x18>
 800af84:	f7fd fa54 	bl	8008430 <__sinit>
 800af88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af8a:	07d9      	lsls	r1, r3, #31
 800af8c:	d405      	bmi.n	800af9a <_vfiprintf_r+0x2a>
 800af8e:	89ab      	ldrh	r3, [r5, #12]
 800af90:	059a      	lsls	r2, r3, #22
 800af92:	d402      	bmi.n	800af9a <_vfiprintf_r+0x2a>
 800af94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af96:	f7fd fc64 	bl	8008862 <__retarget_lock_acquire_recursive>
 800af9a:	89ab      	ldrh	r3, [r5, #12]
 800af9c:	071b      	lsls	r3, r3, #28
 800af9e:	d501      	bpl.n	800afa4 <_vfiprintf_r+0x34>
 800afa0:	692b      	ldr	r3, [r5, #16]
 800afa2:	b99b      	cbnz	r3, 800afcc <_vfiprintf_r+0x5c>
 800afa4:	4629      	mov	r1, r5
 800afa6:	4630      	mov	r0, r6
 800afa8:	f7fd fb60 	bl	800866c <__swsetup_r>
 800afac:	b170      	cbz	r0, 800afcc <_vfiprintf_r+0x5c>
 800afae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afb0:	07dc      	lsls	r4, r3, #31
 800afb2:	d504      	bpl.n	800afbe <_vfiprintf_r+0x4e>
 800afb4:	f04f 30ff 	mov.w	r0, #4294967295
 800afb8:	b01d      	add	sp, #116	@ 0x74
 800afba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afbe:	89ab      	ldrh	r3, [r5, #12]
 800afc0:	0598      	lsls	r0, r3, #22
 800afc2:	d4f7      	bmi.n	800afb4 <_vfiprintf_r+0x44>
 800afc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800afc6:	f7fd fc4d 	bl	8008864 <__retarget_lock_release_recursive>
 800afca:	e7f3      	b.n	800afb4 <_vfiprintf_r+0x44>
 800afcc:	2300      	movs	r3, #0
 800afce:	9309      	str	r3, [sp, #36]	@ 0x24
 800afd0:	2320      	movs	r3, #32
 800afd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800afd6:	f8cd 800c 	str.w	r8, [sp, #12]
 800afda:	2330      	movs	r3, #48	@ 0x30
 800afdc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b18c <_vfiprintf_r+0x21c>
 800afe0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800afe4:	f04f 0901 	mov.w	r9, #1
 800afe8:	4623      	mov	r3, r4
 800afea:	469a      	mov	sl, r3
 800afec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aff0:	b10a      	cbz	r2, 800aff6 <_vfiprintf_r+0x86>
 800aff2:	2a25      	cmp	r2, #37	@ 0x25
 800aff4:	d1f9      	bne.n	800afea <_vfiprintf_r+0x7a>
 800aff6:	ebba 0b04 	subs.w	fp, sl, r4
 800affa:	d00b      	beq.n	800b014 <_vfiprintf_r+0xa4>
 800affc:	465b      	mov	r3, fp
 800affe:	4622      	mov	r2, r4
 800b000:	4629      	mov	r1, r5
 800b002:	4630      	mov	r0, r6
 800b004:	f7ff ffa1 	bl	800af4a <__sfputs_r>
 800b008:	3001      	adds	r0, #1
 800b00a:	f000 80a7 	beq.w	800b15c <_vfiprintf_r+0x1ec>
 800b00e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b010:	445a      	add	r2, fp
 800b012:	9209      	str	r2, [sp, #36]	@ 0x24
 800b014:	f89a 3000 	ldrb.w	r3, [sl]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f000 809f 	beq.w	800b15c <_vfiprintf_r+0x1ec>
 800b01e:	2300      	movs	r3, #0
 800b020:	f04f 32ff 	mov.w	r2, #4294967295
 800b024:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b028:	f10a 0a01 	add.w	sl, sl, #1
 800b02c:	9304      	str	r3, [sp, #16]
 800b02e:	9307      	str	r3, [sp, #28]
 800b030:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b034:	931a      	str	r3, [sp, #104]	@ 0x68
 800b036:	4654      	mov	r4, sl
 800b038:	2205      	movs	r2, #5
 800b03a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b03e:	4853      	ldr	r0, [pc, #332]	@ (800b18c <_vfiprintf_r+0x21c>)
 800b040:	f7f5 f8ce 	bl	80001e0 <memchr>
 800b044:	9a04      	ldr	r2, [sp, #16]
 800b046:	b9d8      	cbnz	r0, 800b080 <_vfiprintf_r+0x110>
 800b048:	06d1      	lsls	r1, r2, #27
 800b04a:	bf44      	itt	mi
 800b04c:	2320      	movmi	r3, #32
 800b04e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b052:	0713      	lsls	r3, r2, #28
 800b054:	bf44      	itt	mi
 800b056:	232b      	movmi	r3, #43	@ 0x2b
 800b058:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b05c:	f89a 3000 	ldrb.w	r3, [sl]
 800b060:	2b2a      	cmp	r3, #42	@ 0x2a
 800b062:	d015      	beq.n	800b090 <_vfiprintf_r+0x120>
 800b064:	9a07      	ldr	r2, [sp, #28]
 800b066:	4654      	mov	r4, sl
 800b068:	2000      	movs	r0, #0
 800b06a:	f04f 0c0a 	mov.w	ip, #10
 800b06e:	4621      	mov	r1, r4
 800b070:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b074:	3b30      	subs	r3, #48	@ 0x30
 800b076:	2b09      	cmp	r3, #9
 800b078:	d94b      	bls.n	800b112 <_vfiprintf_r+0x1a2>
 800b07a:	b1b0      	cbz	r0, 800b0aa <_vfiprintf_r+0x13a>
 800b07c:	9207      	str	r2, [sp, #28]
 800b07e:	e014      	b.n	800b0aa <_vfiprintf_r+0x13a>
 800b080:	eba0 0308 	sub.w	r3, r0, r8
 800b084:	fa09 f303 	lsl.w	r3, r9, r3
 800b088:	4313      	orrs	r3, r2
 800b08a:	9304      	str	r3, [sp, #16]
 800b08c:	46a2      	mov	sl, r4
 800b08e:	e7d2      	b.n	800b036 <_vfiprintf_r+0xc6>
 800b090:	9b03      	ldr	r3, [sp, #12]
 800b092:	1d19      	adds	r1, r3, #4
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	9103      	str	r1, [sp, #12]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	bfbb      	ittet	lt
 800b09c:	425b      	neglt	r3, r3
 800b09e:	f042 0202 	orrlt.w	r2, r2, #2
 800b0a2:	9307      	strge	r3, [sp, #28]
 800b0a4:	9307      	strlt	r3, [sp, #28]
 800b0a6:	bfb8      	it	lt
 800b0a8:	9204      	strlt	r2, [sp, #16]
 800b0aa:	7823      	ldrb	r3, [r4, #0]
 800b0ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800b0ae:	d10a      	bne.n	800b0c6 <_vfiprintf_r+0x156>
 800b0b0:	7863      	ldrb	r3, [r4, #1]
 800b0b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0b4:	d132      	bne.n	800b11c <_vfiprintf_r+0x1ac>
 800b0b6:	9b03      	ldr	r3, [sp, #12]
 800b0b8:	1d1a      	adds	r2, r3, #4
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	9203      	str	r2, [sp, #12]
 800b0be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b0c2:	3402      	adds	r4, #2
 800b0c4:	9305      	str	r3, [sp, #20]
 800b0c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b19c <_vfiprintf_r+0x22c>
 800b0ca:	7821      	ldrb	r1, [r4, #0]
 800b0cc:	2203      	movs	r2, #3
 800b0ce:	4650      	mov	r0, sl
 800b0d0:	f7f5 f886 	bl	80001e0 <memchr>
 800b0d4:	b138      	cbz	r0, 800b0e6 <_vfiprintf_r+0x176>
 800b0d6:	9b04      	ldr	r3, [sp, #16]
 800b0d8:	eba0 000a 	sub.w	r0, r0, sl
 800b0dc:	2240      	movs	r2, #64	@ 0x40
 800b0de:	4082      	lsls	r2, r0
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	3401      	adds	r4, #1
 800b0e4:	9304      	str	r3, [sp, #16]
 800b0e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ea:	4829      	ldr	r0, [pc, #164]	@ (800b190 <_vfiprintf_r+0x220>)
 800b0ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b0f0:	2206      	movs	r2, #6
 800b0f2:	f7f5 f875 	bl	80001e0 <memchr>
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	d03f      	beq.n	800b17a <_vfiprintf_r+0x20a>
 800b0fa:	4b26      	ldr	r3, [pc, #152]	@ (800b194 <_vfiprintf_r+0x224>)
 800b0fc:	bb1b      	cbnz	r3, 800b146 <_vfiprintf_r+0x1d6>
 800b0fe:	9b03      	ldr	r3, [sp, #12]
 800b100:	3307      	adds	r3, #7
 800b102:	f023 0307 	bic.w	r3, r3, #7
 800b106:	3308      	adds	r3, #8
 800b108:	9303      	str	r3, [sp, #12]
 800b10a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b10c:	443b      	add	r3, r7
 800b10e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b110:	e76a      	b.n	800afe8 <_vfiprintf_r+0x78>
 800b112:	fb0c 3202 	mla	r2, ip, r2, r3
 800b116:	460c      	mov	r4, r1
 800b118:	2001      	movs	r0, #1
 800b11a:	e7a8      	b.n	800b06e <_vfiprintf_r+0xfe>
 800b11c:	2300      	movs	r3, #0
 800b11e:	3401      	adds	r4, #1
 800b120:	9305      	str	r3, [sp, #20]
 800b122:	4619      	mov	r1, r3
 800b124:	f04f 0c0a 	mov.w	ip, #10
 800b128:	4620      	mov	r0, r4
 800b12a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b12e:	3a30      	subs	r2, #48	@ 0x30
 800b130:	2a09      	cmp	r2, #9
 800b132:	d903      	bls.n	800b13c <_vfiprintf_r+0x1cc>
 800b134:	2b00      	cmp	r3, #0
 800b136:	d0c6      	beq.n	800b0c6 <_vfiprintf_r+0x156>
 800b138:	9105      	str	r1, [sp, #20]
 800b13a:	e7c4      	b.n	800b0c6 <_vfiprintf_r+0x156>
 800b13c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b140:	4604      	mov	r4, r0
 800b142:	2301      	movs	r3, #1
 800b144:	e7f0      	b.n	800b128 <_vfiprintf_r+0x1b8>
 800b146:	ab03      	add	r3, sp, #12
 800b148:	9300      	str	r3, [sp, #0]
 800b14a:	462a      	mov	r2, r5
 800b14c:	4b12      	ldr	r3, [pc, #72]	@ (800b198 <_vfiprintf_r+0x228>)
 800b14e:	a904      	add	r1, sp, #16
 800b150:	4630      	mov	r0, r6
 800b152:	f7fc fb15 	bl	8007780 <_printf_float>
 800b156:	4607      	mov	r7, r0
 800b158:	1c78      	adds	r0, r7, #1
 800b15a:	d1d6      	bne.n	800b10a <_vfiprintf_r+0x19a>
 800b15c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b15e:	07d9      	lsls	r1, r3, #31
 800b160:	d405      	bmi.n	800b16e <_vfiprintf_r+0x1fe>
 800b162:	89ab      	ldrh	r3, [r5, #12]
 800b164:	059a      	lsls	r2, r3, #22
 800b166:	d402      	bmi.n	800b16e <_vfiprintf_r+0x1fe>
 800b168:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b16a:	f7fd fb7b 	bl	8008864 <__retarget_lock_release_recursive>
 800b16e:	89ab      	ldrh	r3, [r5, #12]
 800b170:	065b      	lsls	r3, r3, #25
 800b172:	f53f af1f 	bmi.w	800afb4 <_vfiprintf_r+0x44>
 800b176:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b178:	e71e      	b.n	800afb8 <_vfiprintf_r+0x48>
 800b17a:	ab03      	add	r3, sp, #12
 800b17c:	9300      	str	r3, [sp, #0]
 800b17e:	462a      	mov	r2, r5
 800b180:	4b05      	ldr	r3, [pc, #20]	@ (800b198 <_vfiprintf_r+0x228>)
 800b182:	a904      	add	r1, sp, #16
 800b184:	4630      	mov	r0, r6
 800b186:	f7fc fd93 	bl	8007cb0 <_printf_i>
 800b18a:	e7e4      	b.n	800b156 <_vfiprintf_r+0x1e6>
 800b18c:	0800cd49 	.word	0x0800cd49
 800b190:	0800cd53 	.word	0x0800cd53
 800b194:	08007781 	.word	0x08007781
 800b198:	0800af4b 	.word	0x0800af4b
 800b19c:	0800cd4f 	.word	0x0800cd4f

0800b1a0 <__sflush_r>:
 800b1a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1a8:	0716      	lsls	r6, r2, #28
 800b1aa:	4605      	mov	r5, r0
 800b1ac:	460c      	mov	r4, r1
 800b1ae:	d454      	bmi.n	800b25a <__sflush_r+0xba>
 800b1b0:	684b      	ldr	r3, [r1, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	dc02      	bgt.n	800b1bc <__sflush_r+0x1c>
 800b1b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	dd48      	ble.n	800b24e <__sflush_r+0xae>
 800b1bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b1be:	2e00      	cmp	r6, #0
 800b1c0:	d045      	beq.n	800b24e <__sflush_r+0xae>
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b1c8:	682f      	ldr	r7, [r5, #0]
 800b1ca:	6a21      	ldr	r1, [r4, #32]
 800b1cc:	602b      	str	r3, [r5, #0]
 800b1ce:	d030      	beq.n	800b232 <__sflush_r+0x92>
 800b1d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b1d2:	89a3      	ldrh	r3, [r4, #12]
 800b1d4:	0759      	lsls	r1, r3, #29
 800b1d6:	d505      	bpl.n	800b1e4 <__sflush_r+0x44>
 800b1d8:	6863      	ldr	r3, [r4, #4]
 800b1da:	1ad2      	subs	r2, r2, r3
 800b1dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b1de:	b10b      	cbz	r3, 800b1e4 <__sflush_r+0x44>
 800b1e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b1e2:	1ad2      	subs	r2, r2, r3
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b1e8:	6a21      	ldr	r1, [r4, #32]
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	47b0      	blx	r6
 800b1ee:	1c43      	adds	r3, r0, #1
 800b1f0:	89a3      	ldrh	r3, [r4, #12]
 800b1f2:	d106      	bne.n	800b202 <__sflush_r+0x62>
 800b1f4:	6829      	ldr	r1, [r5, #0]
 800b1f6:	291d      	cmp	r1, #29
 800b1f8:	d82b      	bhi.n	800b252 <__sflush_r+0xb2>
 800b1fa:	4a2a      	ldr	r2, [pc, #168]	@ (800b2a4 <__sflush_r+0x104>)
 800b1fc:	410a      	asrs	r2, r1
 800b1fe:	07d6      	lsls	r6, r2, #31
 800b200:	d427      	bmi.n	800b252 <__sflush_r+0xb2>
 800b202:	2200      	movs	r2, #0
 800b204:	6062      	str	r2, [r4, #4]
 800b206:	04d9      	lsls	r1, r3, #19
 800b208:	6922      	ldr	r2, [r4, #16]
 800b20a:	6022      	str	r2, [r4, #0]
 800b20c:	d504      	bpl.n	800b218 <__sflush_r+0x78>
 800b20e:	1c42      	adds	r2, r0, #1
 800b210:	d101      	bne.n	800b216 <__sflush_r+0x76>
 800b212:	682b      	ldr	r3, [r5, #0]
 800b214:	b903      	cbnz	r3, 800b218 <__sflush_r+0x78>
 800b216:	6560      	str	r0, [r4, #84]	@ 0x54
 800b218:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b21a:	602f      	str	r7, [r5, #0]
 800b21c:	b1b9      	cbz	r1, 800b24e <__sflush_r+0xae>
 800b21e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b222:	4299      	cmp	r1, r3
 800b224:	d002      	beq.n	800b22c <__sflush_r+0x8c>
 800b226:	4628      	mov	r0, r5
 800b228:	f7fe f99e 	bl	8009568 <_free_r>
 800b22c:	2300      	movs	r3, #0
 800b22e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b230:	e00d      	b.n	800b24e <__sflush_r+0xae>
 800b232:	2301      	movs	r3, #1
 800b234:	4628      	mov	r0, r5
 800b236:	47b0      	blx	r6
 800b238:	4602      	mov	r2, r0
 800b23a:	1c50      	adds	r0, r2, #1
 800b23c:	d1c9      	bne.n	800b1d2 <__sflush_r+0x32>
 800b23e:	682b      	ldr	r3, [r5, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d0c6      	beq.n	800b1d2 <__sflush_r+0x32>
 800b244:	2b1d      	cmp	r3, #29
 800b246:	d001      	beq.n	800b24c <__sflush_r+0xac>
 800b248:	2b16      	cmp	r3, #22
 800b24a:	d11e      	bne.n	800b28a <__sflush_r+0xea>
 800b24c:	602f      	str	r7, [r5, #0]
 800b24e:	2000      	movs	r0, #0
 800b250:	e022      	b.n	800b298 <__sflush_r+0xf8>
 800b252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b256:	b21b      	sxth	r3, r3
 800b258:	e01b      	b.n	800b292 <__sflush_r+0xf2>
 800b25a:	690f      	ldr	r7, [r1, #16]
 800b25c:	2f00      	cmp	r7, #0
 800b25e:	d0f6      	beq.n	800b24e <__sflush_r+0xae>
 800b260:	0793      	lsls	r3, r2, #30
 800b262:	680e      	ldr	r6, [r1, #0]
 800b264:	bf08      	it	eq
 800b266:	694b      	ldreq	r3, [r1, #20]
 800b268:	600f      	str	r7, [r1, #0]
 800b26a:	bf18      	it	ne
 800b26c:	2300      	movne	r3, #0
 800b26e:	eba6 0807 	sub.w	r8, r6, r7
 800b272:	608b      	str	r3, [r1, #8]
 800b274:	f1b8 0f00 	cmp.w	r8, #0
 800b278:	dde9      	ble.n	800b24e <__sflush_r+0xae>
 800b27a:	6a21      	ldr	r1, [r4, #32]
 800b27c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b27e:	4643      	mov	r3, r8
 800b280:	463a      	mov	r2, r7
 800b282:	4628      	mov	r0, r5
 800b284:	47b0      	blx	r6
 800b286:	2800      	cmp	r0, #0
 800b288:	dc08      	bgt.n	800b29c <__sflush_r+0xfc>
 800b28a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b28e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b292:	81a3      	strh	r3, [r4, #12]
 800b294:	f04f 30ff 	mov.w	r0, #4294967295
 800b298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b29c:	4407      	add	r7, r0
 800b29e:	eba8 0800 	sub.w	r8, r8, r0
 800b2a2:	e7e7      	b.n	800b274 <__sflush_r+0xd4>
 800b2a4:	dfbffffe 	.word	0xdfbffffe

0800b2a8 <_fflush_r>:
 800b2a8:	b538      	push	{r3, r4, r5, lr}
 800b2aa:	690b      	ldr	r3, [r1, #16]
 800b2ac:	4605      	mov	r5, r0
 800b2ae:	460c      	mov	r4, r1
 800b2b0:	b913      	cbnz	r3, 800b2b8 <_fflush_r+0x10>
 800b2b2:	2500      	movs	r5, #0
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	bd38      	pop	{r3, r4, r5, pc}
 800b2b8:	b118      	cbz	r0, 800b2c2 <_fflush_r+0x1a>
 800b2ba:	6a03      	ldr	r3, [r0, #32]
 800b2bc:	b90b      	cbnz	r3, 800b2c2 <_fflush_r+0x1a>
 800b2be:	f7fd f8b7 	bl	8008430 <__sinit>
 800b2c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d0f3      	beq.n	800b2b2 <_fflush_r+0xa>
 800b2ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b2cc:	07d0      	lsls	r0, r2, #31
 800b2ce:	d404      	bmi.n	800b2da <_fflush_r+0x32>
 800b2d0:	0599      	lsls	r1, r3, #22
 800b2d2:	d402      	bmi.n	800b2da <_fflush_r+0x32>
 800b2d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2d6:	f7fd fac4 	bl	8008862 <__retarget_lock_acquire_recursive>
 800b2da:	4628      	mov	r0, r5
 800b2dc:	4621      	mov	r1, r4
 800b2de:	f7ff ff5f 	bl	800b1a0 <__sflush_r>
 800b2e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2e4:	07da      	lsls	r2, r3, #31
 800b2e6:	4605      	mov	r5, r0
 800b2e8:	d4e4      	bmi.n	800b2b4 <_fflush_r+0xc>
 800b2ea:	89a3      	ldrh	r3, [r4, #12]
 800b2ec:	059b      	lsls	r3, r3, #22
 800b2ee:	d4e1      	bmi.n	800b2b4 <_fflush_r+0xc>
 800b2f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2f2:	f7fd fab7 	bl	8008864 <__retarget_lock_release_recursive>
 800b2f6:	e7dd      	b.n	800b2b4 <_fflush_r+0xc>

0800b2f8 <fiprintf>:
 800b2f8:	b40e      	push	{r1, r2, r3}
 800b2fa:	b503      	push	{r0, r1, lr}
 800b2fc:	4601      	mov	r1, r0
 800b2fe:	ab03      	add	r3, sp, #12
 800b300:	4805      	ldr	r0, [pc, #20]	@ (800b318 <fiprintf+0x20>)
 800b302:	f853 2b04 	ldr.w	r2, [r3], #4
 800b306:	6800      	ldr	r0, [r0, #0]
 800b308:	9301      	str	r3, [sp, #4]
 800b30a:	f7ff fe31 	bl	800af70 <_vfiprintf_r>
 800b30e:	b002      	add	sp, #8
 800b310:	f85d eb04 	ldr.w	lr, [sp], #4
 800b314:	b003      	add	sp, #12
 800b316:	4770      	bx	lr
 800b318:	20000588 	.word	0x20000588

0800b31c <__swhatbuf_r>:
 800b31c:	b570      	push	{r4, r5, r6, lr}
 800b31e:	460c      	mov	r4, r1
 800b320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b324:	2900      	cmp	r1, #0
 800b326:	b096      	sub	sp, #88	@ 0x58
 800b328:	4615      	mov	r5, r2
 800b32a:	461e      	mov	r6, r3
 800b32c:	da0d      	bge.n	800b34a <__swhatbuf_r+0x2e>
 800b32e:	89a3      	ldrh	r3, [r4, #12]
 800b330:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b334:	f04f 0100 	mov.w	r1, #0
 800b338:	bf14      	ite	ne
 800b33a:	2340      	movne	r3, #64	@ 0x40
 800b33c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b340:	2000      	movs	r0, #0
 800b342:	6031      	str	r1, [r6, #0]
 800b344:	602b      	str	r3, [r5, #0]
 800b346:	b016      	add	sp, #88	@ 0x58
 800b348:	bd70      	pop	{r4, r5, r6, pc}
 800b34a:	466a      	mov	r2, sp
 800b34c:	f000 f874 	bl	800b438 <_fstat_r>
 800b350:	2800      	cmp	r0, #0
 800b352:	dbec      	blt.n	800b32e <__swhatbuf_r+0x12>
 800b354:	9901      	ldr	r1, [sp, #4]
 800b356:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b35a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b35e:	4259      	negs	r1, r3
 800b360:	4159      	adcs	r1, r3
 800b362:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b366:	e7eb      	b.n	800b340 <__swhatbuf_r+0x24>

0800b368 <__smakebuf_r>:
 800b368:	898b      	ldrh	r3, [r1, #12]
 800b36a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b36c:	079d      	lsls	r5, r3, #30
 800b36e:	4606      	mov	r6, r0
 800b370:	460c      	mov	r4, r1
 800b372:	d507      	bpl.n	800b384 <__smakebuf_r+0x1c>
 800b374:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b378:	6023      	str	r3, [r4, #0]
 800b37a:	6123      	str	r3, [r4, #16]
 800b37c:	2301      	movs	r3, #1
 800b37e:	6163      	str	r3, [r4, #20]
 800b380:	b003      	add	sp, #12
 800b382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b384:	ab01      	add	r3, sp, #4
 800b386:	466a      	mov	r2, sp
 800b388:	f7ff ffc8 	bl	800b31c <__swhatbuf_r>
 800b38c:	9f00      	ldr	r7, [sp, #0]
 800b38e:	4605      	mov	r5, r0
 800b390:	4639      	mov	r1, r7
 800b392:	4630      	mov	r0, r6
 800b394:	f7fc f8c8 	bl	8007528 <_malloc_r>
 800b398:	b948      	cbnz	r0, 800b3ae <__smakebuf_r+0x46>
 800b39a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b39e:	059a      	lsls	r2, r3, #22
 800b3a0:	d4ee      	bmi.n	800b380 <__smakebuf_r+0x18>
 800b3a2:	f023 0303 	bic.w	r3, r3, #3
 800b3a6:	f043 0302 	orr.w	r3, r3, #2
 800b3aa:	81a3      	strh	r3, [r4, #12]
 800b3ac:	e7e2      	b.n	800b374 <__smakebuf_r+0xc>
 800b3ae:	89a3      	ldrh	r3, [r4, #12]
 800b3b0:	6020      	str	r0, [r4, #0]
 800b3b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3b6:	81a3      	strh	r3, [r4, #12]
 800b3b8:	9b01      	ldr	r3, [sp, #4]
 800b3ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b3be:	b15b      	cbz	r3, 800b3d8 <__smakebuf_r+0x70>
 800b3c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3c4:	4630      	mov	r0, r6
 800b3c6:	f000 f849 	bl	800b45c <_isatty_r>
 800b3ca:	b128      	cbz	r0, 800b3d8 <__smakebuf_r+0x70>
 800b3cc:	89a3      	ldrh	r3, [r4, #12]
 800b3ce:	f023 0303 	bic.w	r3, r3, #3
 800b3d2:	f043 0301 	orr.w	r3, r3, #1
 800b3d6:	81a3      	strh	r3, [r4, #12]
 800b3d8:	89a3      	ldrh	r3, [r4, #12]
 800b3da:	431d      	orrs	r5, r3
 800b3dc:	81a5      	strh	r5, [r4, #12]
 800b3de:	e7cf      	b.n	800b380 <__smakebuf_r+0x18>

0800b3e0 <memmove>:
 800b3e0:	4288      	cmp	r0, r1
 800b3e2:	b510      	push	{r4, lr}
 800b3e4:	eb01 0402 	add.w	r4, r1, r2
 800b3e8:	d902      	bls.n	800b3f0 <memmove+0x10>
 800b3ea:	4284      	cmp	r4, r0
 800b3ec:	4623      	mov	r3, r4
 800b3ee:	d807      	bhi.n	800b400 <memmove+0x20>
 800b3f0:	1e43      	subs	r3, r0, #1
 800b3f2:	42a1      	cmp	r1, r4
 800b3f4:	d008      	beq.n	800b408 <memmove+0x28>
 800b3f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3fe:	e7f8      	b.n	800b3f2 <memmove+0x12>
 800b400:	4402      	add	r2, r0
 800b402:	4601      	mov	r1, r0
 800b404:	428a      	cmp	r2, r1
 800b406:	d100      	bne.n	800b40a <memmove+0x2a>
 800b408:	bd10      	pop	{r4, pc}
 800b40a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b40e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b412:	e7f7      	b.n	800b404 <memmove+0x24>

0800b414 <strncmp>:
 800b414:	b510      	push	{r4, lr}
 800b416:	b16a      	cbz	r2, 800b434 <strncmp+0x20>
 800b418:	3901      	subs	r1, #1
 800b41a:	1884      	adds	r4, r0, r2
 800b41c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b420:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b424:	429a      	cmp	r2, r3
 800b426:	d103      	bne.n	800b430 <strncmp+0x1c>
 800b428:	42a0      	cmp	r0, r4
 800b42a:	d001      	beq.n	800b430 <strncmp+0x1c>
 800b42c:	2a00      	cmp	r2, #0
 800b42e:	d1f5      	bne.n	800b41c <strncmp+0x8>
 800b430:	1ad0      	subs	r0, r2, r3
 800b432:	bd10      	pop	{r4, pc}
 800b434:	4610      	mov	r0, r2
 800b436:	e7fc      	b.n	800b432 <strncmp+0x1e>

0800b438 <_fstat_r>:
 800b438:	b538      	push	{r3, r4, r5, lr}
 800b43a:	4d07      	ldr	r5, [pc, #28]	@ (800b458 <_fstat_r+0x20>)
 800b43c:	2300      	movs	r3, #0
 800b43e:	4604      	mov	r4, r0
 800b440:	4608      	mov	r0, r1
 800b442:	4611      	mov	r1, r2
 800b444:	602b      	str	r3, [r5, #0]
 800b446:	f7f7 f8a9 	bl	800259c <_fstat>
 800b44a:	1c43      	adds	r3, r0, #1
 800b44c:	d102      	bne.n	800b454 <_fstat_r+0x1c>
 800b44e:	682b      	ldr	r3, [r5, #0]
 800b450:	b103      	cbz	r3, 800b454 <_fstat_r+0x1c>
 800b452:	6023      	str	r3, [r4, #0]
 800b454:	bd38      	pop	{r3, r4, r5, pc}
 800b456:	bf00      	nop
 800b458:	20000b10 	.word	0x20000b10

0800b45c <_isatty_r>:
 800b45c:	b538      	push	{r3, r4, r5, lr}
 800b45e:	4d06      	ldr	r5, [pc, #24]	@ (800b478 <_isatty_r+0x1c>)
 800b460:	2300      	movs	r3, #0
 800b462:	4604      	mov	r4, r0
 800b464:	4608      	mov	r0, r1
 800b466:	602b      	str	r3, [r5, #0]
 800b468:	f7f7 f8a8 	bl	80025bc <_isatty>
 800b46c:	1c43      	adds	r3, r0, #1
 800b46e:	d102      	bne.n	800b476 <_isatty_r+0x1a>
 800b470:	682b      	ldr	r3, [r5, #0]
 800b472:	b103      	cbz	r3, 800b476 <_isatty_r+0x1a>
 800b474:	6023      	str	r3, [r4, #0]
 800b476:	bd38      	pop	{r3, r4, r5, pc}
 800b478:	20000b10 	.word	0x20000b10
 800b47c:	00000000 	.word	0x00000000

0800b480 <nan>:
 800b480:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b488 <nan+0x8>
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	00000000 	.word	0x00000000
 800b48c:	7ff80000 	.word	0x7ff80000

0800b490 <abort>:
 800b490:	b508      	push	{r3, lr}
 800b492:	2006      	movs	r0, #6
 800b494:	f000 fbc4 	bl	800bc20 <raise>
 800b498:	2001      	movs	r0, #1
 800b49a:	f7f7 f82f 	bl	80024fc <_exit>

0800b49e <_calloc_r>:
 800b49e:	b570      	push	{r4, r5, r6, lr}
 800b4a0:	fba1 5402 	umull	r5, r4, r1, r2
 800b4a4:	b93c      	cbnz	r4, 800b4b6 <_calloc_r+0x18>
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	f7fc f83e 	bl	8007528 <_malloc_r>
 800b4ac:	4606      	mov	r6, r0
 800b4ae:	b928      	cbnz	r0, 800b4bc <_calloc_r+0x1e>
 800b4b0:	2600      	movs	r6, #0
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	bd70      	pop	{r4, r5, r6, pc}
 800b4b6:	220c      	movs	r2, #12
 800b4b8:	6002      	str	r2, [r0, #0]
 800b4ba:	e7f9      	b.n	800b4b0 <_calloc_r+0x12>
 800b4bc:	462a      	mov	r2, r5
 800b4be:	4621      	mov	r1, r4
 800b4c0:	f7fd f92a 	bl	8008718 <memset>
 800b4c4:	e7f5      	b.n	800b4b2 <_calloc_r+0x14>

0800b4c6 <rshift>:
 800b4c6:	6903      	ldr	r3, [r0, #16]
 800b4c8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b4cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4d0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b4d4:	f100 0414 	add.w	r4, r0, #20
 800b4d8:	dd45      	ble.n	800b566 <rshift+0xa0>
 800b4da:	f011 011f 	ands.w	r1, r1, #31
 800b4de:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b4e2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b4e6:	d10c      	bne.n	800b502 <rshift+0x3c>
 800b4e8:	f100 0710 	add.w	r7, r0, #16
 800b4ec:	4629      	mov	r1, r5
 800b4ee:	42b1      	cmp	r1, r6
 800b4f0:	d334      	bcc.n	800b55c <rshift+0x96>
 800b4f2:	1a9b      	subs	r3, r3, r2
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	1eea      	subs	r2, r5, #3
 800b4f8:	4296      	cmp	r6, r2
 800b4fa:	bf38      	it	cc
 800b4fc:	2300      	movcc	r3, #0
 800b4fe:	4423      	add	r3, r4
 800b500:	e015      	b.n	800b52e <rshift+0x68>
 800b502:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b506:	f1c1 0820 	rsb	r8, r1, #32
 800b50a:	40cf      	lsrs	r7, r1
 800b50c:	f105 0e04 	add.w	lr, r5, #4
 800b510:	46a1      	mov	r9, r4
 800b512:	4576      	cmp	r6, lr
 800b514:	46f4      	mov	ip, lr
 800b516:	d815      	bhi.n	800b544 <rshift+0x7e>
 800b518:	1a9a      	subs	r2, r3, r2
 800b51a:	0092      	lsls	r2, r2, #2
 800b51c:	3a04      	subs	r2, #4
 800b51e:	3501      	adds	r5, #1
 800b520:	42ae      	cmp	r6, r5
 800b522:	bf38      	it	cc
 800b524:	2200      	movcc	r2, #0
 800b526:	18a3      	adds	r3, r4, r2
 800b528:	50a7      	str	r7, [r4, r2]
 800b52a:	b107      	cbz	r7, 800b52e <rshift+0x68>
 800b52c:	3304      	adds	r3, #4
 800b52e:	1b1a      	subs	r2, r3, r4
 800b530:	42a3      	cmp	r3, r4
 800b532:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b536:	bf08      	it	eq
 800b538:	2300      	moveq	r3, #0
 800b53a:	6102      	str	r2, [r0, #16]
 800b53c:	bf08      	it	eq
 800b53e:	6143      	streq	r3, [r0, #20]
 800b540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b544:	f8dc c000 	ldr.w	ip, [ip]
 800b548:	fa0c fc08 	lsl.w	ip, ip, r8
 800b54c:	ea4c 0707 	orr.w	r7, ip, r7
 800b550:	f849 7b04 	str.w	r7, [r9], #4
 800b554:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b558:	40cf      	lsrs	r7, r1
 800b55a:	e7da      	b.n	800b512 <rshift+0x4c>
 800b55c:	f851 cb04 	ldr.w	ip, [r1], #4
 800b560:	f847 cf04 	str.w	ip, [r7, #4]!
 800b564:	e7c3      	b.n	800b4ee <rshift+0x28>
 800b566:	4623      	mov	r3, r4
 800b568:	e7e1      	b.n	800b52e <rshift+0x68>

0800b56a <__hexdig_fun>:
 800b56a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b56e:	2b09      	cmp	r3, #9
 800b570:	d802      	bhi.n	800b578 <__hexdig_fun+0xe>
 800b572:	3820      	subs	r0, #32
 800b574:	b2c0      	uxtb	r0, r0
 800b576:	4770      	bx	lr
 800b578:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b57c:	2b05      	cmp	r3, #5
 800b57e:	d801      	bhi.n	800b584 <__hexdig_fun+0x1a>
 800b580:	3847      	subs	r0, #71	@ 0x47
 800b582:	e7f7      	b.n	800b574 <__hexdig_fun+0xa>
 800b584:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b588:	2b05      	cmp	r3, #5
 800b58a:	d801      	bhi.n	800b590 <__hexdig_fun+0x26>
 800b58c:	3827      	subs	r0, #39	@ 0x27
 800b58e:	e7f1      	b.n	800b574 <__hexdig_fun+0xa>
 800b590:	2000      	movs	r0, #0
 800b592:	4770      	bx	lr

0800b594 <__gethex>:
 800b594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b598:	b085      	sub	sp, #20
 800b59a:	468a      	mov	sl, r1
 800b59c:	9302      	str	r3, [sp, #8]
 800b59e:	680b      	ldr	r3, [r1, #0]
 800b5a0:	9001      	str	r0, [sp, #4]
 800b5a2:	4690      	mov	r8, r2
 800b5a4:	1c9c      	adds	r4, r3, #2
 800b5a6:	46a1      	mov	r9, r4
 800b5a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b5ac:	2830      	cmp	r0, #48	@ 0x30
 800b5ae:	d0fa      	beq.n	800b5a6 <__gethex+0x12>
 800b5b0:	eba9 0303 	sub.w	r3, r9, r3
 800b5b4:	f1a3 0b02 	sub.w	fp, r3, #2
 800b5b8:	f7ff ffd7 	bl	800b56a <__hexdig_fun>
 800b5bc:	4605      	mov	r5, r0
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	d168      	bne.n	800b694 <__gethex+0x100>
 800b5c2:	49a0      	ldr	r1, [pc, #640]	@ (800b844 <__gethex+0x2b0>)
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	4648      	mov	r0, r9
 800b5c8:	f7ff ff24 	bl	800b414 <strncmp>
 800b5cc:	4607      	mov	r7, r0
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	d167      	bne.n	800b6a2 <__gethex+0x10e>
 800b5d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b5d6:	4626      	mov	r6, r4
 800b5d8:	f7ff ffc7 	bl	800b56a <__hexdig_fun>
 800b5dc:	2800      	cmp	r0, #0
 800b5de:	d062      	beq.n	800b6a6 <__gethex+0x112>
 800b5e0:	4623      	mov	r3, r4
 800b5e2:	7818      	ldrb	r0, [r3, #0]
 800b5e4:	2830      	cmp	r0, #48	@ 0x30
 800b5e6:	4699      	mov	r9, r3
 800b5e8:	f103 0301 	add.w	r3, r3, #1
 800b5ec:	d0f9      	beq.n	800b5e2 <__gethex+0x4e>
 800b5ee:	f7ff ffbc 	bl	800b56a <__hexdig_fun>
 800b5f2:	fab0 f580 	clz	r5, r0
 800b5f6:	096d      	lsrs	r5, r5, #5
 800b5f8:	f04f 0b01 	mov.w	fp, #1
 800b5fc:	464a      	mov	r2, r9
 800b5fe:	4616      	mov	r6, r2
 800b600:	3201      	adds	r2, #1
 800b602:	7830      	ldrb	r0, [r6, #0]
 800b604:	f7ff ffb1 	bl	800b56a <__hexdig_fun>
 800b608:	2800      	cmp	r0, #0
 800b60a:	d1f8      	bne.n	800b5fe <__gethex+0x6a>
 800b60c:	498d      	ldr	r1, [pc, #564]	@ (800b844 <__gethex+0x2b0>)
 800b60e:	2201      	movs	r2, #1
 800b610:	4630      	mov	r0, r6
 800b612:	f7ff feff 	bl	800b414 <strncmp>
 800b616:	2800      	cmp	r0, #0
 800b618:	d13f      	bne.n	800b69a <__gethex+0x106>
 800b61a:	b944      	cbnz	r4, 800b62e <__gethex+0x9a>
 800b61c:	1c74      	adds	r4, r6, #1
 800b61e:	4622      	mov	r2, r4
 800b620:	4616      	mov	r6, r2
 800b622:	3201      	adds	r2, #1
 800b624:	7830      	ldrb	r0, [r6, #0]
 800b626:	f7ff ffa0 	bl	800b56a <__hexdig_fun>
 800b62a:	2800      	cmp	r0, #0
 800b62c:	d1f8      	bne.n	800b620 <__gethex+0x8c>
 800b62e:	1ba4      	subs	r4, r4, r6
 800b630:	00a7      	lsls	r7, r4, #2
 800b632:	7833      	ldrb	r3, [r6, #0]
 800b634:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b638:	2b50      	cmp	r3, #80	@ 0x50
 800b63a:	d13e      	bne.n	800b6ba <__gethex+0x126>
 800b63c:	7873      	ldrb	r3, [r6, #1]
 800b63e:	2b2b      	cmp	r3, #43	@ 0x2b
 800b640:	d033      	beq.n	800b6aa <__gethex+0x116>
 800b642:	2b2d      	cmp	r3, #45	@ 0x2d
 800b644:	d034      	beq.n	800b6b0 <__gethex+0x11c>
 800b646:	1c71      	adds	r1, r6, #1
 800b648:	2400      	movs	r4, #0
 800b64a:	7808      	ldrb	r0, [r1, #0]
 800b64c:	f7ff ff8d 	bl	800b56a <__hexdig_fun>
 800b650:	1e43      	subs	r3, r0, #1
 800b652:	b2db      	uxtb	r3, r3
 800b654:	2b18      	cmp	r3, #24
 800b656:	d830      	bhi.n	800b6ba <__gethex+0x126>
 800b658:	f1a0 0210 	sub.w	r2, r0, #16
 800b65c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b660:	f7ff ff83 	bl	800b56a <__hexdig_fun>
 800b664:	f100 3cff 	add.w	ip, r0, #4294967295
 800b668:	fa5f fc8c 	uxtb.w	ip, ip
 800b66c:	f1bc 0f18 	cmp.w	ip, #24
 800b670:	f04f 030a 	mov.w	r3, #10
 800b674:	d91e      	bls.n	800b6b4 <__gethex+0x120>
 800b676:	b104      	cbz	r4, 800b67a <__gethex+0xe6>
 800b678:	4252      	negs	r2, r2
 800b67a:	4417      	add	r7, r2
 800b67c:	f8ca 1000 	str.w	r1, [sl]
 800b680:	b1ed      	cbz	r5, 800b6be <__gethex+0x12a>
 800b682:	f1bb 0f00 	cmp.w	fp, #0
 800b686:	bf0c      	ite	eq
 800b688:	2506      	moveq	r5, #6
 800b68a:	2500      	movne	r5, #0
 800b68c:	4628      	mov	r0, r5
 800b68e:	b005      	add	sp, #20
 800b690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b694:	2500      	movs	r5, #0
 800b696:	462c      	mov	r4, r5
 800b698:	e7b0      	b.n	800b5fc <__gethex+0x68>
 800b69a:	2c00      	cmp	r4, #0
 800b69c:	d1c7      	bne.n	800b62e <__gethex+0x9a>
 800b69e:	4627      	mov	r7, r4
 800b6a0:	e7c7      	b.n	800b632 <__gethex+0x9e>
 800b6a2:	464e      	mov	r6, r9
 800b6a4:	462f      	mov	r7, r5
 800b6a6:	2501      	movs	r5, #1
 800b6a8:	e7c3      	b.n	800b632 <__gethex+0x9e>
 800b6aa:	2400      	movs	r4, #0
 800b6ac:	1cb1      	adds	r1, r6, #2
 800b6ae:	e7cc      	b.n	800b64a <__gethex+0xb6>
 800b6b0:	2401      	movs	r4, #1
 800b6b2:	e7fb      	b.n	800b6ac <__gethex+0x118>
 800b6b4:	fb03 0002 	mla	r0, r3, r2, r0
 800b6b8:	e7ce      	b.n	800b658 <__gethex+0xc4>
 800b6ba:	4631      	mov	r1, r6
 800b6bc:	e7de      	b.n	800b67c <__gethex+0xe8>
 800b6be:	eba6 0309 	sub.w	r3, r6, r9
 800b6c2:	3b01      	subs	r3, #1
 800b6c4:	4629      	mov	r1, r5
 800b6c6:	2b07      	cmp	r3, #7
 800b6c8:	dc0a      	bgt.n	800b6e0 <__gethex+0x14c>
 800b6ca:	9801      	ldr	r0, [sp, #4]
 800b6cc:	f7fd ff96 	bl	80095fc <_Balloc>
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	b940      	cbnz	r0, 800b6e6 <__gethex+0x152>
 800b6d4:	4b5c      	ldr	r3, [pc, #368]	@ (800b848 <__gethex+0x2b4>)
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	21e4      	movs	r1, #228	@ 0xe4
 800b6da:	485c      	ldr	r0, [pc, #368]	@ (800b84c <__gethex+0x2b8>)
 800b6dc:	f7fd f8d8 	bl	8008890 <__assert_func>
 800b6e0:	3101      	adds	r1, #1
 800b6e2:	105b      	asrs	r3, r3, #1
 800b6e4:	e7ef      	b.n	800b6c6 <__gethex+0x132>
 800b6e6:	f100 0a14 	add.w	sl, r0, #20
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	4655      	mov	r5, sl
 800b6ee:	469b      	mov	fp, r3
 800b6f0:	45b1      	cmp	r9, r6
 800b6f2:	d337      	bcc.n	800b764 <__gethex+0x1d0>
 800b6f4:	f845 bb04 	str.w	fp, [r5], #4
 800b6f8:	eba5 050a 	sub.w	r5, r5, sl
 800b6fc:	10ad      	asrs	r5, r5, #2
 800b6fe:	6125      	str	r5, [r4, #16]
 800b700:	4658      	mov	r0, fp
 800b702:	f7fe f86d 	bl	80097e0 <__hi0bits>
 800b706:	016d      	lsls	r5, r5, #5
 800b708:	f8d8 6000 	ldr.w	r6, [r8]
 800b70c:	1a2d      	subs	r5, r5, r0
 800b70e:	42b5      	cmp	r5, r6
 800b710:	dd54      	ble.n	800b7bc <__gethex+0x228>
 800b712:	1bad      	subs	r5, r5, r6
 800b714:	4629      	mov	r1, r5
 800b716:	4620      	mov	r0, r4
 800b718:	f7fe fc01 	bl	8009f1e <__any_on>
 800b71c:	4681      	mov	r9, r0
 800b71e:	b178      	cbz	r0, 800b740 <__gethex+0x1ac>
 800b720:	1e6b      	subs	r3, r5, #1
 800b722:	1159      	asrs	r1, r3, #5
 800b724:	f003 021f 	and.w	r2, r3, #31
 800b728:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b72c:	f04f 0901 	mov.w	r9, #1
 800b730:	fa09 f202 	lsl.w	r2, r9, r2
 800b734:	420a      	tst	r2, r1
 800b736:	d003      	beq.n	800b740 <__gethex+0x1ac>
 800b738:	454b      	cmp	r3, r9
 800b73a:	dc36      	bgt.n	800b7aa <__gethex+0x216>
 800b73c:	f04f 0902 	mov.w	r9, #2
 800b740:	4629      	mov	r1, r5
 800b742:	4620      	mov	r0, r4
 800b744:	f7ff febf 	bl	800b4c6 <rshift>
 800b748:	442f      	add	r7, r5
 800b74a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b74e:	42bb      	cmp	r3, r7
 800b750:	da42      	bge.n	800b7d8 <__gethex+0x244>
 800b752:	9801      	ldr	r0, [sp, #4]
 800b754:	4621      	mov	r1, r4
 800b756:	f7fd ff91 	bl	800967c <_Bfree>
 800b75a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b75c:	2300      	movs	r3, #0
 800b75e:	6013      	str	r3, [r2, #0]
 800b760:	25a3      	movs	r5, #163	@ 0xa3
 800b762:	e793      	b.n	800b68c <__gethex+0xf8>
 800b764:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b768:	2a2e      	cmp	r2, #46	@ 0x2e
 800b76a:	d012      	beq.n	800b792 <__gethex+0x1fe>
 800b76c:	2b20      	cmp	r3, #32
 800b76e:	d104      	bne.n	800b77a <__gethex+0x1e6>
 800b770:	f845 bb04 	str.w	fp, [r5], #4
 800b774:	f04f 0b00 	mov.w	fp, #0
 800b778:	465b      	mov	r3, fp
 800b77a:	7830      	ldrb	r0, [r6, #0]
 800b77c:	9303      	str	r3, [sp, #12]
 800b77e:	f7ff fef4 	bl	800b56a <__hexdig_fun>
 800b782:	9b03      	ldr	r3, [sp, #12]
 800b784:	f000 000f 	and.w	r0, r0, #15
 800b788:	4098      	lsls	r0, r3
 800b78a:	ea4b 0b00 	orr.w	fp, fp, r0
 800b78e:	3304      	adds	r3, #4
 800b790:	e7ae      	b.n	800b6f0 <__gethex+0x15c>
 800b792:	45b1      	cmp	r9, r6
 800b794:	d8ea      	bhi.n	800b76c <__gethex+0x1d8>
 800b796:	492b      	ldr	r1, [pc, #172]	@ (800b844 <__gethex+0x2b0>)
 800b798:	9303      	str	r3, [sp, #12]
 800b79a:	2201      	movs	r2, #1
 800b79c:	4630      	mov	r0, r6
 800b79e:	f7ff fe39 	bl	800b414 <strncmp>
 800b7a2:	9b03      	ldr	r3, [sp, #12]
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	d1e1      	bne.n	800b76c <__gethex+0x1d8>
 800b7a8:	e7a2      	b.n	800b6f0 <__gethex+0x15c>
 800b7aa:	1ea9      	subs	r1, r5, #2
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f7fe fbb6 	bl	8009f1e <__any_on>
 800b7b2:	2800      	cmp	r0, #0
 800b7b4:	d0c2      	beq.n	800b73c <__gethex+0x1a8>
 800b7b6:	f04f 0903 	mov.w	r9, #3
 800b7ba:	e7c1      	b.n	800b740 <__gethex+0x1ac>
 800b7bc:	da09      	bge.n	800b7d2 <__gethex+0x23e>
 800b7be:	1b75      	subs	r5, r6, r5
 800b7c0:	4621      	mov	r1, r4
 800b7c2:	9801      	ldr	r0, [sp, #4]
 800b7c4:	462a      	mov	r2, r5
 800b7c6:	f7fe f971 	bl	8009aac <__lshift>
 800b7ca:	1b7f      	subs	r7, r7, r5
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	f100 0a14 	add.w	sl, r0, #20
 800b7d2:	f04f 0900 	mov.w	r9, #0
 800b7d6:	e7b8      	b.n	800b74a <__gethex+0x1b6>
 800b7d8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b7dc:	42bd      	cmp	r5, r7
 800b7de:	dd6f      	ble.n	800b8c0 <__gethex+0x32c>
 800b7e0:	1bed      	subs	r5, r5, r7
 800b7e2:	42ae      	cmp	r6, r5
 800b7e4:	dc34      	bgt.n	800b850 <__gethex+0x2bc>
 800b7e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d022      	beq.n	800b834 <__gethex+0x2a0>
 800b7ee:	2b03      	cmp	r3, #3
 800b7f0:	d024      	beq.n	800b83c <__gethex+0x2a8>
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d115      	bne.n	800b822 <__gethex+0x28e>
 800b7f6:	42ae      	cmp	r6, r5
 800b7f8:	d113      	bne.n	800b822 <__gethex+0x28e>
 800b7fa:	2e01      	cmp	r6, #1
 800b7fc:	d10b      	bne.n	800b816 <__gethex+0x282>
 800b7fe:	9a02      	ldr	r2, [sp, #8]
 800b800:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b804:	6013      	str	r3, [r2, #0]
 800b806:	2301      	movs	r3, #1
 800b808:	6123      	str	r3, [r4, #16]
 800b80a:	f8ca 3000 	str.w	r3, [sl]
 800b80e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b810:	2562      	movs	r5, #98	@ 0x62
 800b812:	601c      	str	r4, [r3, #0]
 800b814:	e73a      	b.n	800b68c <__gethex+0xf8>
 800b816:	1e71      	subs	r1, r6, #1
 800b818:	4620      	mov	r0, r4
 800b81a:	f7fe fb80 	bl	8009f1e <__any_on>
 800b81e:	2800      	cmp	r0, #0
 800b820:	d1ed      	bne.n	800b7fe <__gethex+0x26a>
 800b822:	9801      	ldr	r0, [sp, #4]
 800b824:	4621      	mov	r1, r4
 800b826:	f7fd ff29 	bl	800967c <_Bfree>
 800b82a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b82c:	2300      	movs	r3, #0
 800b82e:	6013      	str	r3, [r2, #0]
 800b830:	2550      	movs	r5, #80	@ 0x50
 800b832:	e72b      	b.n	800b68c <__gethex+0xf8>
 800b834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b836:	2b00      	cmp	r3, #0
 800b838:	d1f3      	bne.n	800b822 <__gethex+0x28e>
 800b83a:	e7e0      	b.n	800b7fe <__gethex+0x26a>
 800b83c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d1dd      	bne.n	800b7fe <__gethex+0x26a>
 800b842:	e7ee      	b.n	800b822 <__gethex+0x28e>
 800b844:	0800cbf0 	.word	0x0800cbf0
 800b848:	0800ca87 	.word	0x0800ca87
 800b84c:	0800cd62 	.word	0x0800cd62
 800b850:	1e6f      	subs	r7, r5, #1
 800b852:	f1b9 0f00 	cmp.w	r9, #0
 800b856:	d130      	bne.n	800b8ba <__gethex+0x326>
 800b858:	b127      	cbz	r7, 800b864 <__gethex+0x2d0>
 800b85a:	4639      	mov	r1, r7
 800b85c:	4620      	mov	r0, r4
 800b85e:	f7fe fb5e 	bl	8009f1e <__any_on>
 800b862:	4681      	mov	r9, r0
 800b864:	117a      	asrs	r2, r7, #5
 800b866:	2301      	movs	r3, #1
 800b868:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b86c:	f007 071f 	and.w	r7, r7, #31
 800b870:	40bb      	lsls	r3, r7
 800b872:	4213      	tst	r3, r2
 800b874:	4629      	mov	r1, r5
 800b876:	4620      	mov	r0, r4
 800b878:	bf18      	it	ne
 800b87a:	f049 0902 	orrne.w	r9, r9, #2
 800b87e:	f7ff fe22 	bl	800b4c6 <rshift>
 800b882:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b886:	1b76      	subs	r6, r6, r5
 800b888:	2502      	movs	r5, #2
 800b88a:	f1b9 0f00 	cmp.w	r9, #0
 800b88e:	d047      	beq.n	800b920 <__gethex+0x38c>
 800b890:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b894:	2b02      	cmp	r3, #2
 800b896:	d015      	beq.n	800b8c4 <__gethex+0x330>
 800b898:	2b03      	cmp	r3, #3
 800b89a:	d017      	beq.n	800b8cc <__gethex+0x338>
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d109      	bne.n	800b8b4 <__gethex+0x320>
 800b8a0:	f019 0f02 	tst.w	r9, #2
 800b8a4:	d006      	beq.n	800b8b4 <__gethex+0x320>
 800b8a6:	f8da 3000 	ldr.w	r3, [sl]
 800b8aa:	ea49 0903 	orr.w	r9, r9, r3
 800b8ae:	f019 0f01 	tst.w	r9, #1
 800b8b2:	d10e      	bne.n	800b8d2 <__gethex+0x33e>
 800b8b4:	f045 0510 	orr.w	r5, r5, #16
 800b8b8:	e032      	b.n	800b920 <__gethex+0x38c>
 800b8ba:	f04f 0901 	mov.w	r9, #1
 800b8be:	e7d1      	b.n	800b864 <__gethex+0x2d0>
 800b8c0:	2501      	movs	r5, #1
 800b8c2:	e7e2      	b.n	800b88a <__gethex+0x2f6>
 800b8c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8c6:	f1c3 0301 	rsb	r3, r3, #1
 800b8ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b8cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d0f0      	beq.n	800b8b4 <__gethex+0x320>
 800b8d2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b8d6:	f104 0314 	add.w	r3, r4, #20
 800b8da:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b8de:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b8e2:	f04f 0c00 	mov.w	ip, #0
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b8f0:	d01b      	beq.n	800b92a <__gethex+0x396>
 800b8f2:	3201      	adds	r2, #1
 800b8f4:	6002      	str	r2, [r0, #0]
 800b8f6:	2d02      	cmp	r5, #2
 800b8f8:	f104 0314 	add.w	r3, r4, #20
 800b8fc:	d13c      	bne.n	800b978 <__gethex+0x3e4>
 800b8fe:	f8d8 2000 	ldr.w	r2, [r8]
 800b902:	3a01      	subs	r2, #1
 800b904:	42b2      	cmp	r2, r6
 800b906:	d109      	bne.n	800b91c <__gethex+0x388>
 800b908:	1171      	asrs	r1, r6, #5
 800b90a:	2201      	movs	r2, #1
 800b90c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b910:	f006 061f 	and.w	r6, r6, #31
 800b914:	fa02 f606 	lsl.w	r6, r2, r6
 800b918:	421e      	tst	r6, r3
 800b91a:	d13a      	bne.n	800b992 <__gethex+0x3fe>
 800b91c:	f045 0520 	orr.w	r5, r5, #32
 800b920:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b922:	601c      	str	r4, [r3, #0]
 800b924:	9b02      	ldr	r3, [sp, #8]
 800b926:	601f      	str	r7, [r3, #0]
 800b928:	e6b0      	b.n	800b68c <__gethex+0xf8>
 800b92a:	4299      	cmp	r1, r3
 800b92c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b930:	d8d9      	bhi.n	800b8e6 <__gethex+0x352>
 800b932:	68a3      	ldr	r3, [r4, #8]
 800b934:	459b      	cmp	fp, r3
 800b936:	db17      	blt.n	800b968 <__gethex+0x3d4>
 800b938:	6861      	ldr	r1, [r4, #4]
 800b93a:	9801      	ldr	r0, [sp, #4]
 800b93c:	3101      	adds	r1, #1
 800b93e:	f7fd fe5d 	bl	80095fc <_Balloc>
 800b942:	4681      	mov	r9, r0
 800b944:	b918      	cbnz	r0, 800b94e <__gethex+0x3ba>
 800b946:	4b1a      	ldr	r3, [pc, #104]	@ (800b9b0 <__gethex+0x41c>)
 800b948:	4602      	mov	r2, r0
 800b94a:	2184      	movs	r1, #132	@ 0x84
 800b94c:	e6c5      	b.n	800b6da <__gethex+0x146>
 800b94e:	6922      	ldr	r2, [r4, #16]
 800b950:	3202      	adds	r2, #2
 800b952:	f104 010c 	add.w	r1, r4, #12
 800b956:	0092      	lsls	r2, r2, #2
 800b958:	300c      	adds	r0, #12
 800b95a:	f7fc ff84 	bl	8008866 <memcpy>
 800b95e:	4621      	mov	r1, r4
 800b960:	9801      	ldr	r0, [sp, #4]
 800b962:	f7fd fe8b 	bl	800967c <_Bfree>
 800b966:	464c      	mov	r4, r9
 800b968:	6923      	ldr	r3, [r4, #16]
 800b96a:	1c5a      	adds	r2, r3, #1
 800b96c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b970:	6122      	str	r2, [r4, #16]
 800b972:	2201      	movs	r2, #1
 800b974:	615a      	str	r2, [r3, #20]
 800b976:	e7be      	b.n	800b8f6 <__gethex+0x362>
 800b978:	6922      	ldr	r2, [r4, #16]
 800b97a:	455a      	cmp	r2, fp
 800b97c:	dd0b      	ble.n	800b996 <__gethex+0x402>
 800b97e:	2101      	movs	r1, #1
 800b980:	4620      	mov	r0, r4
 800b982:	f7ff fda0 	bl	800b4c6 <rshift>
 800b986:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b98a:	3701      	adds	r7, #1
 800b98c:	42bb      	cmp	r3, r7
 800b98e:	f6ff aee0 	blt.w	800b752 <__gethex+0x1be>
 800b992:	2501      	movs	r5, #1
 800b994:	e7c2      	b.n	800b91c <__gethex+0x388>
 800b996:	f016 061f 	ands.w	r6, r6, #31
 800b99a:	d0fa      	beq.n	800b992 <__gethex+0x3fe>
 800b99c:	4453      	add	r3, sl
 800b99e:	f1c6 0620 	rsb	r6, r6, #32
 800b9a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b9a6:	f7fd ff1b 	bl	80097e0 <__hi0bits>
 800b9aa:	42b0      	cmp	r0, r6
 800b9ac:	dbe7      	blt.n	800b97e <__gethex+0x3ea>
 800b9ae:	e7f0      	b.n	800b992 <__gethex+0x3fe>
 800b9b0:	0800ca87 	.word	0x0800ca87

0800b9b4 <L_shift>:
 800b9b4:	f1c2 0208 	rsb	r2, r2, #8
 800b9b8:	0092      	lsls	r2, r2, #2
 800b9ba:	b570      	push	{r4, r5, r6, lr}
 800b9bc:	f1c2 0620 	rsb	r6, r2, #32
 800b9c0:	6843      	ldr	r3, [r0, #4]
 800b9c2:	6804      	ldr	r4, [r0, #0]
 800b9c4:	fa03 f506 	lsl.w	r5, r3, r6
 800b9c8:	432c      	orrs	r4, r5
 800b9ca:	40d3      	lsrs	r3, r2
 800b9cc:	6004      	str	r4, [r0, #0]
 800b9ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800b9d2:	4288      	cmp	r0, r1
 800b9d4:	d3f4      	bcc.n	800b9c0 <L_shift+0xc>
 800b9d6:	bd70      	pop	{r4, r5, r6, pc}

0800b9d8 <__match>:
 800b9d8:	b530      	push	{r4, r5, lr}
 800b9da:	6803      	ldr	r3, [r0, #0]
 800b9dc:	3301      	adds	r3, #1
 800b9de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9e2:	b914      	cbnz	r4, 800b9ea <__match+0x12>
 800b9e4:	6003      	str	r3, [r0, #0]
 800b9e6:	2001      	movs	r0, #1
 800b9e8:	bd30      	pop	{r4, r5, pc}
 800b9ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9ee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b9f2:	2d19      	cmp	r5, #25
 800b9f4:	bf98      	it	ls
 800b9f6:	3220      	addls	r2, #32
 800b9f8:	42a2      	cmp	r2, r4
 800b9fa:	d0f0      	beq.n	800b9de <__match+0x6>
 800b9fc:	2000      	movs	r0, #0
 800b9fe:	e7f3      	b.n	800b9e8 <__match+0x10>

0800ba00 <__hexnan>:
 800ba00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba04:	680b      	ldr	r3, [r1, #0]
 800ba06:	6801      	ldr	r1, [r0, #0]
 800ba08:	115e      	asrs	r6, r3, #5
 800ba0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ba0e:	f013 031f 	ands.w	r3, r3, #31
 800ba12:	b087      	sub	sp, #28
 800ba14:	bf18      	it	ne
 800ba16:	3604      	addne	r6, #4
 800ba18:	2500      	movs	r5, #0
 800ba1a:	1f37      	subs	r7, r6, #4
 800ba1c:	4682      	mov	sl, r0
 800ba1e:	4690      	mov	r8, r2
 800ba20:	9301      	str	r3, [sp, #4]
 800ba22:	f846 5c04 	str.w	r5, [r6, #-4]
 800ba26:	46b9      	mov	r9, r7
 800ba28:	463c      	mov	r4, r7
 800ba2a:	9502      	str	r5, [sp, #8]
 800ba2c:	46ab      	mov	fp, r5
 800ba2e:	784a      	ldrb	r2, [r1, #1]
 800ba30:	1c4b      	adds	r3, r1, #1
 800ba32:	9303      	str	r3, [sp, #12]
 800ba34:	b342      	cbz	r2, 800ba88 <__hexnan+0x88>
 800ba36:	4610      	mov	r0, r2
 800ba38:	9105      	str	r1, [sp, #20]
 800ba3a:	9204      	str	r2, [sp, #16]
 800ba3c:	f7ff fd95 	bl	800b56a <__hexdig_fun>
 800ba40:	2800      	cmp	r0, #0
 800ba42:	d151      	bne.n	800bae8 <__hexnan+0xe8>
 800ba44:	9a04      	ldr	r2, [sp, #16]
 800ba46:	9905      	ldr	r1, [sp, #20]
 800ba48:	2a20      	cmp	r2, #32
 800ba4a:	d818      	bhi.n	800ba7e <__hexnan+0x7e>
 800ba4c:	9b02      	ldr	r3, [sp, #8]
 800ba4e:	459b      	cmp	fp, r3
 800ba50:	dd13      	ble.n	800ba7a <__hexnan+0x7a>
 800ba52:	454c      	cmp	r4, r9
 800ba54:	d206      	bcs.n	800ba64 <__hexnan+0x64>
 800ba56:	2d07      	cmp	r5, #7
 800ba58:	dc04      	bgt.n	800ba64 <__hexnan+0x64>
 800ba5a:	462a      	mov	r2, r5
 800ba5c:	4649      	mov	r1, r9
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f7ff ffa8 	bl	800b9b4 <L_shift>
 800ba64:	4544      	cmp	r4, r8
 800ba66:	d952      	bls.n	800bb0e <__hexnan+0x10e>
 800ba68:	2300      	movs	r3, #0
 800ba6a:	f1a4 0904 	sub.w	r9, r4, #4
 800ba6e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba72:	f8cd b008 	str.w	fp, [sp, #8]
 800ba76:	464c      	mov	r4, r9
 800ba78:	461d      	mov	r5, r3
 800ba7a:	9903      	ldr	r1, [sp, #12]
 800ba7c:	e7d7      	b.n	800ba2e <__hexnan+0x2e>
 800ba7e:	2a29      	cmp	r2, #41	@ 0x29
 800ba80:	d157      	bne.n	800bb32 <__hexnan+0x132>
 800ba82:	3102      	adds	r1, #2
 800ba84:	f8ca 1000 	str.w	r1, [sl]
 800ba88:	f1bb 0f00 	cmp.w	fp, #0
 800ba8c:	d051      	beq.n	800bb32 <__hexnan+0x132>
 800ba8e:	454c      	cmp	r4, r9
 800ba90:	d206      	bcs.n	800baa0 <__hexnan+0xa0>
 800ba92:	2d07      	cmp	r5, #7
 800ba94:	dc04      	bgt.n	800baa0 <__hexnan+0xa0>
 800ba96:	462a      	mov	r2, r5
 800ba98:	4649      	mov	r1, r9
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	f7ff ff8a 	bl	800b9b4 <L_shift>
 800baa0:	4544      	cmp	r4, r8
 800baa2:	d936      	bls.n	800bb12 <__hexnan+0x112>
 800baa4:	f1a8 0204 	sub.w	r2, r8, #4
 800baa8:	4623      	mov	r3, r4
 800baaa:	f853 1b04 	ldr.w	r1, [r3], #4
 800baae:	f842 1f04 	str.w	r1, [r2, #4]!
 800bab2:	429f      	cmp	r7, r3
 800bab4:	d2f9      	bcs.n	800baaa <__hexnan+0xaa>
 800bab6:	1b3b      	subs	r3, r7, r4
 800bab8:	f023 0303 	bic.w	r3, r3, #3
 800babc:	3304      	adds	r3, #4
 800babe:	3401      	adds	r4, #1
 800bac0:	3e03      	subs	r6, #3
 800bac2:	42b4      	cmp	r4, r6
 800bac4:	bf88      	it	hi
 800bac6:	2304      	movhi	r3, #4
 800bac8:	4443      	add	r3, r8
 800baca:	2200      	movs	r2, #0
 800bacc:	f843 2b04 	str.w	r2, [r3], #4
 800bad0:	429f      	cmp	r7, r3
 800bad2:	d2fb      	bcs.n	800bacc <__hexnan+0xcc>
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	b91b      	cbnz	r3, 800bae0 <__hexnan+0xe0>
 800bad8:	4547      	cmp	r7, r8
 800bada:	d128      	bne.n	800bb2e <__hexnan+0x12e>
 800badc:	2301      	movs	r3, #1
 800bade:	603b      	str	r3, [r7, #0]
 800bae0:	2005      	movs	r0, #5
 800bae2:	b007      	add	sp, #28
 800bae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae8:	3501      	adds	r5, #1
 800baea:	2d08      	cmp	r5, #8
 800baec:	f10b 0b01 	add.w	fp, fp, #1
 800baf0:	dd06      	ble.n	800bb00 <__hexnan+0x100>
 800baf2:	4544      	cmp	r4, r8
 800baf4:	d9c1      	bls.n	800ba7a <__hexnan+0x7a>
 800baf6:	2300      	movs	r3, #0
 800baf8:	f844 3c04 	str.w	r3, [r4, #-4]
 800bafc:	2501      	movs	r5, #1
 800bafe:	3c04      	subs	r4, #4
 800bb00:	6822      	ldr	r2, [r4, #0]
 800bb02:	f000 000f 	and.w	r0, r0, #15
 800bb06:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bb0a:	6020      	str	r0, [r4, #0]
 800bb0c:	e7b5      	b.n	800ba7a <__hexnan+0x7a>
 800bb0e:	2508      	movs	r5, #8
 800bb10:	e7b3      	b.n	800ba7a <__hexnan+0x7a>
 800bb12:	9b01      	ldr	r3, [sp, #4]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d0dd      	beq.n	800bad4 <__hexnan+0xd4>
 800bb18:	f1c3 0320 	rsb	r3, r3, #32
 800bb1c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb20:	40da      	lsrs	r2, r3
 800bb22:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bb26:	4013      	ands	r3, r2
 800bb28:	f846 3c04 	str.w	r3, [r6, #-4]
 800bb2c:	e7d2      	b.n	800bad4 <__hexnan+0xd4>
 800bb2e:	3f04      	subs	r7, #4
 800bb30:	e7d0      	b.n	800bad4 <__hexnan+0xd4>
 800bb32:	2004      	movs	r0, #4
 800bb34:	e7d5      	b.n	800bae2 <__hexnan+0xe2>

0800bb36 <__ascii_mbtowc>:
 800bb36:	b082      	sub	sp, #8
 800bb38:	b901      	cbnz	r1, 800bb3c <__ascii_mbtowc+0x6>
 800bb3a:	a901      	add	r1, sp, #4
 800bb3c:	b142      	cbz	r2, 800bb50 <__ascii_mbtowc+0x1a>
 800bb3e:	b14b      	cbz	r3, 800bb54 <__ascii_mbtowc+0x1e>
 800bb40:	7813      	ldrb	r3, [r2, #0]
 800bb42:	600b      	str	r3, [r1, #0]
 800bb44:	7812      	ldrb	r2, [r2, #0]
 800bb46:	1e10      	subs	r0, r2, #0
 800bb48:	bf18      	it	ne
 800bb4a:	2001      	movne	r0, #1
 800bb4c:	b002      	add	sp, #8
 800bb4e:	4770      	bx	lr
 800bb50:	4610      	mov	r0, r2
 800bb52:	e7fb      	b.n	800bb4c <__ascii_mbtowc+0x16>
 800bb54:	f06f 0001 	mvn.w	r0, #1
 800bb58:	e7f8      	b.n	800bb4c <__ascii_mbtowc+0x16>

0800bb5a <_realloc_r>:
 800bb5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb5e:	4680      	mov	r8, r0
 800bb60:	4615      	mov	r5, r2
 800bb62:	460c      	mov	r4, r1
 800bb64:	b921      	cbnz	r1, 800bb70 <_realloc_r+0x16>
 800bb66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb6a:	4611      	mov	r1, r2
 800bb6c:	f7fb bcdc 	b.w	8007528 <_malloc_r>
 800bb70:	b92a      	cbnz	r2, 800bb7e <_realloc_r+0x24>
 800bb72:	f7fd fcf9 	bl	8009568 <_free_r>
 800bb76:	2400      	movs	r4, #0
 800bb78:	4620      	mov	r0, r4
 800bb7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb7e:	f000 f86b 	bl	800bc58 <_malloc_usable_size_r>
 800bb82:	4285      	cmp	r5, r0
 800bb84:	4606      	mov	r6, r0
 800bb86:	d802      	bhi.n	800bb8e <_realloc_r+0x34>
 800bb88:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bb8c:	d8f4      	bhi.n	800bb78 <_realloc_r+0x1e>
 800bb8e:	4629      	mov	r1, r5
 800bb90:	4640      	mov	r0, r8
 800bb92:	f7fb fcc9 	bl	8007528 <_malloc_r>
 800bb96:	4607      	mov	r7, r0
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d0ec      	beq.n	800bb76 <_realloc_r+0x1c>
 800bb9c:	42b5      	cmp	r5, r6
 800bb9e:	462a      	mov	r2, r5
 800bba0:	4621      	mov	r1, r4
 800bba2:	bf28      	it	cs
 800bba4:	4632      	movcs	r2, r6
 800bba6:	f7fc fe5e 	bl	8008866 <memcpy>
 800bbaa:	4621      	mov	r1, r4
 800bbac:	4640      	mov	r0, r8
 800bbae:	f7fd fcdb 	bl	8009568 <_free_r>
 800bbb2:	463c      	mov	r4, r7
 800bbb4:	e7e0      	b.n	800bb78 <_realloc_r+0x1e>

0800bbb6 <__ascii_wctomb>:
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	4608      	mov	r0, r1
 800bbba:	b141      	cbz	r1, 800bbce <__ascii_wctomb+0x18>
 800bbbc:	2aff      	cmp	r2, #255	@ 0xff
 800bbbe:	d904      	bls.n	800bbca <__ascii_wctomb+0x14>
 800bbc0:	228a      	movs	r2, #138	@ 0x8a
 800bbc2:	601a      	str	r2, [r3, #0]
 800bbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc8:	4770      	bx	lr
 800bbca:	700a      	strb	r2, [r1, #0]
 800bbcc:	2001      	movs	r0, #1
 800bbce:	4770      	bx	lr

0800bbd0 <_raise_r>:
 800bbd0:	291f      	cmp	r1, #31
 800bbd2:	b538      	push	{r3, r4, r5, lr}
 800bbd4:	4605      	mov	r5, r0
 800bbd6:	460c      	mov	r4, r1
 800bbd8:	d904      	bls.n	800bbe4 <_raise_r+0x14>
 800bbda:	2316      	movs	r3, #22
 800bbdc:	6003      	str	r3, [r0, #0]
 800bbde:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe2:	bd38      	pop	{r3, r4, r5, pc}
 800bbe4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bbe6:	b112      	cbz	r2, 800bbee <_raise_r+0x1e>
 800bbe8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbec:	b94b      	cbnz	r3, 800bc02 <_raise_r+0x32>
 800bbee:	4628      	mov	r0, r5
 800bbf0:	f000 f830 	bl	800bc54 <_getpid_r>
 800bbf4:	4622      	mov	r2, r4
 800bbf6:	4601      	mov	r1, r0
 800bbf8:	4628      	mov	r0, r5
 800bbfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbfe:	f000 b817 	b.w	800bc30 <_kill_r>
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d00a      	beq.n	800bc1c <_raise_r+0x4c>
 800bc06:	1c59      	adds	r1, r3, #1
 800bc08:	d103      	bne.n	800bc12 <_raise_r+0x42>
 800bc0a:	2316      	movs	r3, #22
 800bc0c:	6003      	str	r3, [r0, #0]
 800bc0e:	2001      	movs	r0, #1
 800bc10:	e7e7      	b.n	800bbe2 <_raise_r+0x12>
 800bc12:	2100      	movs	r1, #0
 800bc14:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bc18:	4620      	mov	r0, r4
 800bc1a:	4798      	blx	r3
 800bc1c:	2000      	movs	r0, #0
 800bc1e:	e7e0      	b.n	800bbe2 <_raise_r+0x12>

0800bc20 <raise>:
 800bc20:	4b02      	ldr	r3, [pc, #8]	@ (800bc2c <raise+0xc>)
 800bc22:	4601      	mov	r1, r0
 800bc24:	6818      	ldr	r0, [r3, #0]
 800bc26:	f7ff bfd3 	b.w	800bbd0 <_raise_r>
 800bc2a:	bf00      	nop
 800bc2c:	20000588 	.word	0x20000588

0800bc30 <_kill_r>:
 800bc30:	b538      	push	{r3, r4, r5, lr}
 800bc32:	4d07      	ldr	r5, [pc, #28]	@ (800bc50 <_kill_r+0x20>)
 800bc34:	2300      	movs	r3, #0
 800bc36:	4604      	mov	r4, r0
 800bc38:	4608      	mov	r0, r1
 800bc3a:	4611      	mov	r1, r2
 800bc3c:	602b      	str	r3, [r5, #0]
 800bc3e:	f7f6 fc4d 	bl	80024dc <_kill>
 800bc42:	1c43      	adds	r3, r0, #1
 800bc44:	d102      	bne.n	800bc4c <_kill_r+0x1c>
 800bc46:	682b      	ldr	r3, [r5, #0]
 800bc48:	b103      	cbz	r3, 800bc4c <_kill_r+0x1c>
 800bc4a:	6023      	str	r3, [r4, #0]
 800bc4c:	bd38      	pop	{r3, r4, r5, pc}
 800bc4e:	bf00      	nop
 800bc50:	20000b10 	.word	0x20000b10

0800bc54 <_getpid_r>:
 800bc54:	f7f6 bc3a 	b.w	80024cc <_getpid>

0800bc58 <_malloc_usable_size_r>:
 800bc58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc5c:	1f18      	subs	r0, r3, #4
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	bfbc      	itt	lt
 800bc62:	580b      	ldrlt	r3, [r1, r0]
 800bc64:	18c0      	addlt	r0, r0, r3
 800bc66:	4770      	bx	lr

0800bc68 <_init>:
 800bc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc6a:	bf00      	nop
 800bc6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc6e:	bc08      	pop	{r3}
 800bc70:	469e      	mov	lr, r3
 800bc72:	4770      	bx	lr

0800bc74 <_fini>:
 800bc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc76:	bf00      	nop
 800bc78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc7a:	bc08      	pop	{r3}
 800bc7c:	469e      	mov	lr, r3
 800bc7e:	4770      	bx	lr
